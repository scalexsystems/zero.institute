webpackJsonp([1,2],[,,,function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.types={ADD_USER:"school/ADD_USER",ADD_EMPLOYEE:"school/ADD_EMPLOYEE",ADD_STUDENT:"school/ADD_STUDENT",ADD_TEACHER:"school/ADD_TEACHER",ADD_GROUP:"school/ADD_GROUP",ADD_COURSE:"school/ADD_COURSE",SET_USER_IS_MEMBER:"school/SET_USER_IS_MEMBER",SET_VALUE_ON_GROUP:"school/SET_VALUE_ON_GROUP",SET_DISCIPLINES:"school/SET_DISCIPLINES",SET_DEPARTMENTS:"school/SET_DEPARTMENTS",SET_SEMESTERS:"school/SET_SEMESTERS",ADD_DEPARTMENT:"school/ADD_DEPARTMENT",UPDATE_DEPARTMENT:"school/UPDATE_DEPARTMENT",ADD_DISCIPLINE:"school/ADD_DISCIPLINE",UPDATE_DISCIPLINE:"school/UPDATE_DISCIPLINE",ADD_SEMESTER:"school/ADD_SEMESTER",UPDATE_SEMESTER:"school/UPDATE_SEMESTER",SET_SCHOOL:"school/SET_SCHOOL",SET_USER:"SET_USER"},t.actions={getGroups:"school/getGroups",getUsers:"school/getUsers",getStudents:"school/getStudents",getTeachers:"school/getTeachers",getEmployees:"school/getEmployees",getDepartments:"school/getDepartments",getDisciplines:"school/getDisciplines",getSemesters:"school/getSemesters",getCourses:"school/getCourses",findStudent:"school/findStudent",addDepartment:"school/addDepartment",updateDepartment:"school/updateDepartment",addDiscipline:"school/addDiscipline",updateDiscipline:"school/updateDiscipline",addSemester:"school/addSemester",updateSemester:"school/updateSemester",getUser:"getUser",getSchool:"school/getSchool"},t.getters={groups:"school/groups",groupMap:"school/groupMap",users:"school/users",courses:"school/courses",employees:"school/employees",students:"school/students",teachers:"school/teachers",departments:"school/departments",disciplines:"school/disciplines",semesters:"school/semesters",departmentsByType:"school/departmentsByType",departmentCount:"school/departmentCount",user:"user",school:"school/school"}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(724);Object.defineProperty(t,"ActionMenu",{enumerable:!0,get:function(){return a(n).default}});var i=s(82);Object.defineProperty(t,"ActivityBox",{enumerable:!0,get:function(){return a(i).default}});var r=s(111);Object.defineProperty(t,"LayoutBox",{enumerable:!0,get:function(){return a(r).default}});var o=s(731);Object.defineProperty(t,"MessageBox",{enumerable:!0,get:function(){return a(o).default}});var c=s(284);Object.defineProperty(t,"NavBar",{enumerable:!0,get:function(){return a(c).default}});var u=s(735);Object.defineProperty(t,"SidebarBox",{enumerable:!0,get:function(){return a(u).default}});var l=s(729);Object.defineProperty(t,"LoadingPlaceholder",{enumerable:!0,get:function(){return a(l).default}});var d=s(732);Object.defineProperty(t,"MessageEditor",{enumerable:!0,get:function(){return a(d).default}});var f=s(112);Object.defineProperty(t,"PersonCard",{enumerable:!0,get:function(){return a(f).default}});var p=s(285);Object.defineProperty(t,"PhotoHolder",{enumerable:!0,get:function(){return a(p).default}});var v=s(736);Object.defineProperty(t,"WindowBox",{enumerable:!0,get:function(){return a(v).default}});var m=s(728);Object.defineProperty(t,"InfiniteLoader",{enumerable:!0,get:function(){return a(m).default}});var h=s(36);Object.defineProperty(t,"Modal",{enumerable:!0,get:function(){return a(h).default}});var _=s(730);Object.defineProperty(t,"MessageAction",{enumerable:!0,get:function(){return a(_).default}});var g=s(283);Object.defineProperty(t,"FileUploader",{enumerable:!0,get:function(){return a(g).default}})},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.isLastRecord=t.httpThen=t.normalizeValidationErrors=t.isValidationException=t.pushIf=t.pushOrMerge=t.mapObject=t.nl2br=t.unescapeHtml=t.escapeHtml=t.bool=void 0;var n=s(1),i=a(n),r=s(58),o=a(r),c=s(7),u=a(c),l=(t.bool=function(e){return[!0,"true","yes","1",1].indexOf(e)>-1},t.escapeHtml=function(e){var t=document.createElement("div");return t.appendChild(document.createTextNode(e)),t.innerHTML},t.unescapeHtml=function(e){var t=document.createElement("div");t.innerHTML=e;var s=t.childNodes[0];return s?s.nodeValue:""},t.nl2br=function(e){return e.replace(/\n+/g,"<br>")},t.mapObject=function(e,t){var s={};return o.default.isArray(t)?o.default.each(t,function(t){s[t]=e[t]}):o.default.each(t,function(t,a){s[t]=e[a]}),s});t.pushOrMerge=function e(t,s){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];return(0,u.default)(s)?(s.forEach(function(e){var s=t.findIndex(function(t){return t.id===e.id});s===-1?t.push(e):t.splice(s,1,(0,i.default)({},e,l(t[s],a)))}),t):e(t,[s],a)},t.pushIf=function e(t,s){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=arguments[3];return(0,u.default)(s)?(s.forEach(function(e){if(e.id in a){if(void 0===n)return;var s=a[e.id];return void t.splice(s,1,(0,i.default)({},e,l(t[s],n)))}a[e.id]=t.length,t.push(e)}),t):e(t,[s],a)},t.isValidationException=function(e){return 422===e.status,!0},t.normalizeValidationErrors=function(e){var t={};return o.default.each(e,function(e,s){t[s]=o.default.isArray(e)?e.join(" "):e}),t},t.httpThen=function(e){if("ok"in e){if(e.ok===!0)return e.json();throw e}return e},t.isLastRecord=function(e){var t=e._meta,s=e.pagination;return t&&(s=t.pagination),s&&s.current_page===s.total_pages}},,,,,,,,,,,,,,,,,,,,function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.types={ADD_GROUP:"hub/ADD_GROUP",ADD_MESSAGE_TO_GROUP:"hub/ADD_MESSAGE_TO_GROUP",SET_MESSAGE_PAGE_TO_GROUP:"hub/SET_MESSAGE_PAGE_TO_GROUP",STATUS_GROUP_MESSAGE:"hub/STATUS_GROUP_MESSAGE",READ_GROUP_MESSAGE:"hub/READ_GROUP_MESSAGE",REMOVE_GROUP:"hub/REMOVE_GROUP",ADD_USER:"hub/ADD_USER",ADD_MESSAGE:"hub/ADD_MESSAGE",SET_MESSAGE_PAGE_TO_USER:"hub/SET_MESSAGE_PAGE_TO_GROUP",STATUS_MESSAGE:"hub/STATUS_MESSAGE",READ_MESSAGE:"hub/READ_MESSAGE",SET_VALUE_ON_GROUP:"hub/SET_VALUE_ON_GROUP"},t.actions={findGroupById:"hub/findGroupById",getGroups:"hub/getGroups",setGroups:"hub/setGroups",getMessagesFromGroup:"hub/getMessagesFromGroup",sendMessageToGroup:"hub/sendMessageToGroup",sendMessageReadReceiptForGroup:"hub/sendMessageReadReceiptForGroup",onNewMessageToGroup:"hub/onNewMessageToGroup",getCourses:"hub/getCourses",getMessagedUsers:"hub/getMessagedUsers",getMessagesFromUser:"hub/getMessagesFromUser",sendMessageToUser:"hub/sendMessageToUser",sendMessageReadReceipt:"hub/sendMessageReadReceipt",onNewMessageToUser:"hub/onNewMessageToUser",joinGroup:"hub/joinGroup",leaveGroup:"hub/leaveGroup",updateGroupPhoto:"hub/updateGroupPhoto"},t.getters={groups:"hub/groups",courseGroups:"hub/courseGroups",groupMap:"hub/groupMap",courses:"hub/courses",users:"hub/users",userMap:"hub/userMap"}},,,,,,,,,,function(e,t,s){var a,n;s(510),a=s(310);var i=s(810);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-cb01878e",e.exports=a},function(e,t,s){var a,n;s(490),a=s(364);var i=s(790);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-7665596d",e.exports=a},,,,,,,,,,,function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(56),i=a(n);t.default={props:{name:String,title:String,subtitle:String,value:{default:!1},required:{type:Boolean,default:!1},feedback:null,feedbackType:{default:"danger",validator:function(e){return["danger","success","warning"].indexOf(e)>-1}}},computed:{id:function(){var e=this._uid;return"id"+e},identifier:function(){var e=this.name,t=null;return e||t},feedbackState:function(){var e=this.feedbackType,t=void 0!==this.feedback;return t&&(0,i.default)(e)?"has-"+e:""},formControlState:function(){var e=this.feedbackType,t=void 0!==this.feedback;return t&&(0,i.default)(e)?"form-control-"+e:""}},methods:{is:i.default}}},,,,,,,,,,,,,,function(e,t,s){var a,n;s(464),a=s(311);var i=s(763);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-314d6712",e.exports=a},,,,,,,,,,,,,,,,,,,,,function(e,t,s){var a,n;s(480),a=s(338);var i=s(779);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},,,,,,,,,,,,,,,,,function(e,t,s){e.exports=s.p+"/img/person.jpg?ef19fc185054a05cee060850ccb6c9a3"},,,,,,,,,,,,function(e,t,s){var a,n;s(500),a=s(343);var i=s(799);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-928db9fe",e.exports=a},function(e,t,s){var a,n;s(486),a=s(349);var i=s(786);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},,function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(163),o=a(r),c=s(22),u=a(c),l=s(2),d=s(4),f=s(25),p=s(5),v=s(281),m=a(v);t.default={components:{MessageBox:d.MessageBox,MessageList:m.default,MessageEditor:d.MessageEditor,LoadingPlaceholder:d.LoadingPlaceholder},computed:(0,i.default)({context:function(){var e=this.groups,t=this.groupId;return e.find(function(e){return e.id===t})}},(0,l.mapGetters)({groups:f.getters.groups,groupMap:f.getters.groupMap})),created:function(){this.findGroup()},data:function(){return{message:""}},methods:(0,i.default)({send:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];this.sendMessage({groupId:this.context.id,content:e,errors:s,params:{attachments:t}}),this.message="";var a="group."+this.context.id+".message";a in window.localStorage&&window.localStorage.removeItem(a),this.$refs.input.resize(),this.$refs.input.focus()},findGroup:function(){var e=this.groupId;!e||e in this.groupMap||this.findGroupById(e)},getOlderMessages:function(e){var t=this;return this.context.messages_loaded?void e.end():void this.getMessages({groupId:this.context.id}).then(p.httpThen).then(function(s){var a=s._meta.pagination;if(a.current_page<a.total_pages){var n=(0,o.default)(s.data);if(n&&n.unread===!0)return void t.loadMore(e)}a.current_page<a.total_pages?e.done():e.end()}).catch(function(e){return e})},markMessagesSeen:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,s=this.context.id;if(null!==t)return void this.readMessage({groupId:s,message:t});var a=this.context.messages.filter(function(e){return e.unread});(0,u.default)(a,function(t){return e.readMessage({groupId:s,message:t})})}},(0,l.mapActions)({getMessages:f.actions.getMessagesFromGroup,readMessage:f.actions.sendMessageReadReceiptForGroup,sendMessage:f.actions.sendMessageToGroup}),(0,l.mapActions)("hub",["findGroupById"])),watch:{context:function(e){var t=this;this.$debug("Group Updated.",e),e&&0===e.messages.length&&this.getOlderMessages({done:function(){},end:function(){}}),e&&!e.messages_loaded&&this.$nextTick(function(){t.$refs.messages.$emit("reset")})},groupId:"findGroup"}}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,s){var a,n;a=s(303);var i=s(804);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(495),a=s(313);var i=s(794);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(475),a=s(315);var i=s(774);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-52e22d55",e.exports=a},function(e,t,s){var a,n;s(499),a=s(323);var i=s(798);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(458),a=s(363);var i=s(756);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-22147c0c",e.exports=a},function(e,t,s){var a,n;s(509),s(508),a=s(348);var i=s(809);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-bb365e00",e.exports=a},function(e,t,s){var a,n;s(488),a=s(365);var i=s(788);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-7180ef07",e.exports=a},,,function(e,t,s){"use strict";function a(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t.default=e,t}function n(e){return e&&e.__esModule?e:{default:e}}var i=s(37),r=n(i),o=s(816),c=n(o),u=s(286),l=n(u),d=s(22),f=n(d),p=s(379),v=n(p),m=s(378),h=n(m),_=s(375),g=a(_),C=s(373),b=a(C),y=s(683),x=n(y),w=s(382),S=n(w),M=s(377),R=n(M),P=s(376),E=n(P);window.$=window.jQuery=s(21),window.io=s(678),window.Tether=s(681),s(392),window.Vue=r.default,window.Laravel=window.Laravel||{},r.default.use(h.default,{debug:!0}),r.default.use(c.default),r.default.http.options.root="/api","csrfToken"in window.Laravel?r.default.http.headers.common["X-CSRF-Token"]=window.Laravel.csrfToken:"token"in window.Laravel&&(r.default.http.headers.common.Authorization="Bearer "+window.Laravel.token,window.Laravel.broadcast.auth={headers:{Authorization:"Bearer "+window.Laravel.token}}),r.default.use(v.default,window.Laravel.broadcast),(0,f.default)(b,function(e,t){return r.default.directive(t,e)}),(0,f.default)(g,function(e,t){return r.default.component(t,e)}),(0,f.default)(E.default,function(e){return e(r.default,{store:S.default,routes:R.default.routes})});var k=new l.default(R.default);new r.default({render:function(e){return e(x.default)},store:S.default,router:k}).$mount("#app")},function(e,t){},,,,function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(2),o=s(284),c=a(o),u=s(3);t.default={name:"App",components:{NavBar:c.default},computed:(0,i.default)({},(0,r.mapGetters)({user:u.getters.user})),methods:(0,i.default)({},(0,r.mapActions)({getUser:u.actions.getUser}),(0,r.mapActions)("school",["getDepartments","getDisciplines","getSemesters"])),created:function(){"id"in this.user?this.user&&this.user.channel&&this.$echo.private(this.user.channel):this.getUser(),this.getDepartments(),this.getDisciplines(),this.getSemesters()},watch:{user:function(){this.$echo.private(this.user.channel)}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(2),o=s(4);t.default={name:"CourseDashboard",components:{ActivityBox:o.ActivityBox,Modal:o.Modal,PersonCard:o.PersonCard},data:function(){return{q:"",course:null}},created:function(){this.courses.length||this.getCourses()},computed:(0,i.default)({showCourse:function(){return null!==this.course},department:function(){var e=this.course,t=this.departments;return e?(t.find(function(t){return e.department_id===t.id})||{}).name:""},discipline:function(){var e=this.course,t=this.disciplines;return e?(t.find(function(t){return e.discipline_id===t.id})||{}).name:""},semester:function(){var e=this.course,t=this.semesters;return e?(t.find(function(t){return t.id===e.semester_id})||{}).name:""}},(0,r.mapGetters)("school",["courses","departments","disciplines","semesters"])),methods:(0,i.default)({openCourse:function(e){this.course=e}},(0,r.mapActions)("school",["getCourses"]))}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(2),o=s(58),c=s(35),u=a(c),l=s(61),d=a(l),f=s(36),p=a(f),v=s(4);t.default={created:function(){0===this.managers.length&&this.getManagers(),this.teachers.length||this.getTeachers()},data:function(){return{loaded:!1,errors:{},managers:[],query:"",message:void 0,addedManagers:[]}},computed:(0,i.default)({suggestions:function(){return[].concat(this.teachers)}},(0,r.mapGetters)("school",["teachers"])),components:{SettingsBox:u.default,Modal:p.default,SettingsCard:d.default,ItemCard:v.PersonCard},methods:(0,i.default)({getManagers:function(){var e=this;this.$http.get("people/roles/course-manager").then(function(t){e.managers=t.body.data})},onSuggest:(0,o.throttle)(function(e){var t=e.value,s=e.start,a=e.end;s(),this.getTeachers({q:t}).then(a)},400),onSelect:function(e){this.managers.indexOf(e.id)<0&&(this.query=e.name,this.addedManagers.push(e))},onSave:function(){var e=this,t=this.addedManagers.map(function(e){return{id:e.id,type:e._type}});t.length&&this.$http.post("people/roles",{managers:t,role:"course-manager"}).then(function(){e.managers=e.managers.concat(e.addedManagers),e.message=void 0,e.addedManagers=[]}).catch(function(e){return e.json()}).then(function(t){var s=t.message;e.message=s})},onCancel:function(){this.addedManagers.length&&(this.addedManagers=[],this.message=void 0)}},(0,r.mapActions)("school",["getTeachers"]))}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(2),o=s(9),c=a(o),u=s(114),l=a(u);t.default={name:"Course",mixins:[l.default],computed:(0,i.default)({course:function(){var e=this.courses,t=(0,c.default)(this.$route.params.course);return e.find(function(e){return e.id===t})},groupId:function(){var e=this.course;if(e)return e.session.group.id}},(0,r.mapGetters)("hub",["courses"])),methods:(0,i.default)({openTitle:function(){this.$router.push({name:"acad.course-preview",params:{course:this.course.id}})},fetchCourse:function(e){var t=this.courses.findIndex(function(t){return t.id===e});t>-1||this.find(e)}},(0,r.mapActions)("hub",{find:"getCourses"})),created:function(){this.fetchCourse((0,c.default)(this.$route.params.course))},watch:{$route:function(e,t){if(this.message.trim().length){var s="course."+t.params.course+".message";window.localStorage.setItem(s,this.message)}var a="course."+e.params.course+".message";this.message=window.localStorage.getItem(a)||"",this.fetchCourse((0,c.default)(e.params.course))}},beforeRouteEnter:function(e,t,s){var a="course."+e.params.course+".message";s(a in window.localStorage?function(e){return e.$set(e,"message",window.localStorage.getItem(a))}:function(e){return e.$set(e,"message","")})},beforeRouteLeave:function(e,t,s){if(this.message.trim().length){var a="course."+this.course.id+".message";window.localStorage.setItem(a,this.message)}s()}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(9),o=a(r),c=s(2),u=s(12),l=a(u),d=s(45),f=a(d),p=s(703),v=a(p),m=s(5),h=s(4);t.default={name:"CoursePreview",components:{ActivityBox:h.ActivityBox,ActionMenu:h.ActionMenu,CourseEnrollment:v.default,InfiniteScroll:f.default,ItemCard:h.PersonCard,LoadingPlaceholder:h.LoadingPlaceholder,PhotoHolder:h.PhotoHolder},data:function(){return{students:[],q:"",page:0}},computed:(0,i.default)({title:function(){var e=this.course;return e?e.name:""},subtitle:function(){return"Course Information"},courseId:function(){var e=this.$route;return(0,o.default)(e.params.course)},course:function(){var e=this.courses,t=this.courseId;return e.find(function(e){return e.id===t})},isInstructor:function(){var e=this.course,t=this.user;return!(!e||!t)&&(e.session.instructor_id===t.person.id&&"teacher"===t.person._type)}},(0,c.mapGetters)("hub",["courses"]),(0,c.mapGetters)(["user"])),methods:(0,i.default)({search:(0,l.default)(function(){this.page=0,this.onInfinite()}),fetchCourse:function(){var e=this.course;this.students=[],!e&&this.coruseId&&this.find(this.courseId)},onAction:function(){this.$refs.enroll.$emit("open",this.course)},resetInfinite:function(){this.page=0,this.onInfinite(!1)},onInfinite:function(){var e=this,t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],s={loaded:function(){return e.$refs.infinite.$emit("$InfiniteLoading:loaded")},complete:function(){return e.$refs.infinite.$emit("$InfiniteLoading:complete")},reset:function(){return e.$refs.infinite.$emit("$InfiniteLoading:reset")}};t||s.reset(),this.page+=1,this.$http.get("me/courses/"+this.course.id+"/enrolled",{page:this.page}).then(function(e){return e.json()}).then(function(t){(0,m.pushOrMerge)(e.students,t.data),(0,m.isLastRecord)(t)?s.complete():s.loaded()}).catch(function(){return s.complete()})},openProfile:function(e){this.$router.push({name:"hub.user-preview",params:{user:e.user.id}})}},(0,c.mapActions)("hub",{find:"findCourse"})),created:function(){this.fetchCourse()},watch:{courseId:"fetchCourse"}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(38),o=a(r),c=s(2),u=s(58),l=s(35),d=a(l),f=s(61),p=a(f),v=s(36),m=a(v),h=s(3);t.default={created:function(){0===(0,o.default)(this.departmentsByType).length&&this.getDepartments(),0===this.suggestions.length&&this.getTeachers()},data:function(){return{onAdd:!1,loaded:!1,department:{name:"",short_name:"",head:"",academic:""},editReference:{id:!1,index:!1},query:"",errors:{}}},computed:(0,i.default)({departmentTypes:function(){return{academic:"Academic",nonAcademic:"Non-Academic/Administrative"}},academic:function(){return this.departmentsByType.academic},nonAcademic:function(){return this.departmentsByType.nonAcademic},title:function(){return this.editReference.id?"Edit Department":"Add New Department"},subtitle:function(){return"Add/remove Departments. "+this.departmentCount+" departments added"}},(0,c.mapGetters)({departmentsByType:h.getters.departmentsByType,suggestions:h.getters.teachers,departmentCount:h.getters.departmentCount})),components:{SettingsBox:d.default,Modal:m.default,SettingsCard:p.default},methods:(0,i.default)({showAddDepartment:function(){this.onAdd=!0},onCancel:function(){this.onAdd=!1,this.resetReference()},onSubmit:function(){var e=this.department.academic;this.department.academic="academic"===e;var t=this.editReference.id?"updateDepartment":"addNewDepartment";this[t](e)},onSuggest:(0,u.throttle)(function(e){var t=e.value,s=e.start,a=e.end;s(),this.getTeachers({q:t}).then(a)},400),search:function(){},onSelect:function(e){this.department.head=e,this.department.head_id=e.id,this.query=e.name},addNewDepartment:function(){var e=this;this.$http.post("departments",this.department).then(function(e){return e.json()}).then(function(t){e.onAdd=!1,e.addDepartment(t),e.resetReference()}).catch(function(){})},updateDepartment:function(e){var t=this;this.$http.put("departments/"+this.editReference.id,this.department).then(function(){t.onAdd=!1;var s=(0,u.clone)(t.department);t.departmentsByType[e][t.editReference.index]=s,t.updateDepartmentAction(s),t.resetReference()})},getText:function(e){var t=e.head&&(0,o.default)(e.head).length?e.head.name:"Not assigned";return"HOD: "+t},departmentClicked:function(e,t){var s=this.departmentsByType[t][e];this.editReference={id:s.id,index:e},this.department=(0,u.clone)(s),this.department.academic=this.department.academic?"academic":"nonAcademic",this.query=s.head.name||"",this.onAdd=!0},resetReference:function(){var e=this;(0,o.default)(this.department).forEach(function(t){e.department[t]=""}),this.query="",this.editReference={id:!1,index:!1}}},(0,c.mapActions)({getDepartments:h.actions.getDepartments,addDepartment:h.actions.addDepartment,updateDepartmentAction:h.actions.updateDepartment,getTeachers:h.actions.getTeachers}))}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(38),i=a(n),r=s(1),o=a(r),c=s(2),u=s(58),l=s(35),d=a(l),f=s(61),p=a(f),v=s(36),m=a(v),h=s(3);t.default={created:function(){0===this.disciplines.length&&this.getDisciplines()},data:function(){return{onAdd:!1,loaded:!1,discipline:{name:"",short_name:""},editReference:{id:!1,index:!1},errors:{}}},computed:(0,o.default)({title:function(){return this.editReference.id?"Edit Discipline":"Add New Discipline"}},(0,c.mapGetters)({disciplines:h.getters.disciplines})),components:{SettingsBox:d.default,Modal:m.default,SettingsCard:p.default},methods:(0,o.default)({showAddDiscipline:function(){this.onAdd=!0},onCancel:function(){this.onAdd=!1,this.resetReference()},onSubmit:function(){var e=this.editReference.id?"updateDiscipline":"addNewDiscipline";this[e]()},addNewDiscipline:function(){var e=this;this.$http.post("disciplines",this.discipline).then(function(){var t=(0,u.clone)(e.discipline);e.onAdd=!1,e.addDiscipline(t),e.resetReference()}).catch(function(){})},updateDiscipline:function(){var e=this;this.$http.put("disciplines/"+this.editReference.id,this.discipline).then(function(){e.onAdd=!1;var t=(0,u.clone)(e.discipline);e.disciplines[e.editReference.index]=t,e.updateDisciplineAction(t),e.resetReference()})},disciplineClicked:function(e){var t=this.disciplines[e];this.editReference={id:t.id,index:e},this.discipline=(0,u.clone)(t),this.onAdd=!0},resetReference:function(){var e=this;(0,i.default)(this.discipline).forEach(function(t){e.discipline[t]=""}),this.editReference={id:!1,index:!1}}},(0,c.mapActions)({getDisciplines:h.actions.getDisciplines,addDiscipline:h.actions.addDiscipline,updateDisciplineAction:h.actions.updateDiscipline}))}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(113),o=a(r),c=s(12),u=a(c),l=s(2),d=s(4),f=s(25),p=s(3),v=s(5);t.default={name:"GroupCreate",components:{ActivityBox:d.ActivityBox,PersonCard:d.PersonCard},data:function(){return{group:{name:"",type:"public",description:"",member_ids:[]},query:"",members:[],errors:{}}},computed:(0,i.default)({groupTypes:function(){return{public:"Public",private:"Private"}}},(0,l.mapGetters)({suggestions:p.getters.users})),methods:(0,i.default)({createGroup:function(){var e=this;this.validate()&&(this.$refs.action.classList.add("disabled"),this.$http.post("groups",this.group).then(function(e){return e.json()}).then(function(t){return e.$refs.action.classList.remove("disabled"),e.$store.commit(f.types.ADD_GROUP,t),e.$store.commit(p.types.ADD_GROUP,t),e.$router.push({name:"hub.group",params:{group:t.id}}),t}).catch(function(t){return e.$refs.action.classList.remove("disabled"),(0,v.isValidationException)(t)&&t.json().then(function(t){return e.$set(e,"errors",(0,v.normalizeValidationErrors)(t.errors))}),t}))},validate:function(){var e=o.default.make(this.group,{name:"required|min:3|max:60",type:"required",description:"required"});return e.fails()?(this.$set(this,"errors",(0,v.normalizeValidationErrors)(e.getErrors())),!1):(this.$set(this,"errors",{}),!0)},onSuggest:(0,u.default)(function(e){var t=e.value,s=e.start,a=e.end;s(),this.findMembers({q:t}).then(a)},400),onSelect:function(e){this.group.member_ids.indexOf(e.id)<0&&(this.group.member_ids.push(e.id),this.members.push(e))},removeMember:function(e){var t=this.group.member_ids.indexOf(e.id);t>-1&&(this.group.member_ids.splice(t,1),this.members.splice(t,1))}},(0,l.mapActions)({findMembers:p.actions.getUsers})),created:function(){this.suggestions.length||this.findMembers()}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(44),o=a(r),c=s(12),u=a(c),l=s(2),d=s(45),f=a(d),p=s(5),v=s(3),m=s(82),h=a(m),_=s(112),g=a(_);t.default={name:"GroupDirectory",components:{ActivityBox:h.default,InfiniteScroll:f.default,PersonCard:g.default},computed:(0,i.default)({},(0,l.mapGetters)({groups:v.getters.groups}),{searchable:function(){var e=this.groups;return new o.default(e)},filtered:function(){var e=this.searchable,t=this.groups,s=this.q,a=e.search(s,{fields:["name"],sort_empty:[{field:"name",direction:"asc"}]});return a.items.map(function(e){var s=e.id;return t[s]})}}),data:function(){return{q:"",page:0,resultMessage:"",title:"Campus Groups",subtitle:"You can join any of these groups."}},methods:(0,i.default)({onClose:function(){this.$router.go(-1)},onGroupSelected:function(e){var t=e.is_member===!0?"hub.group":"hub.group-preview";this.$router.push({name:t,params:{group:e.id}})},onSearch:(0,u.default)(function(e){this.q=e,this.page=1,this.getGroups({q:e})},500),onInfinite:function(){var e=this,t=function(t){e.$refs.infinite&&e.$refs.infinite.$emit(t)},s=function(){return t("$InfiniteLoading:complete")},a=function(){return t("$InfiniteLoading:loaded")};this.getGroups({q:this.q,page:this.page+1}).then(p.httpThen).then(function(t){return e.page=t._meta.pagination.current_page,t.data.length?a():s()}),this.$emit("load-more",{done:a,end:s,error:s})}},(0,l.mapActions)({getGroups:v.actions.getGroups}))}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(9),o=a(r),c=s(113),u=a(c),l=s(2),d=s(12),f=a(d),p=s(45),v=a(p),m=s(5),h=s(25),_=s(3),g=s(4);t.default={name:"GroupEdit",components:{LoadingPlaceholder:g.LoadingPlaceholder,ActivityBox:g.ActivityBox,PersonCard:g.PersonCard,InfiniteScroll:v.default},computed:(0,i.default)({title:function(){var e=this.group;return e?e.name:""},groupTypes:function(){return{public:"Public",private:"Private"}},group:function e(){var t=this.$route,s=this.groupMap,a=this.groups,n=(0,o.default)(t.params.group),i=s[n],e=a[i];return e}},(0,l.mapGetters)(["user"]),(0,l.mapGetters)({groups:_.getters.groups,groupMap:_.getters.groupMap,suggestions:_.getters.users})),created:function(){this.findGroup()},data:function(){return{values:{name:"",type:void 0,description:""},errors:{},query:"",page:0,members:[],editedGroup:{name:"",description:"",type:"public",addedMembers:[],removedMembers:[]}}},methods:(0,i.default)({updateGroup:function(){var e=this;this.validate()&&(this.$refs.action.classList.add("disabled"),this.$http.put("groups/"+this.group.id,(0,i.default)({},this.values,{addedMembers:this.editedGroup.addedMembers,removedMembers:this.editedGroup.removedMembers})).then(function(e){return e.json()}).then(function(t){e.$refs.action.classList.remove("disabled"),e.updateGroupAction([t]),e.$router.push({name:"hub.group-preview",params:{group:e.group.id}})}).catch(function(t){return e.$refs.action.classList.remove("disabled"),(0,m.isValidationException)(t)&&t.json().then(function(t){return e.$set(e,"errors",(0,m.normalizeValidationErrors)(t.errors))}),t}))},validate:function(){var e=u.default.make(this.values,{name:"required|min:3|max:60",type:"required",description:"required"});return e.fails()?(this.$set(this,"errors",(0,m.normalizeValidationErrors)(e.getErrors())),!1):(this.$set(this,"errors",{}),!0)},onSuggest:(0,f.default)(function(e){var t=e.value,s=e.start,a=e.end;s(),this.findMembers({q:t}).then(a)},400),onSelect:function(e){this.editedGroup.addedMembers.indexOf(e.id)<0&&this.members.indexOf(e)<0&&(this.editedGroup.addedMembers.push(e.id),
this.members.push(e))},removeMember:function(e){if(this.editedGroup.removedMembers.indexOf(e.id)<0){var t=this.editedGroup.addedMembers.indexOf(e.id);t>-1&&(this.editedGroup.addedMembers.splice(t,1),this.members.splice(t,1))}else if(this.members.indexOf(e)<0){this.editedGroup.removedMembers.push(e.id);var s=this.members.indexOf(e);s>=0&&this.members.splice(s,1)}},search:(0,f.default)(function(){this.page=0,this.onInfinite(!0)}),onInfinite:function(){var e=this,t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],s={loaded:function(){return e.$refs.infinite.$emit("$InfiniteLoading:loaded")},complete:function(){return e.$refs.infinite.$emit("$InfiniteLoading:complete")},reset:function(){return e.$refs.infinite.$emit("$InfiniteLoading:reset")}};t||s.reset(),this.page+=1,this.$http.get("groups/"+this.group.id+"/members",{params:{q:this.query}}).then(function(e){return e.json()}).then(function(t){(0,m.pushOrMerge)(e.members,t.data,e.ids),(0,m.isLastRecord)(t)?s.complete():s.loaded()}).catch(function(){return s.complete()})},setGroup:function(){this.group&&(this.values={name:this.group.name||"",type:this.group.private?"private":"public",description:this.group.description||""})},findGroup:function(){var e=(0,o.default)(this.$route.params.group);e in this.groupMap?this.setGroup():this.getGroup({id:e})},isAdmin:function(e){return this.group.is_admin&&this.user.id===e.id}},(0,l.mapActions)({getGroup:_.actions.getGroups,updateGroupAction:h.actions.setGroups,findMembers:_.actions.getUsers})),watch:{$route:"findGroup",group:"setGroup"}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(9),i=a(n),r=s(114),o=a(r);t.default={name:"Group",methods:{openTitle:function(){this.$router.push({name:"hub.group-preview"})}},mixins:[o.default],computed:{groupId:function(){return(0,i.default)(this.$route.params.group)}},watch:{$route:function(e,t){if(this.message.trim().length){var s="group."+t.params.group+".message";window.localStorage.setItem(s,this.message)}var a="group."+e.params.group+".message";return this.message=window.localStorage.getItem(a)||"",this.findGroup()}},beforeRouteEnter:function(e,t,s){var a="group."+e.params.group+".message";s(a in window.localStorage?function(e){return e.$set(e,"message",window.localStorage.getItem(a))}:function(e){return e.$set(e,"message","")})},beforeRouteLeave:function(e,t,s){if(this.message.trim().length){var a="group."+this.context.id+".message";window.localStorage.setItem(a,this.message)}s()}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(9),o=a(r),c=s(2),u=s(12),l=a(u),d=s(45),f=a(d),p=s(5),v=s(25),m=s(3),h=s(4);t.default={name:"GroupPreview",components:{LoadingPlaceholder:h.LoadingPlaceholder,ActivityBox:h.ActivityBox,ItemCard:h.PersonCard,InfiniteScroll:f.default,ActionMenu:h.ActionMenu,PhotoHolder:h.PhotoHolder},computed:(0,i.default)({title:function(){var e=this.group;return e?e.name:""},subtitle:function(){return"Group Information"},group:function e(){var t=this.$route,s=this.groupMap,a=this.groups,n=(0,o.default)(t.params.group),i=s[n],e=a[i];return e}},(0,c.mapGetters)({groups:m.getters.groups,groupMap:m.getters.groupMap})),created:function(){this.findGroup()},data:function(){return{ids:{},members:[],q:"",page:0,uploadHover:!1}},methods:(0,i.default)({search:(0,l.default)(function(){this.page=0,this.onInfinite()}),onInfinite:function(){var e=this;this.$http.get("groups/"+this.group.id+"/members",{params:{q:this.q,page:this.page+1}}).then(function(e){return e.json()}).then(function(t){(0,p.pushIf)(e.members,t.data,e.ids),e.page=t._meta.pagination.current_page,e.$refs.infinite.$emit("$InfiniteLoading:loaded")}).catch(function(){return e.$refs.infinite.$emit("$InfiniteLoading:loaded")})},findGroup:function(){var e=(0,o.default)(this.$route.params.group);e in this.groupMap||this.getGroup({id:e})}},(0,c.mapActions)({getGroup:m.actions.getGroups,joinGroupAction:v.actions.joinGroup,leaveGroupAction:v.actions.leaveGroup,updatePhoto:v.actions.updateGroupPhoto}),{joinGroup:function(){var e=this;this.$http.post("groups/"+this.group.id+"/join").then(function(){e.joinGroupAction({groupId:e.group.id}),e.$router.push({name:"hub.group"})})},leaveGroup:function(){var e=this;this.$http.delete("groups/"+this.group.id+"/leave").then(function(){e.leaveGroupAction({groupId:e.group.id}),e.$router.push({name:"hub.groups"})})},actionClicks:function(e,t,s){var a=[this.leaveGroup];return a[s]?a[s]():function(){}},openFile:function(){return this.$refs.inputFile.click()},profileUpdated:function(e){this.updatePhoto({groupId:this.group.id,photo:e})}}),watch:{$route:function(){this.findGroup()}}}},function(e,t,s){"use strict";function a(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t.default=e,t}function n(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=s(1),r=n(i),o=s(662),c=n(o),u=s(2),l=s(366),d=a(l);t.default={name:"Hub",components:(0,r.default)({},d),beforeDestroy:function(){c.default.destroy(this.$refs.sidebarLeft)},computed:(0,r.default)({countUserMessages:function(){return this.users.reduce(function(e,t){return e+t.unread_count},0)},countGroupMessages:function(){return this.groups.reduce(function(e,t){return e+t.unread_count},0)}},(0,u.mapGetters)("hub",["groups","users"]),(0,u.mapGetters)(["user"])),data:function(){return{browseUsers:!1}},methods:(0,r.default)({closeSidebar:function(){this.$el.classList.remove("open-sidebar")},openSidebar:function(){this.$el.classList.add("open-sidebar")},toggleSidebar:function(){this.$el.classList.contains("open-sidebar")?this.closeSidebar():this.openSidebar()},redirect:function(){if("hub"===this.$route.name){var e=this.$el.querySelector(".group-list-item"),t=this.$el.querySelector(".group-list-item"),s=this.$el.querySelector("a[href]");e?e.click():t?t.click():s&&s.click()}}},(0,u.mapActions)("hub",["onNewMessageToUser"])),watch:{$route:"redirect"},mounted:function(){var e=this;this.$nextTick(function(){c.default.initialize(e.$refs.sidebarLeft,{suppressScrollX:!0}),e.redirect()})},created:function(){var e=this;this.user.channel&&this.$echo.private(this.user.channel).listen("NewMessage",function(t){return e.onNewMessageToUser({message:t})}),this.$root.$on("sidebar",function(){return e.toggleSidebar()})},beforeRouteEnter:function(e,t,s){document.body.classList.add("has-sidebar"),s()},beforeRouteLeave:function(e,t,s){document.body.classList.remove("has-sidebar"),s()}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(38),o=a(r),c=s(651),u=a(c),l=s(35),d=a(l),f=s(285),p=a(f);t.default={created:function(){var e=this;this.$http.get("school").then(function(e){return e.json()}).then(function(t){e.institute=(0,u.default)(t,(0,o.default)(e.institute)),e.institute.username=t.slug,e.contact.website=t.website,e.contact.fax=t.fax,t.address&&(e.contact=(0,u.default)(t.address,(0,o.default)(e.contact)),e.contact.city=t.address.city.name)})},data:function(){return{loaded:!1,institute:{name:"",username:"",email:"",university:"",institute_type:"",logo:""},contact:{address_line1:"",address_line2:"",landmark:"",city:"",pin_code:"",website:"",fax:""},errors:{},logo_id:void 0}},computed:{},components:{SettingsBox:d.default,PhotoHolder:p.default},methods:{saveInstitute:function(){this.$http.put("school",(0,i.default)({},this.institute)).then(function(){})},saveContact:function(){this.$http.put("school",(0,i.default)({},this.contact)).then(function(){})},logoUpdated:function(e,t){this.institute.push({logo_id:t.body.id})}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(388),i=a(n),r=s(35),o=a(r);t.default={created:function(){},data:function(){return{onAdd:!1,loaded:!1,students:"",teachers:"",employees:"",invited:{students:0,teachers:0,employees:0},errors:{}}},computed:{},methods:{sendStudentsInvite:function(){this.sendInvite("students")},sendTeachersInvite:function(){this.sendInvite("teachers")},sendEmployeesInvite:function(){this.sendInvite("employees")},sendInvite:function(e){var t=this,s=this.getArrayFromString(this[e]);s&&!function(){var a=t.validateEmails(s);a.length&&t.$http.post("people/"+e+"/invite",(0,i.default)({},e,a)).then(function(){t.invited[e]+=a.length,t[e]=s.filter(function(e){return a.indexOf(e)<0}).join(", ")})}()},getArrayFromString:function(e){return e.split(/[;,\s\r\n\t]+/g)},cancel:function(e){this[e]=""},validateEmails:function(e){var t=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return e.filter(function(e){return t.test(e)})}},components:{SettingsBox:o.default}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(38),i=a(n),r=s(1),o=a(r),c=s(2),u=s(58),l=s(35),d=a(l),f=s(61),p=a(f),v=s(36),m=a(v),h=s(3);t.default={created:function(){0===this.semesters.length&&this.getSemesters()},data:function(){return{onAdd:!1,loaded:!1,semester:{name:""},editReference:{id:!1,index:!1},errors:{}}},computed:(0,o.default)({title:function(){return this.editReference.id?"Edit Semester":"Add New Semester"}},(0,c.mapGetters)({semesters:h.getters.semesters})),components:{SettingsBox:d.default,Modal:m.default,SettingsCard:p.default},methods:(0,o.default)({showAddSemester:function(){this.onAdd=!0},onCancel:function(){this.onAdd=!1,this.resetReference()},onSubmit:function(){var e=this.editReference.id?"updateSemester":"addNewSemester";this[e]()},addNewSemester:function(){var e=this;this.$http.post("semesters",this.semester).then(function(){var t=(0,u.clone)(e.semester);e.onAdd=!1,e.addSemester(t),e.resetReference()}).catch(function(){})},updateSemester:function(){var e=this;this.$http.put("semesters/"+this.editReference.id,this.semester).then(function(){e.onAdd=!1;var t=(0,u.clone)(e.semester);e.semesters[e.editReference.index]=t,e.updateSemesterAction(t),e.resetReference()})},semesterClicked:function(e){var t=this.semesters[e];this.editReference={id:t.id,index:e},this.semester=(0,u.clone)(t),this.onAdd=!0},resetReference:function(){var e=this;(0,i.default)(this.semester).forEach(function(t){e.semester[t]=""}),this.editReference={id:!1,index:!1}}},(0,c.mapActions)({getSemesters:h.actions.getSemesters,addSemester:h.actions.addSemester,updateSemesterAction:h.actions.updateSemester}))}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(2),o=s(3),c=s(61),u=a(c),l=s(35),d=a(l);t.default={data:function(){return{title:"Settings",subtitle:"Institute Admin Settings"}},components:{SettingsBox:d.default,SettingCard:u.default},computed:(0,i.default)({settingCards:function(){return[{title:"Departments",text:this.departments.length+" departments added",path:"departments"},{title:"Disciplines",text:"Add discipline here",path:"disciplines"},{title:"Semesters",text:"Click to add semesters",path:"semesters"},{title:"Course Management",text:"Click here to assign",path:"course-management"},{title:"Institute webmail domain",text:"Set intitute website",path:"/webmail-domain"},{title:"Institute Details",text:"Enter institute details",path:"institute-details"},{title:"Send invites",text:"Invite students and teachers",path:"send-invites"}]}},(0,r.mapGetters)({departments:o.getters.departments})),methods:(0,i.default)({settingClicked:function(e){this.$router.push({name:this.settingCards[e].path})}},(0,r.mapActions)({getDepartments:o.actions.getDepartments}))}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(82),i=a(n);t.default={data:function(){return{}},props:{title:{type:String,required:!0},subtitle:{type:String,default:"  "},withHeader:{type:Boolean,default:!0}},components:{ActivityBox:i.default}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{}},props:{title:{type:String,required:!0},text:{type:String},index:{default:0},additional:{default:!1},context:{type:String,default:""}},methods:{settingClicked:function(){}},components:{}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(2),o=s(12),c=a(o),u=s(5),l=s(3),d=s(726),f=a(d);t.default={name:"UserDirectory",created:function(){this.getPeople({})},components:{Directory:f.default},computed:(0,i.default)({},(0,r.mapGetters)({users:l.getters.users})),data:function(){return{q:"",page:0}},methods:(0,i.default)({onClose:function(){window.history.back()},onPersonSelected:function(e){this.$router.push({name:"hub.user",params:{user:e.id}})},onSearch:(0,c.default)(function(e){this.page=1,this.q=e,this.getPeople({q:e})},500),onInfinite:function(e){var t=this,s=e.done;this.getPeople({q:this.q,page:this.page+1}).then(u.httpThen).then(function(e){t.page=e._meta.pagination.current_page,s()}).catch(function(){return s()})}},(0,r.mapActions)({getPeople:l.actions.getUsers}))}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(17),o=a(r),c=s(22),u=a(c),l=s(9),d=a(l),f=s(2),p=s(4),v=s(5),m=s(3),h=s(25),_=s(281),g=a(_);t.default={name:"UserMessages",components:{MessageBox:p.MessageBox,MessageList:g.default,MessageEditor:p.MessageEditor,LoadingPlaceholder:p.LoadingPlaceholder},computed:(0,i.default)({context:function(){var e=this,t=this.$route,s=this.userMap,a=this.users,n=(0,d.default)(t.params.user),i=s[n],r=a[i];return r||window.setTimeout(function(){return e.findUser()},0),r}},(0,f.mapGetters)({users:h.getters.users,userMap:h.getters.userMap})),data:function(){return{message:"",disabled:!1,loading:!1,allLoaded:!1}},methods:(0,i.default)({send:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];this.sendMessage({userId:this.context.id,content:e,errors:s,params:{attachments:t}}),this.message="",this.$refs.input.resize(),this.$refs.input.focus()},loadMore:function(e){var t=this;this.getMessages({userId:this.context.id,params:{}}).then(v.httpThen).then(function(s){var a=s._meta.pagination;if(a.current_page<a.total_pages){var n=(0,o.default)(t.context.messages);if(n&&n.unread===!0)return void t.loadMore(e)}a.current_page<a.total_pages?e.done():e.end()}).catch(function(){return e.error()})},markMessagesSeen:function(){var e=this;window.setTimeout(function(){var t=e.context.messages.filter(function(e){return e.unread});(0,u.default)(t,function(t){return e.readMessage({userId:e.context.id,message:t})})},1e3)},findUser:function(){var e=this;this.$route.params.user in this.userMap||this.findUsers({id:this.$route.params.user}).then(v.httpThen).then(function(t){e.$store.commit(h.types.ADD_USER,t.data)})},openUserPreview:function(){this.$router.push({name:"hub.user-preview",params:{user:this.context.id}})}},(0,f.mapActions)({findUsers:m.actions.getUsers,readMessage:h.actions.sendMessageReadReceipt,sendMessage:h.actions.sendMessageToUser,getMessages:h.actions.getMessagesFromUser})),watch:{$route:function(e,t){if(this.message.trim().length){var s="user."+t.params.user+".message";window.localStorage.setItem(s,this.message)}var a="user."+e.params.user+".message";return this.message=window.localStorage.getItem(a)||"",this.findUser()}},beforeRouteEnter:function(e,t,s){var a="user."+e.params.user+".message";s(a in window.localStorage?function(e){return e.$set(e,"message",window.localStorage.getItem(a))}:function(e){return e.$set(e,"message","")})},beforeRouteLeave:function(e,t,s){if(this.message.trim().length){var a="user."+this.context.id+".message";window.localStorage.setItem(a,this.message)}s()}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(2),o=s(4);t.default={name:"UserPreview",components:{LoadingPlaceholder:o.LoadingPlaceholder,ActivityBox:o.ActivityBox},beforeRouteEnter:function(e,t,s){s(function(e){e.user=null})},computed:(0,i.default)({title:function(){var e=this.user||{};return e.name},subtitle:function(){var e=this.user||{};return e.bio||"User Profile"}},(0,r.mapGetters)("school",["departments"])),data:function(){return{user:null}},created:function(){this.departments.length||this.getDepartments(),this.fetchUser()},methods:(0,i.default)({close:function(){window.history.back()},department:function(e){return(this.departments.find(function(t){return t.id===e})||{}).name},fetchUser:function(){var e=this;this.$http.get("people/"+this.$route.params.user).then(function(e){return e.json()}).then(function(t){return e.$set(e,"user",t)}).catch(function(){})}},(0,r.mapActions)("school",["getDepartments"])),watch:{$route:"fetchUser"}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function n(e){return"BODY"===e.tagName?window:["scroll","auto"].indexOf(window.getComputedStyle(e).overflowY)>-1?e:n(e.parentNode)}Object.defineProperty(t,"__esModule",{value:!0});var i=s(0),r=a(i),o=s(163),c=a(o),u=s(17),l=a(u),d=s(282),f=a(d),p=s(733),v=a(p),m=s(707),h=a(m),_=s(712),g=a(_),C=s(713),b=a(C);t.default={props:{messages:{required:!0}},components:{Message:f.default,ContinuedMessage:h.default,DateSeparator:g.default,NewSeparator:b.default,InfiniteLoading:v.default},computed:{unread:function e(){var t=this.messages,e=t.filter(function(e){return e.unread}),s=(0,l.default)(e);return s?{id:s.id,count:e.length}:{id:void 0,count:0}}},created:function(){var e=this;this.$on("scrollToLast",function(){return e.scrollInView((0,c.default)(e.messages))}),this.$on("scrollToFirst",function(){return e.scrollInView((0,l.default)(e.messages))}),this.$on("reset",function(){return e.$refs.infinite.$emit("$InfiniteLoading:complete")})},mounted:function(){var e=this;this.scrollParent=n(this.$el),this.$nextTick(function(){return e.$emit("scrollToLast")})},data:function(){return{scrollParent:null,loading:!1,skipScroll:!1,hideLoadButton:!1}},methods:{scrollInView:function(e){if(this.skipScroll=!1,e){var t=document.getElementById("message-"+e.id);t&&t.scrollIntoView(!0)}},decorator:function(e,t){var s="message";if("image"===e._type&&(s=e._type),t<1||this.isDateChangingAt(e,t)||e.id===this.unread.id||e.attachments&&e.attachments.data.length>0)return s;var a=this.messages[t-1];return a.sender&&e.sender.id===a.sender.id&&(0,r.default)(e.received_at).diff((0,r.default)(a.received_at),"minutes")<2?"continued-"+s:s},isDateChangingAt:function(e,t){if(0===t)return!0;var s=this.messages[t-1];return!(0,r.default)(e.received_at).isSame((0,r.default)(s.received_at),"day")},loadMore:function(){var e=this;this.loading=!0;var t=0===this.messages.length,s=function(){e.loading=!1,t&&e.$nextTick(function(){return e.$emit("scrollToLast")}),e.$refs.infinite&&e.$refs.infinite.$emit("$InfiniteLoading:loaded"),e.$nextTick(function(){var t=e.scrollParent.getBoundingClientRect().height;t>=e.$el.getBoundingClientRect().height&&e.loadMore()})},a=function(){e.hideLoadButton=!0,t&&e.$nextTick(function(){return e.$emit("scrollToLast")}),e.$refs.infinite&&e.$refs.infinite.$emit("$InfiniteLoading:complete")};this.$emit("load-more",{done:s,end:a,error:a})}},watch:{messages:function(e,t){var s=this;if(!this.skipScroll){this.skipScroll=!0;var a=this.$el.getBoundingClientRect(),n=this.scrollParent.scrollTop,i=a.height-n,r=(0,l.default)(e)===(0,l.default)(t);this.$nextTick(function(){var e=s.$el.getBoundingClientRect().height,t=e-i;s.skipScroll=!1,r?s.scrollInView((0,c.default)(s.messages)):s.scrollParent.scrollTop=t})}}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(22),o=a(r),c=s(59),u=a(c),l=s(17),d=a(l),f=s(9),p=a(f),v=s(2),m=s(0),h=a(m);t.default={created:function(){this.getCourses()},computed:(0,i.default)({groups:function(){return this.courses.map(function(e){return e.session.group})},sortedGroups:function(){var e=this.groups;return(0,u.default)(e,function(e){var t=(0,d.default)(e.messages);return t?-(0,h.default)(t.received_at).valueOf():0})},activeId:function(){var e=this.$route;return"group"in e.params?(0,p.default)(e.params.group):-1}},(0,v.mapGetters)("hub",["courses"])),data:function(){return{joined:{},loaded:!1}},methods:(0,i.default)({onGroupSelected:function(e){var t=e.id;this.$router.push({name:"acad.course",params:{course:t}})},joinGroupChannels:function(){var e=this;(0,o.default)(this.groups,function(t){e.joined[t.id]!==!0&&t.channel&&(e.$echo.join(t.channel).listen("NewMessage",function(s){e.$debug("New Message",s),e.onMessage({groupId:t.id,message:s})}),e.joined[t.id]=!0)})}},(0,v.mapActions)("hub",{sendMessage:"sendMessageToGroup",onMessage:"onNewMessageToGroup"}),(0,v.mapActions)("hub",["getCourses"])),watch:{groups:function(){this.joinGroupChannels()}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(22),o=a(r),c=s(59),u=a(c),l=s(17),d=a(l),f=s(9),p=a(f),v=s(2),m=s(0),h=a(m),_=s(5),g=s(25);t.default={created:function(){this.loaded||(this.getAllGroups(),this.loaded=!0)},computed:(0,i.default)({sortedGroups:function(){var e=this.groups.filter(function(e){return"group"===e.type});return(0,u.default)(e,function(e){var t=(0,d.default)(e.messages);return t?-(0,h.default)(t.received_at).valueOf():0})},activeId:function(){var e=this.$route;return"group"in e.params?(0,p.default)(e.params.group):-1}},(0,v.mapGetters)({groups:g.getters.groups})),data:function(){return{joined:{},loaded:!1}},methods:(0,i.default)({onGroupSelected:function(e){this.$router.push({name:"hub.group",params:{group:e.id}})},joinGroupChannels:function(){var e=this;(0,o.default)(this.groups,function(t){e.joined[t.id]!==!0&&t.channel&&(e.$echo.join(t.channel).listen("NewMessage",function(s){e.$debug("New Message",s),e.onMessage({groupId:t.id,message:s})}),e.joined[t.id]=!0)})},getAllGroups:function(){var e=this;return this.getGroups().then(_.httpThen).then(function(t){var s=t._meta.pagination;s.current_page<s.total_pages&&setTimeout(function(){return e.getAllGroups()},0)}).catch(function(e){return e})}},(0,v.mapActions)({getGroups:g.actions.getGroups,sendMessage:g.actions.sendMessageToGroup,onMessage:g.actions.onNewMessageToGroup})),watch:{groups:function(){this.joinGroupChannels()}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(59),o=a(r),c=s(17),u=a(c),l=s(9),d=a(l),f=s(2),p=s(0),v=a(p),m=s(5),h=s(25);t.default={created:function(){this.users.length||this.getRecentUsers()},computed:(0,i.default)({sortedUsers:function(){var e=this.users;return(0,o.default)(e,function(e){var t=(0,u.default)(e.messages);return t?-(0,v.default)(t.received_at).valueOf():0})},activeId:function(){var e=this.$route;return"hub.user"===e.name?(0,d.default)(e.params.user):-1}},(0,f.mapGetters)({users:h.getters.users})),methods:(0,i.default)({onUserSelected:function(e){this.$router.push({name:"hub.user",params:{user:e.id}})},getRecentUsers:function(){var e=this;this.getUsers().then(m.httpThen).then(function(t){var s=t._meta.pagination;s.current_page<Math.min(2,s.total_pages)&&setTimeout(function(){return e.getRecentUsers()})}).catch(function(e){return e})}},(0,f.mapActions)({getUsers:h.actions.getMessagedUsers}))}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(282),o=a(r);t.default={name:"ContinuedMessage",props:(0,i.default)({},o.default.props),components:{Message:o.default}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{attachment:{type:Object,required:!0},messageId:{type:Number,required:!0}},data:function(){return{uploading:!1,error:null}},computed:{extension:function(){var e=this.attachment;return e.payload.get(e.name).name.split(".").pop()},filename:function(){var e=this.attachment;return e.payload.get(e.name).name},errorMessage:function(){var e=this.attachment,t=this.error;return String(t||e.message)}},methods:{getClassFor:function(e){switch(e){case"webp":case"tiff":case"bmp":case"svg":case"jpeg":case"jpg":case"gif":case"png":return"fa-file-picture-o";case"7z":case"gz":case"tar":case"rar":case"zip":return"fa-file-zip-o";case"rtf":case"odt":case"pages":case"doc":case"docx":return"fa-file-word-o";case"ods":case"numbers":case"xls":case"xlsx":return"fa-file-excel-o";case"odp":case"keynote":case"ppt":case"pptx":return"fa-file-powerpoint";case"eps":case"ps":case"pdf":return"fa-file-pdf-o";case"txt":return"fa-file-text-o";default:return"fa-file-o"}},retry:function(){var e=this;this.uploading||(this.uploading=!0,this.attachment.payload.append("message_id",this.messageId),this.$http.post(this.attachment.dest,this.attachment.payload).then(function(e){return e.json()}).then(function(){e.error=null}).catch(function(t){t&&"json"in t&&t.json().then(function(t){e.error=t.errors.file})}).then(function(){e.uploading=!1}))}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(536),i=a(n);t.default={data:function(){return{}},props:{attachment:{type:Object,required:!0}},methods:{downloadFile:function(){var e=this.attachment.path||"#";window.open(e)},getClassFor:function(e){switch(e){case"webp":case"tiff":case"bmp":case"svg":case"jpeg":case"jpg":case"gif":case"png":return"fa-picture-o";case"7z":case"gz":case"tar":case"rar":case"zip":return"fa-file-zip-o";case"rtf":case"odt":case"pages":case"doc":case"docx":return"fa-file-word-o";case"ods":case"numbers":case"xls":case"csv":case"xlsx":return"fa-file-excel-o";case"odp":case"keynote":case"ppt":case"pptx":return"fa-file-powerpoint-o";case"eps":case"ps":case"pdf":return"fa-file-pdf-o";case"txt":return"fa-file-text-o";default:return"fa-file-o"}}},filters:{forHumans:function(e){return(0,i.default)(e)}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(21),i=a(n),r=s(36),o=a(r);t.default={data:function(){return{show:!1,full:!1}},props:{images:{type:Array,required:!0}},computed:{labelText:function(){var e=this.images;return e.length+" Images"},preview:function(){var e=this.images;return e[0].links.preview||e[0].links.original}},components:{Modal:o.default},methods:{go:function(e){this.full=!1,(0,i.default)(this.$refs.carousel).carousel(e)}},watch:{show:function(e){var t=this;e&&this.$nextTick(function(){t.$refs.carousel.querySelector(".carousel-indicators li").classList.add("active"),t.$refs.carousel.querySelector(".carousel-item").classList.add("active"),t.$refs.carousel.focus(),(0,i.default)(t.$refs.carousel).carousel({interval:!1})})}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(0),i=a(n),r=s(658),o=a(r),c=s(5),u=s(711),l=a(u);t.default={name:"Message",props:{message:{required:!0}},components:{MessageAttachment:l.default},filters:{time:function(e){return(0,i.default)(e).format("LT")}},computed:{content:function(){var e=this.message;return"markdown"===e.type?(0,o.default)(e.content,{gfm:!0,tables:!0,breaks:!0,pedantic:!1,sanitize:!0,smartLists:!0,smartypants:!0}):(0,c.nl2br)((0,c.escapeHtml)(e.content.trim()))}},methods:{onSenderProfile:function(){this.$emit("open-sender",this.message)}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(709),i=a(n),r=s(710),o=a(r),c=s(708),u=a(c);t.default={data:function(){return{}},props:{message:{required:!0}},computed:{files:function(){var e=this,t=this.attachments;return t.filter(function(t){return!e.isImage(t)})},images:function(){var e=this,t=this.attachments;return t.filter(function(t){return e.isImage(t)})},attachments:function(){var e=this.message,t=this.message.errors,s=e.attachments.data;if(void 0===t)return s;for(var a=[],n=0,i=0;n<t.length;n+=1)t[n]?a[n]=t[n]:(a[n]=s[i],i+=1);return a}},methods:{isImage:function(e){return"mime"in e&&["png","gif","jpg","jpeg","webp","tiff"].indexOf(e.extension)>-1},isFile:function(e){return"mime"in e&&["png","gif","jpg","jpeg","webp","tiff"].indexOf(e.extension)<0},isError:function(e){return!("mime"in e)}},components:{FileAttachment:i.default,ImageAttachment:o.default,FailedAttachment:u.default}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(0),i=a(n);t.default={props:{date:{require:!0},unread:{default:!1},count:{type:Number}},filters:{day:function(e){return(0,i.default)(e).format("D MMMM YYYY")}},computed:{text:function(){var e=this.count;return 1===e?"1 New Message":e+" New Messages"}}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{count:{type:Number}},computed:{text:function(){var e=this.count;return 1===e?"1 New Message":e+" New Messages"}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(38),i=a(n),r=s(4);t.default={components:{WindowBox:r.WindowBox},created:function(){this.checkStats()||this.updateStats()},data:function(){return{stats:{student:0,teacher:0,employee:0},requests:{student:{count:0,count_text:"0 requests pending"},teacher:{count:0,count_text:"0 requests pending"},employee:{count:0,count_text:"0 requests pending"}}}},computed:{stages:function(){return[{name:"Digital Profiles",desc:"Create Profiles for Students and Employees.",completed:!0},{name:"Academia",desc:"Courses and discussion hub.",completed:!0},{name:"Attendance",desc:"Student attendance via mobile app."},{name:"Institute Events",desc:"Add and share institute events."},{name:"Registrations and Finances",desc:"Semester Registration and fees."}]}},methods:{updateStats:function(){var e=this;this.$http.get("people/stats").then(function(e){return e.json()}).then(function(t){e.stats=t.accounts,e.request.map(function(e,s){return{count:t.requests[s],count_text:t.requests[s]+" requests pending"}})}).catch(function(e){return e})},checkStats:function(){var e=this,t=(0,i.default)(this.stats).filter(function(t){return 0===e.stats[t]});return 0===(0,i.default)(t).length}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(17),o=a(r),c=s(60),u=a(c),l=s(108),d=a(l),f=s(0),p=a(f),v=s(2),m=s(3),h=s(4);t.default={name:"employeeProfile",data:function(){return{errors:null,remote:null}},computed:(0,i.default)({employee:function(){var e=this.local||{},t=this.remote;return t?t:e},local:function(){var e=this.employees,t=this.$route.params.employee;return(0,o.default)(e.filter(function(e){return e.uid===t}))},loading:function(){return null===this.remote&&null===this.errors},success:function(){return null!==this.remote},department:function(){var e=this.departments,t=this.employee.department_id;return(0,o.default)(e.filter(function(e){return e.id===t}))||{}}},(0,v.mapGetters)({employees:m.getters.employees,departments:m.getters.departments})),components:{WindowBox:h.WindowBox,LoadingPlaceholder:h.LoadingPlaceholder},created:function(){0===this.departments.length&&this.getDepartments(),this.getEmployee()},filters:{currency:function(e){var t=(0,u.default)(e);return(0,d.default)(t)?"₹ 0":"₹ "+t},dateForHumans:function(e){return(0,
p.default)(e).format("D MMMM YYYY")}},methods:(0,i.default)({getEmployee:function(){var e=this,t=this.$route.params.employee;this.remote=this.errors=null,this.$http.get("people/employees/"+t).then(function(e){return e.json()}).then(function(t){e.remote=t}).catch(function(t){t.json().then(function(t){e.errors=t.message}).catch(function(){e.errors="Retry. There was some error apprehending response from server."})})}},(0,v.mapActions)({getDepartments:m.actions.getDepartments})),watch:{$route:"getEmployee"}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(44),o=a(r),c=s(78),u=a(c),l=s(80),d=a(l),f=s(9),p=a(f),v=s(2),m=s(4),h=s(3);t.default={name:"employeeSearchResults",components:{WindowBox:m.WindowBox,PersonCard:m.PersonCard,InfiniteLoader:m.InfiniteLoader},computed:(0,i.default)({countText:function(){var e=this.employees;return 1===e.length?"1 employee":e.length+" employees"},searchText:function(){return"All employees"},filteredSource:function(){var e=this.department,t=this.source;return e.length?t.filter(function(t){return!(e.length&&e.indexOf(t.department_id)<0)}):t},searchable:function(){var e=this.filteredSource;return new o.default(e)},employees:function(){var e=this,t=this.searchable,s=this.query,a=t.search(s,{fields:["name","uid"],sort:[{field:"name",direction:"asc"}],sort_empty:[{field:"name",direction:"asc"}]});return a.items.map(function(t){var s=t.id;return e.source[s]})}},(0,v.mapGetters)({source:h.getters.employees,departments:h.getters.departments})),data:function(){return{reviewingRequests:!1,department:[],query:"",ignoreChanges:!1,page:0}},created:function(){0===this.departments.length&&this.getDepartments(),this.getRouteParams()},methods:(0,i.default)({onLoad:function(e){var t=this,s=e.done;this.getEmployees({page:this.page+1}).then(function(e){s(),"data"in e&&(t.page=(0,u.default)(e,"_meta.pagination.current_page",0))})},go:function(){var e={};this.ignoreChanges||(this.query.trim().length&&(e.q=this.query),this.department.length&&(e.department=this.department),this.$debug("UpdateRoute",e),this.$router.replace({name:"employee.find",query:e}))},getRouteParams:function(){var e=this;this.$debug("LoadRoute",this.$route.query),this.ignoreChanges=!0,this.page=0,this.query=this.$route.query.q||"",this.department=(0,d.default)(this.$route.query.department).map(p.default),this.$nextTick(function(){e.ignoreChanges=!1})}},(0,v.mapActions)({getEmployees:h.actions.getEmployees,getDepartments:h.actions.getDepartments})),watch:{department:"go",query:"go",$route:"getRouteParams"}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(2),o=s(12),c=a(o),u=s(3),l=s(4);t.default={name:"employeeSearch",components:{WindowBox:l.WindowBox},computed:(0,i.default)({},(0,r.mapGetters)({suggestions:u.getters.employees,departments:u.getters.departments})),data:function(){return{query:""}},created:function(){0===this.departments.length&&this.getDepartments()},methods:(0,i.default)({onSearchInput:(0,c.default)(function(e){var t=e.start,s=e.end,a=e.value;t(),this.getemployees({q:a}).then(function(){return s()})}),onSearch:function(){this.$router.push({name:"employee.find",query:{q:this.query}})},onSelect:function(e){this.$debug(e)}},(0,r.mapActions)({getemployees:u.actions.getemployees,getDepartments:u.actions.getDepartments}))}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(17),o=a(r),c=s(60),u=a(c),l=s(108),d=a(l),f=s(0),p=a(f),v=s(2),m=s(3),h=s(4);t.default={name:"StudentProfile",data:function(){return{errors:null,remote:null}},computed:(0,i.default)({student:function(){var e=this.local||{},t=this.remote;return t?t:e},local:function(){var e=this.students,t=this.$route.params.student;return(0,o.default)(e.filter(function(e){return e.uid===t}))},loading:function(){return null===this.remote&&null===this.errors},success:function(){return null!==this.remote},department:function(){var e=this.departments,t=this.student.department_id;return(0,o.default)(e.filter(function(e){return e.id===t}))||{}},discipline:function(){var e=this.disciplines,t=this.student.discipline_id;return(0,o.default)(e.filter(function(e){return e.id===t}))||{}}},(0,v.mapGetters)({students:m.getters.students,departments:m.getters.departments,disciplines:m.getters.disciplines})),components:{WindowBox:h.WindowBox,LoadingPlaceholder:h.LoadingPlaceholder},created:function(){0===this.departments.length&&this.getDepartments(),0===this.disciplines.length&&this.getDisciplines(),this.getStudent()},filters:{currency:function(e){var t=(0,u.default)(e);return(0,d.default)(t)?"₹ 0":"₹ "+t},dateForHumans:function(e){return(0,p.default)(e).format("D MMMM YYYY")}},methods:(0,i.default)({getStudent:function(){var e=this,t=this.$route.params.student;this.remote=this.errors=null,this.$http.get("people/students/"+t).then(function(e){return e.json()}).then(function(t){e.remote=t}).catch(function(t){t.json().then(function(t){e.errors=t.message}).catch(function(){e.errors="Retry. There was some error apprehending response from server."})})}},(0,v.mapActions)({getDepartments:m.actions.getDepartments,getDisciplines:m.actions.getDisciplines})),watch:{$route:"getStudent"}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(44),o=a(r),c=s(78),u=a(c),l=s(80),d=a(l),f=s(9),p=a(f),v=s(2),m=s(4),h=s(3);t.default={name:"StudentSearchResults",components:{WindowBox:m.WindowBox,PersonCard:m.PersonCard,InfiniteLoader:m.InfiniteLoader},computed:(0,i.default)({countText:function(){var e=this.students;return 1===e.length?"1 student":e.length+" students"},searchText:function(){return"All Students"},filteredSource:function(){var e=this.department,t=this.discipline,s=this.source;return e.length||t.length?s.filter(function(s){return!(e.length&&e.indexOf(s.department_id)<0)&&!(t.length&&t.indexOf(s.discipline_id)<0)}):s},searchable:function(){var e=this.filteredSource;return new o.default(e)},students:function(){var e=this,t=this.searchable,s=this.query,a=t.search(s,{fields:["name","uid"],sort:[{field:"name",direction:"asc"}],sort_empty:[{field:"name",direction:"asc"}]});return a.items.map(function(t){var s=t.id;return e.source[s]})}},(0,v.mapGetters)({source:h.getters.students,departments:h.getters.departments,disciplines:h.getters.disciplines})),data:function(){return{reviewingRequests:!1,discipline:[],department:[],query:"",ignoreChanges:!1,page:0}},created:function(){0===this.departments.length&&this.getDepartments(),0===this.disciplines.length&&this.getDisciplines(),this.getRouteParams()},methods:(0,i.default)({onLoad:function(e){var t=this,s=e.done;this.getStudents({page:this.page+1}).then(function(e){s(),"data"in e&&(t.page=(0,u.default)(e,"_meta.pagination.current_page",0))})},go:function(){var e={};this.ignoreChanges||(this.query.trim().length&&(e.q=this.query),this.discipline.length&&(e.discipline=this.discipline),this.department.length&&(e.department=this.department),this.$debug("UpdateRoute",e),this.$router.replace({name:"student.find",query:e}))},getRouteParams:function(){var e=this;this.$debug("LoadRoute",this.$route.query),this.ignoreChanges=!0,this.page=0,this.query=this.$route.query.q||"",this.discipline=(0,d.default)(this.$route.query.discipline).map(p.default),this.department=(0,d.default)(this.$route.query.department).map(p.default),this.$nextTick(function(){e.ignoreChanges=!1})}},(0,v.mapActions)({getStudents:h.actions.getStudents,getDepartments:h.actions.getDepartments,getDisciplines:h.actions.getDisciplines})),watch:{discipline:"go",department:"go",query:"go",$route:"getRouteParams"}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(2),o=s(12),c=a(o),u=s(3),l=s(4);t.default={name:"StudentSearch",components:{WindowBox:l.WindowBox},computed:(0,i.default)({},(0,r.mapGetters)({suggestions:u.getters.students,departments:u.getters.departments,disciplines:u.getters.disciplines})),data:function(){return{query:""}},created:function(){0===this.departments.length&&this.getDepartments(),0===this.disciplines.length&&this.getDisciplines()},methods:(0,i.default)({onSearchInput:(0,c.default)(function(e){var t=e.start,s=e.end,a=e.value;t(),this.getStudents({q:a}).then(function(){return s()})}),onSearch:function(){this.$router.push({name:"student.find",query:{q:this.query}})},onSelect:function(e){this.$debug(e)}},(0,r.mapActions)({getStudents:u.actions.getStudents,getDepartments:u.actions.getDepartments,getDisciplines:u.actions.getDisciplines}))}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(17),o=a(r),c=s(60),u=a(c),l=s(108),d=a(l),f=s(0),p=a(f),v=s(2),m=s(3),h=s(4);t.default={name:"teacherProfile",data:function(){return{errors:null,remote:null}},computed:(0,i.default)({teacher:function(){var e=this.local||{},t=this.remote;return t?t:e},local:function(){var e=this.teachers,t=this.$route.params.teacher;return(0,o.default)(e.filter(function(e){return e.uid===t}))},loading:function(){return null===this.remote&&null===this.errors},success:function(){return null!==this.remote},department:function(){var e=this.departments,t=this.teacher.department_id;return(0,o.default)(e.filter(function(e){return e.id===t}))||{}}},(0,v.mapGetters)({teachers:m.getters.teachers,departments:m.getters.departments})),components:{WindowBox:h.WindowBox,LoadingPlaceholder:h.LoadingPlaceholder},created:function(){0===this.departments.length&&this.getDepartments(),this.getteacher()},filters:{currency:function(e){var t=(0,u.default)(e);return(0,d.default)(t)?"₹ 0":"₹ "+t},dateForHumans:function(e){return(0,p.default)(e).format("D MMMM YYYY")}},methods:(0,i.default)({getteacher:function(){var e=this,t=this.$route.params.teacher;this.remote=this.errors=null,this.$http.get("people/teachers/"+t).then(function(e){return e.json()}).then(function(t){e.remote=t}).catch(function(t){t.json().then(function(t){e.errors=t.message}).catch(function(){e.errors="Retry. There was some error apprehending response from server."})})}},(0,v.mapActions)({getDepartments:m.actions.getDepartments})),watch:{$route:"getteacher"}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(44),o=a(r),c=s(78),u=a(c),l=s(80),d=a(l),f=s(9),p=a(f),v=s(2),m=s(4),h=s(3);t.default={name:"teacherSearchResults",components:{WindowBox:m.WindowBox,PersonCard:m.PersonCard,InfiniteLoader:m.InfiniteLoader},computed:(0,i.default)({countText:function(){var e=this.teachers;return 1===e.length?"1 teacher":e.length+" teachers"},searchText:function(){return"All teachers"},filteredSource:function(){var e=this.department,t=this.source;return e.length?t.filter(function(t){return!(e.length&&e.indexOf(t.department_id)<0)}):t},searchable:function(){var e=this.filteredSource;return new o.default(e)},teachers:function(){var e=this,t=this.searchable,s=this.query,a=t.search(s,{fields:["name","uid"],sort:[{field:"name",direction:"asc"}],sort_empty:[{field:"name",direction:"asc"}]});return a.items.map(function(t){var s=t.id;return e.source[s]})}},(0,v.mapGetters)({source:h.getters.teachers,departments:h.getters.departments})),data:function(){return{reviewingRequests:!1,department:[],query:"",ignoreChanges:!1,page:0}},created:function(){0===this.departments.length&&this.getDepartments(),this.getRouteParams()},methods:(0,i.default)({onLoad:function(e){var t=this,s=e.done;this.getTeachers({page:this.page+1}).then(function(e){s(),"data"in e&&(t.page=(0,u.default)(e,"_meta.pagination.current_page",0))})},go:function(){var e={};this.ignoreChanges||(this.query.trim().length&&(e.q=this.query),this.department.length&&(e.department=this.department),this.$debug("UpdateRoute",e),this.$router.replace({name:"teacher.find",query:e}))},getRouteParams:function(){var e=this;this.$debug("LoadRoute",this.$route.query),this.ignoreChanges=!0,this.page=0,this.query=this.$route.query.q||"",this.department=(0,d.default)(this.$route.query.department).map(p.default),this.$nextTick(function(){e.ignoreChanges=!1})}},(0,v.mapActions)({getTeachers:h.actions.getTeachers,getDepartments:h.actions.getDepartments})),watch:{department:"go",query:"go",$route:"getRouteParams"}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(2),o=s(12),c=a(o),u=s(3),l=s(4);t.default={name:"teacherSearch",components:{WindowBox:l.WindowBox},computed:(0,i.default)({},(0,r.mapGetters)({suggestions:u.getters.teachers,departments:u.getters.departments})),data:function(){return{query:""}},created:function(){0===this.departments.length&&this.getDepartments()},methods:(0,i.default)({onSearchInput:(0,c.default)(function(e){var t=e.start,s=e.end,a=e.value;t(),this.getteachers({q:a}).then(function(){return s()})}),onSearch:function(){this.$router.push({name:"teacher.find",query:{q:this.query}})},onSelect:function(e){this.$debug(e)}},(0,r.mapActions)({getteachers:u.actions.getteachers,getDepartments:u.actions.getDepartments}))}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(21),i=a(n),r=s(105),o=a(r),c=s(22),u=a(c);t.default={props:{actions:{type:Array,default:function(){return[]}}},computed:{id:function(){return"message-box-"+this._uid},isEmpty:function(){var e=this.actions;return 0===e.length},isSpaceAvailable:function(){var e=this.canFit;return e>0},maxIndex:function(){var e=this.actions,t=void 0;return(0,u.default)(e,function(e,s){void 0===t&&e.collapseIfRoom===!1&&(t=s)}),void 0===t?e.length:t},otherActions:function(){var e=this.actions,t=Math.min(this.canFit,this.maxIndex);return t>=e.length?[]:e.slice(t).map(function(e,t){return{action:e,index:t}})},collapsedActions:function(){var e=this.actions,t=Math.min(this.canFit,this.maxIndex);return t<1?[]:e.slice(0,t).map(function(e,t){return{action:e,index:t}})}},data:function(){return{canFit:0}},methods:{checkWidth:function(){var e=(0,i.default)(this.$refs.dropdown),t=(0,i.default)(this.$el).parent(),s=(t.width()-e.outerWidth())/e.outerWidth();this.canFit=parseInt(s,10)},click:function(e,t,s){this.$emit("option-click",e,t,s)}},mounted:function(){var e=this;(0,i.default)(window).on("resize.action-menu",(0,o.default)(function(){e.checkWidth()},500)),this.$nextTick(function(){e.checkWidth()})},beforeDestroy:function(){(0,i.default)(window).off("resize.action-menu")}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(111),o=a(r);t.default={props:(0,i.default)({title:String,subtitle:String},o.default.props),components:{LayoutBox:o.default}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(2),o=s(521),c=a(o),u=s(519),l=a(u),d=s(520),f=a(d),p=s(517),v=a(p),m=s(518),h=a(m);t.default={data:function(){return{current:null,allowed:[]}},computed:(0,i.default)({id:function(){return this._uid},toggler:function(){return this.id+"-toggler"},apps:function e(){var t=this.user,e=[{name:"Hub",icon:l.default,link:"/"},{name:"People",icon:c.default,link:"/people"},{name:"Academics",icon:v.default,link:"/academics",locked:!0},{name:"Finances",icon:h.default,link:"/finances",locked:!0}];return t.permissions&&t.permissions.settings&&e.splice(2,0,{name:"Settings",icon:f.default,link:"/hub/settings"}),e}},(0,r.mapGetters)(["user"]))}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(44),o=a(r),c=s(45),u=a(c),l=s(112),d=a(l),f=s(82),p=a(f),v=s(5);t.default={props:(0,i.default)({items:{required:!0},component:{default:"item-card",type:String}},(0,v.mapObject)(p.default.props,["title","subtitle","actions","enableTopbar"])),components:{ActivityBox:p.default,ItemCard:d.default,InfiniteScroll:u.default},computed:{searchable:function(){var e=this.items;return new o.default(e)},filtered:function(){var e=this.searchable,t=this.items,s=this.q,a=e.search(s,{fields:["name"],sort_empty:[{field:"name",direction:"asc"}]});return a.items.map(function(e){var s=e.id;return t[s]})}},data:function(){return{q:"",resultMessage:""}},methods:{onInfinite:function(){var e=this,t=function(t){e.$refs.infinite&&e.$refs.infinite.$emit(t)},s=function(){return t("$InfiniteLoading:complete")},a=function(){return t("$InfiniteLoading:loaded")};this.$emit("load-more",{done:a,end:s,error:s})}}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={computed:{suggestions:function(){return["Rahul Kadyan","Suwardhan Ahirrao"]},isQueryEmpty:function(){var e=this.query;return 0===e.trim().length},suggestionText:function(){var e=this.query,t=this.isQueryEmpty,s=this.suggestions;if(t)return"";var a=s.filter(function(t){return t.startsWith(e)});return a.length?a[0]:""},hasSuggestionText:function(){var e=this.suggestionText;return e.trim().length>0}},data:function(){return{query:""}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(45),i=a(n);t.default={components:{InfiniteScroll:i.default},events:{"$InfiniteLoading:reset":function(){this.emit("$InfiniteLoading:reset")},"$InfiniteLoading:complete":function(){this.emit("$InfiniteLoading:loaded")},"$InfiniteLoading:loaded":function(){this.emit("$InfiniteLoading:loaded")}},methods:{onInfinite:function(){var e=this,t=function(){return e.emit("$InfiniteLoading:reset")},s=function(){return e.emit("$InfiniteLoading:complete")},a=function(){return e.emit("$InfiniteLoading:loaded")};this.$emit("load",{reset:t,end:s,done:a})},emit:function(e){this.$refs&&this.$refs.infinite&&this.$refs.infinite.$emit(e)}}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=s(5);t.default={props:{disableFooter:{default:!1}},computed:{isFooterDisabled:function(){var e=this.disableFooter;return(0,a.bool)(e)}}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{}},props:{actions:{type:Array}},methods:{click:function(e,t,s){this.$emit("message-option-click",e,t,s)}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(111),o=a(r);t.default={props:(0,i.default)({type:{type:String,default:"user"},title:String,subtitle:String,photo:String},o.default.props),components:{LayoutBox:o.default},computed:{typeClass:function(){var e=this.type;switch(e){case"user":return"photo-square";default:return"photo-round"}}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(292),i=a(n),r=s(283),o=a(r);t.default={data:function(){return{showPopup:!1}},props:{disabled:{type:Boolean,default:!1},value:{type:String,required:!0},dest:{type:String}},components:{FileUploader:o.default},methods:{resize:function(){var e=this,t=window.document.createEvent("Event");t.initEvent("autosize:destroy",!1,!0),this.$refs.input.dispatchEvent(t),this.$nextTick(function(){(0,i.default)(e.$refs.input)})},focus:function(){var e=this;setTimeout(function(){return e.$refs.input.focus()},0)},onInput:function(e){this.$emit("input",e.target.value)},onEnter:function(e){e.shiftKey!==!0&&e.target.value.trim()&&(e.preventDefault(),this.$emit("send",this.value))},onUploaded:function(e,t){if(e.length){var s=e[0].message||"";this.$emit("send",s,e.map(function(e){return e.id}),t)}}},mounted:function(){var e=this;this.$nextTick(function(){(0,i.default)(e.$refs.input)})}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(38),o=a(r),c=s(2),u=s(3),l=s(727),d=a(l),f=s(725),p=a(f);t.default={created:function(){0===(0,o.default)(this.school).length&&this.getSchool()},computed:(0,i.default)({schoolName:function(){return this.school.name},name:function(){var e=this.user;return"name"in e?e.name:""},token:function(){return window.Laravel.csrfToken},userType:function(){return this.user.permissions&&this.user.permissions.settings?"administrator":this.user.type}},(0,c.mapGetters)({user:u.getters.user,school:u.getters.school})),methods:(0,i.default)({},(0,c.mapActions)({getSchool:u.actions.getSchool})),components:{AppsMenu:p.default,GlobalSearch:d.default}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{item:{required:!0}},computed:{}}},function(e,t,s){"use strict";function a(e){return"BODY"===e.tagName?window:["scroll","auto"].indexOf(window.getComputedStyle(e).overflowY)>-1?e:a(e.parentNode)}function n(e){var t=isNaN(e.scrollTop)?e.pageYOffset:e.scrollTop;return t}Object.defineProperty(t,"__esModule",{value:!0});var i={bubbles:"loading-bubbles",circles:"loading-circles",default:"loading-default",spiral:"loading-spiral",waveDots:"loading-wave-dots"};t.default={data:function(){return{scrollParent:null,scrollHandler:null,isLoading:!1,isComplete:!1,isFirstLoad:!0}},computed:{spinnerType:function(){return i[this.spinner]||i.default}},props:{distance:{type:Number,default:0},onInfinite:Function,spinner:String},mounted:function(){var e=this;this.scrollParent=a(this.$el),this.scrollHandler=function(){var t=n(e.scrollParent);!e.isLoading&&t<=e.distance&&(e.isLoading=!0,e.onInfinite&&e.onInfinite.call())},setTimeout(this.scrollHandler,1),this.scrollParent.addEventListener("scroll",this.scrollHandler),this.$on("$InfiniteLoading:loaded",function(){e.isLoading=!1,e.isFirstLoad=!1}),this.$on("$InfiniteLoading:complete",function(){e.isLoading=!1,e.isComplete=!0,e.scrollParent.removeEventListener("scroll",e.scrollHandler)}),this.$on("$InfiniteLoading:reset",function(){e.isLoading=!1,e.isComplete=!1,e.isFirstLoad=!0,e.scrollParent.addEventListener("scroll",e.scrollHandler),setTimeout(e.scrollHandler,1)})},destroyed:function(){this.isComplete||this.scrollParent.removeEventListener("scroll",this.scrollHandler)}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(116),i=a(n),r=s(56),o=a(r),c=s(22),u=a(c),l=s(5);t.default={props:{option:{required:!0},query:{required:!0}},computed:{name:function(){var e=this.option,t=this.query;return this.highlight(e.name,t)}},methods:{highlight:function(e,t){if((0,o.default)(e)){var s=function(){var s=t.trim().replace(/[\s]+/g," ").split(" "),a=(0,l.escapeHtml)(e);return(0,u.default)(s,function(e){a=a.replace(new RegExp("("+e.replace(/[\\^$*+?.()|[\]{}]/g,"\\$&")+")","gi"),"<b>$1</b>")}),{v:a}}();if("object"===("undefined"==typeof s?"undefined":(0,i.default)(s)))return s.v}return""}}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=s(5);t.default={props:{open:{type:Boolean,default:!1},contentClass:String,sidebarClass:String},computed:{stateClass:function(){var e=this.open;return(0,a.bool)(e)===!0?"open":void 0}}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{title:{type:String},subtitle:{type:String}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(7),i=a(n),r=s(56),o=a(r),c=s(47),u=a(c);t.default={props:{type:{default:"radio",validator:function(e){return["radio","checkbox"].indexOf(e)>-1}},stacked:Boolean,options:{type:Object,required:!0}},mixins:[u.default],computed:{helpId:function(){return this.id+"-help-text"},localValue:function(){var e=this.value;return(0,i.default)(e)?e:(0,o.default)(e)&&e.length>0?[e]:[]}},methods:{onInput:function(e,t){if("radio"===this.type)return this.$emit("input",t);var s=this.value;if(!(0,i.default)(s))return this.$emit("input",[t]);var a=s.indexOf(t);return a>-1?s.splice(a,1):s.push(t),this.$emit("input",s)}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(44),i=a(n),r=s(105),o=a(r),c=s(47),u=a(c),l=s(739),d=a(l);t.default={props:{suggestions:{required:!0,type:Array},sortFields:{type:Array,default:function(){return[]}},searchFields:{type:Array,default:function(){return["name"]}},limit:{type:Number,default:15},component:{type:String,default:"search-option"}},data:function(){return{index:null,isOpen:!1,skipClose:!1,selected:[],pendingSearches:0}},components:{SearchOption:d.default},computed:{searchable:function(){var e=this.suggestions;return new i.default(e||[])},options:function(){var e=this,t=this.value,s=this.searchable,a=this.searchFields,n=this.sortFields,i=this.limit,r=this.selected,o=s.search(t,{fields:a,sort:n,limit:i,sort_empty:[{field:"name",direction:"asc"}]});return o.items.map(function(t){var s=t.id;return e.suggestions[s]}).filter(function(e){return r.indexOf(e)<0})},noResults:function(){var e=this.options,t=this.value;return t.trim().length>0&&0===e.length},searchHelpText:function(){var e=this.search,t=this.searchHelp,s=this.placeholderText;return e?s:t||"Start typing..."},suggesting:function(){return this.pendingSearches>0}},methods:{onEnter:function(){return this.index in this.options?void this.select(this.options[this.index]):void this.$emit("search",this.input)},onClick:function(e){this.select(e)},onEsc:function(){this.$refs.input&&this.$refs.input.blur(),this.close()},onUp:function(){null===this.index?this.index=this.options.length-1:this.index>0&&(this.index=this.index-1),this.scrollIntoView()},onDown:function(){null===this.index?this.index=0:this.index<this.options.length-1&&(this.index=this.index+1),this.scrollIntoView()},onInput:function(e){var t=this;this.$emit("input",e.target.value),this.$emit("suggest",{value:e.target.value,start:function(){t.pendingSearches+=1},end:function(){t.pendingSearches>0&&(t.pendingSearches-=1)}})},onBlur:(0,o.default)(function(){this.close()},300),scrollIntoView:function(){try{this.$refs.options.children[this.index].scrollIntoViewIfNeeded()}catch(e){this.$debug(e)}},clickAway:function(e){this.$refs.body.contains(e.target)||this.close()},close:function(){return this.skipClose?void(this.skipClose=!1):(this.index=null,void(this.isOpen=!1))},open:function(){var e=this;this.isOpen||(this.isOpen=!0,this.$nextTick(function(){e.$refs.input&&e.$refs.input.focus()}))},select:function(e){e&&this.selected.indexOf(e)<0&&(this.selected.push(e),this.$emit("select",e))},unselect:function(e){var t=this.selected.indexOf(e);t>-1&&this.selected.splice(t,1)}},mixins:[u.default],created:function(){var e=this;this.$on("unselect",function(t){return e.unselect(t)})},destroyed:function(){document.body.removeEventListener("click",this.clickAway,!1)}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(116),i=a(n),r=s(56),o=a(r),c=s(22),u=a(c),l=s(5);t.default={props:{option:{required:!0},query:{required:!0}},computed:{name:function(){var e=this.option,t=this.query;return this.highlight(e.name,t)}},methods:{highlight:function(e,t){if((0,o.default)(e)){var s=function(){var s=t.trim().replace(/[\s]+/g," ").split(" "),a=(0,l.escapeHtml)(e);return(0,u.default)(s,function(e){a=a.replace(new RegExp("("+e.replace(/[\\^$*+?.()|[\]{}]/g,"\\$&")+")","gi"),"<b>$1</b>")}),{v:a}}();if("object"===("undefined"==typeof s?"undefined":(0,i.default)(s)))return s.v}return""}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(47),i=a(n);t.default={props:{type:{type:String,default:"text"},options:{type:Array,required:!0},optionKey:{type:String,default:"id"},optionDisplayKey:{type:String,default:"name"}},mixins:[i.default],computed:{helpId:function(){return this.id+"-help-text"}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(47),i=a(n);t.default={props:{type:{type:String,default:"text"},placeholder:{type:String,default:""}},mixins:[i.default],computed:{helpId:function(){return this.id+"-help-text"}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(47),i=a(n);t.default={props:{type:{type:String,default:"noresize"}},mixins:[i.default],computed:{helpId:function(){return this.id+"-help-text"}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(12),o=a(r),c=s(2),u=s(3),l=s(4);t.default={name:"CourseCreate",data:function(){return{qi:"",qc:"",course:{name:"",code:"",department_id:"",discipline_id:"",year_id:"",semester_id:""},instructors:[],prerequisites:[],errors:{}}},components:{ActivityBox:l.ActivityBox,PersonCard:l.PersonCard},computed:(0,i.default)({years:function(){return[{id:1,name:"First Year"},{id:2,name:"Second Year"},{id:3,name:"Third Year"},{id:4,name:"Fourth Year"}]},departments:function(){return this.allDepartments.filter(function(e){return e.academic})}},(0,c.mapGetters)({courses:u.getters.courses,teachers:u.getters.teachers,disciplines:u.getters.disciplines,allDepartments:u.getters.departments}),(0,c.mapGetters)("school",["semesters"])),methods:(0,i.default)({findInstructor:(0,o.default)(function(e){var t=e.value,s=e.start,a=e.end;s(),this.findTeachers({q:t}).then(a)},400),addInstructor:function(e){this.instructors.length&&this.removeInstructor(this.instructors[0]),this.instructors.splice(0,1,e)},removeInstructor:function(e){var t=this.instructors.indexOf(e);t>-1&&(this.instructors.splice(t,1),this.$refs.instructor.$emit("unselect",e))},findPreRequisiteCourse:(0,o.default)(function(e){var t=e.value,s=e.start,a=e.end;s(),this.findCourses({q:t}).then(a)},400),addPreRequisiteCourse:function(e){this.prerequisites.indexOf(e)>-1||this.prerequisites.push(e)},removePreRequisiteCourse:function(e){var t=this.prerequisites.indexOf(e);t>-1&&(this.prerequisites.splice(t,1),this.$refs.course.$emit("unselect",e))},createCourse:function(){var e=this,t=(0,i.default)({},this.course,{instructors:this.instructors.map(function(e){return e.id}),prerequisites:this.prerequisites.map(function(e){return e.id})});this.$refs.action.classList.add("disabled"),this.$http.post("courses",t).then(function(e){return e.json()}).then(function(t){e.course={name:"",code:"",department_id:null,discipline_id:null,year:null,semester:null},e.instructors=[],e.prerequisites=[],e.errors={},e.$store.commit("school/ADD_COURSE",t),e.$router.push({name:"acad"})}).catch(function(e){return e.json()}).then(function(t){return e.$set(e,"errors",t.errors)}).catch(function(e){return e}).then(function(){return e.$refs.action&&e.$refs.action.classList.remove("disabled")})}},(0,c.mapActions)({findTeachers:u.actions.getTeachers,findCourses:u.actions.getCourses})),created:function(){this.courses.length||this.findCourses(),this.teachers.length||this.findTeachers()}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(83),i=a(n),r=s(1),o=a(r),c=s(12),u=a(c),l=s(9),d=a(l),f=s(2),p=s(3),v=s(5),m=s(4);t.default={name:"CourseEdit",data:function(){return{qi:"",qc:"",course:{},instructors:[],prerequisites:[],errors:{}}},components:{ActivityBox:m.ActivityBox,PersonCard:m.PersonCard,LoadingPlaceholder:m.LoadingPlaceholder
},computed:(0,o.default)({hasCourse:function(){return"id"in this.course},years:function(){return[{id:1,name:"First Year"},{id:2,name:"Second Year"},{id:3,name:"Third Year"},{id:4,name:"Fourth Year"}]},departments:function(){return this.allDepartments.filter(function(e){return e.academic})}},(0,f.mapGetters)({courses:p.getters.courses,teachers:p.getters.teachers,disciplines:p.getters.disciplines,allDepartments:p.getters.departments}),(0,f.mapGetters)("school",["semesters"])),methods:(0,o.default)({findInstructor:(0,u.default)(function(e){var t=e.value,s=e.start,a=e.end;s(),this.findTeachers({q:t}).then(a)},400),addInstructor:function(e){this.instructors.indexOf(e)>-1||this.instructors.splice(0,1,e)},removeInstructor:function(e){var t=this.instructors.indexOf(e);t>-1&&(this.instructors.splice(t,1),this.$refs.instructor.$emit("unselect",e))},findPreRequisiteCourse:(0,u.default)(function(e){var t=e.value,s=e.start,a=e.end;s(),this.findCourses({q:t}).then(a)},400),addPreRequisiteCourse:function(e){this.prerequisites.indexOf(e)>-1||this.prerequisites.push(e)},removePreRequisiteCourse:function(e){var t=this.prerequisites.indexOf(e);t>-1&&(this.prerequisites.splice(t,1),this.$refs.course.$emit("unselect",e))},updateCourse:function(){var e=this,t=(0,o.default)({},(0,v.mapObject)(this.course,["name","code","department_id","discipline_id","year_id","semester_id"]),{instructors:this.instructors.map(function(e){return e.id}),prerequisites:this.prerequisites.map(function(e){return e.id})});this.$refs.action.classList.add("disabled"),this.$http.put("courses/"+this.course.id,t).then(function(e){return e.json()}).then(function(t){e.errors={},e.$store.commit("school/ADD_COURSE",e.course=t),setTimeout(function(){return e.$router.push({name:"acad"})},0)}).catch(function(e){return e.json()}).then(function(t){return e.$set(e,"errors",t.errors)}).catch(function(e){return e}).then(function(){return e.$refs.action&&e.$refs.action.classList.remove("disabled")})},fetchCourse:function(e){var t=this;this.course={},this.instructors=[],this.prerequisites=[],this.errors={},this.$http.get("courses/"+e).then(function(e){return e.json()}).then(function(e){var s,a;t.course=e,(s=t.instructors).push.apply(s,(0,i.default)(e.instructors.data)),(a=t.prerequisites).push.apply(a,(0,i.default)(e.prerequisites.data.map(function(e){return e.course})))}).catch(function(e){return e})}},(0,f.mapActions)({findTeachers:p.actions.getTeachers,findCourses:p.actions.getCourses})),watch:{$route:function(e){var t=e.params;this.fetchCourse((0,d.default)(t.course))}},created:function(){this.courses.length||this.findCourses(),this.teachers.length||this.findTeachers(),this.fetchCourse((0,d.default)(this.$route.params.course))}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(2),o=s(12),c=a(o),u=s(4);t.default={name:"CourseEnrollment",data:function(){return{show:!1,course:null,query:"",selected:[],message:null}},computed:(0,i.default)({},(0,r.mapGetters)("school",["students","departments","disciplines"])),methods:(0,i.default)({department:function(e){return(this.departments.find(function(t){return e.department_id===t.id})||{}).name},discipline:function(e){return(this.disciplines.find(function(t){return e.discipline_id===t.id})||{}).name},enroll:function(){var e=this,t=this.selected.map(function(e){return e.id});t.length&&(this.$refs.enroll.classList.add("disabled"),this.$http.post("courses/"+this.course.id+"/enroll",{students:t,session_id:this.course.session.id}).then(function(){e.$refs.enroll.classList.remove("disabled"),e.selected=[],e.message={success:!0,message:"All students enrolled."},e.$emit("enrolled")}).catch(function(){e.$refs.enroll.classList.remove("disabled"),e.message={success:!1,message:"Failed to enroll these students."}}))},onSelect:function(e){this.selected.indexOf(e)<0&&this.selected.push(e),this.message=null},onRemove:function(e){var t=this.selected.indexOf(e);t>-1&&(this.selected.splice(t,1),this.$refs.students.$emit("remove",e))},onSuggest:(0,c.default)(function(e){var t=e.value,s=e.start,a=e.end;s(),this.getStudents({q:t}).then(function(){return a()})},600)},(0,r.mapActions)("school",["getStudents","getDepartments","getDisciplines"])),components:{Modal:u.Modal,PersonCard:u.PersonCard},created:function(){var e=this;this.$on("open",function(t){e.course=t,e.query="",e.selected=[],e.show=!0,e.message=null}),this.departments.length||this.getDepartments(),this.disciplines.length||this.getDisciplines(),this.students.length||this.getStudents()}}},function(e,t,s){"use strict";(function(e){function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(115),o=a(r),c=s(80),u=a(c),l=s(36),d=a(l);t.default={props:{dest:{type:String,required:!0},name:{type:String,default:"file"}},components:{Modal:d.default},data:function(){return{uploading:!1,progress:0,partials:[],count:0,errors:[],results:[],handler:null,index:0,titles:[],message:""}},created:function(){var t=this;this.$on("upload",function(){var s=e(t.$refs.files);s.replaceWith(s.val("").clone(!0)),s.click()})},methods:{onFileSelected:function(e){var t=this,s=e.target.files;if(s.length){this.uploading=!1,this.count=s.length,this.progress=0,this.partials=[],this.errors=[],this.results=[],this.errors[s.length-1]=void 0,this.$refs.info.$emit("show");var a=null,n=new o.default(function(e){a=e});n.then(function(){return t.getFileMeta((0,u.default)(s))}).then(function(e){return o.default.all(e.map(function(e){return t.upload(e)}))}).then(function(){t.uploading=!1,t.$emit("uploaded",t.results,t.errors)}).catch(function(e){return e}),a()}},getFileMeta:function(e){var t=this,s=e.map(function(e,s){var a=new FormData,n=e.name;return a.append(t.name,e),t.message="",{index:s,payload:a,filename:n}});return this.titles=s.map(function(e){var t=e.filename;return t}),new o.default(function(e,a){t.handler=function(n){n?(s[0].message=t.message,t.titles.forEach(function(e,t){s[t].filename!==e&&s[t].payload.append("title",e)}),e(s)):a({message:"User cancelled upload."})}})},upload:function(e){var t=this,s=e.payload,a=e.index,n=e.filename,r=e.message;return this.uploading=!0,this.$http.post(this.dest,s,{progress:function(e){e.lengthComputable&&t.updateProgress(e.loaded/e.total*100,a)}}).then(function(e){return e.json()}).then(function(e){t.results[a]=(0,i.default)({message:r,originalFilename:n},e)}).catch(function(e){e.json().then(function(e){t.errors[a]={message:e.errors[t.name],payload:s,dest:t.dest,name:t.name}}).catch(function(){t.errors[a]={message:"Failed to upload: "+n,payload:s,dest:t.dest,name:t.name}})})},onCancel:function(){var e=this;this.$refs.info.$emit("hide"),this.handler&&setTimeout(function(){return e.handler(!1)},0)},onUpload:function(){var e=this;this.handler&&(this.$refs.info.$emit("hide"),setTimeout(function(){return e.handler(!0)},0))},updateProgress:function(e,t){this.partials[t]=e,this.progress=this.partials.reduce(function(e,t){return e+(t||0)},0)/this.count},getClassFor:function(e){var t=this.$refs.files.files[e];switch(this.getExtension(t)){case"webp":case"tiff":case"bmp":case"svg":case"jpeg":case"jpg":case"gif":case"png":return"fa-file-picture-o";case"7z":case"gz":case"tar":case"rar":case"zip":return"fa-file-zip-o";case"rtf":case"odt":case"pages":case"doc":case"docx":return"fa-file-word-o";case"ods":case"numbers":case"xls":case"csv":case"xlsx":return"fa-file-excel-o";case"odp":case"keynote":case"ppt":case"pptx":return"fa-file-powerpoint-o";case"eps":case"ps":case"pdf":return"fa-file-pdf-o";case"txt":return"fa-file-text-o";default:return"fa-file-o"}},getExtension:function(e){return e?e.name.split(".").pop().toLowerCase():null}}}}).call(t,s(21))},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{name:String,show:{default:void 0,type:Boolean},dissmissOnBackdrop:{default:!0,type:Boolean},wrapper:{type:String,default:"wrapper-default"},dismissable:{type:Boolean,default:!0}},computed:{showing:function(){var e=this.show,t=this.state;return void 0===e?t:e}},data:function(){return{state:!1}},created:function(){var e=this;this.$on("show",function(){e.state=!0}),this.$on("hide",function(){e.state=!1})},methods:{onWrapper:function(e){this.dismissable&&this.dissmissOnBackdrop&&this.$refs.wrapper===e.target&&this.$emit("hide")}},watch:{showing:function(e){e?document.body.classList.add("modal-open"):document.body.classList.remove("modal-open")}}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{name:{type:String,default:"photo"},dest:{type:String,required:!0},title:{type:String,default:"Crop Photo"},subtitle:{type:String,default:""},crop:{type:Boolean,default:!0},options:{type:Object,default:function(){return{fixed_size:!0,mode:"square"}}}},data:function(){return{cropping:!1,uploading:!1,progress:0,error:null,context:null}},computed:{empty:function(){var e=this.cropping,t=this.uploading;return!(e||t)}},methods:{cropAndUpload:function(){!this.context},upload:function(e){var t=this,s=new FormData;s.append(this.name,e),this.uploading=!0,this.progress=0,this.error=null,this.$http.post(this.dest,s,{progress:function(e){e.lengthComputable&&(t.progress=e.loaded/e.total*100)}}).then(function(e){t.uploading=!1;var s=e.headers.get("Location");t.$emit("uploaded",s,e)}).catch(function(e){t.uploading=!1,"json"in e?e.json().then(function(e){t.error=e.message||"Upload failed."}).catch(function(e){t.error=e}):t.error=e})},onFileSelected:function(e){var t=e.target.files;if(t&&t[0])return this.upload(t[0])}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(705);Object.defineProperty(t,"GroupList",{enumerable:!0,get:function(){return a(n).default}});var i=s(706);Object.defineProperty(t,"UserList",{enumerable:!0,get:function(){return a(i).default}});var r=s(704);Object.defineProperty(t,"CourseList",{enumerable:!0,get:function(){return a(r).default}});var o=s(279);Object.defineProperty(t,"GroupMessages",{enumerable:!0,get:function(){return a(o).default}});var c=s(280);Object.defineProperty(t,"UserMessages",{enumerable:!0,get:function(){return a(c).default}})},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var s=t.store,a=t.routes;s.registerModule("hub",Y.default),a.push.apply(a,[{name:"hub",path:"/hub",component:i.default,children:[{name:"hub.group-create",path:"groups/create",component:o.default},{name:"hub.group-preview",path:"groups/:group/preview",component:m.default},{name:"hub.group-edit",path:"groups/:group/edit",component:u.default},{name:"hub.group",path:"groups/:group",component:p.default},{name:"hub.groups",path:"groups",component:d.default},{name:"hub.user-preview",path:"people/:user/preview",component:A.default},{name:"hub.users",path:"people",component:P.default},{name:"hub.user",path:"people/:user",component:k.default},{name:"acad",path:"courses",component:C.default},{name:"acad.create",path:"courses/create",component:y.default},{name:"acad.edit",path:"courses/:course/edit",component:w.default},{name:"acad.course",path:"courses/:course",component:_.default},{name:"acad.course-preview",path:"courses/:course/preview",component:M.default},{name:"settings",path:"settings",component:I.default},{name:"departments",path:"settings/departments",component:q.default},{name:"disciplines",path:"settings/disciplines",component:F.default},{name:"semesters",path:"settings/semesters",component:G.default},{name:"course-management",path:"settings/courses",component:U.default},{name:"institute-details",path:"settings/institute",component:B.default},{name:"send-invites",path:"settings/invites",component:z.default}]},{path:"/",redirect:"/hub"}])};var n=s(696),i=a(n),r=s(692),o=a(r),c=s(694),u=a(c),l=s(693),d=a(l),f=s(279),p=a(f),v=s(695),m=a(v),h=s(688),_=a(h),g=s(685),C=a(g),b=s(684),y=a(b),x=s(686),w=a(x),S=s(689),M=a(S),R=s(701),P=a(R),E=s(280),k=a(E),$=s(702),A=a($),D=s(700),I=a(D),j=s(690),q=a(j),T=s(691),F=a(T),O=s(699),G=a(O),N=s(687),U=a(N),L=s(697),B=a(L),H=s(698),z=a(H),V=s(370),Y=a(V)},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(37),i=a(n),r=s(5);t.default={state:{courses:[]},getters:{courses:function(e){return e.courses}},mutations:{ADD_COURSE:function(e,t){(0,r.pushOrMerge)(e.courses,t)}},actions:{getCourses:function(e){var t=e.dispatch;return i.default.http.get("me/courses").then(function(e){return e.json()}).then(function(e){return t("setCourses",e.data)}).catch(function(e){return e})},findCourse:function(e,t){var s=e.dispatch;return i.default.http.get("me/courses/"+t).then(function(e){return e.json()}).then(function(e){return s("setCourses",[e])}).catch(function(e){return e})},setCourses:function(e,t){var s=e.commit,a=e.dispatch,n=e.state;return s("ADD_COURSE",t),a("setGroups",n.courses.map(function(e){return e.session.group})),t}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(115),i=a(n),r=s(83),o=a(r),c=s(1),u=a(c),l=s(7),d=a(l),f=s(59),p=a(f),v=s(164),m=a(v),h=s(37),_=a(h),g=s(5),C=Date.now();t.default={state:{groups:[]},getters:{groups:function(e){return e.groups},groupMap:function(e){var t={};return e.groups.forEach(function(e,s){t[e.id]=s}),t}},mutations:{ADD_GROUP:function(e,t){var s=((0,d.default)(t)?t:[t]).map(function(e){return(0,u.default)({},e,{messages:[],messages_next_page:1,messages_loaded:!1,has_unread:!1,unread_count:0})});(0,g.pushOrMerge)(e.groups,s,["messages","messages_loaded","messages_next_page","unread_count","has_unread"])},ADD_MESSAGE_TO_GROUP:function(e,t){var s=t.groupId,a=t.messages,n=e.groups.findIndex(function(e){return e.id===s});if(n!==-1){var i=e.groups[n];i.messages=(0,p.default)((0,m.default)([].concat((0,o.default)(i.messages),(0,o.default)(a)),"id"),"id"),i.unread_count=i.messages.filter(function(e){return e.unread}).length,i.has_unread=i.unread_count>0}},READ_GROUP_MESSAGE:function(e,t){var s=t.groupId,a=t.message,n=e.groups.findIndex(function(e){return e.id===s});if(n!==-1){var i=e.groups[n],r=i.messages.indexOf(a),o=i.messages[r];o.unread&&(e.groups[n].unread_count-=1),e.groups[n].messages[r].read_at=(new Date).toISOString(),e.groups[n].messages[r].unread=!1,e.groups[n].has_unread=i.unread_count>0}},STATUS_GROUP_MESSAGE:function(e,t){var s=t.groupId,a=t.message,n=t.payload,i=t.success,r=e.groups.findIndex(function(e){return e.id===s});if(r!==-1){var o=e.groups[r].messages.indexOf(a);i?e.groups[r].messages.splice(o,1,n):(e.groups[r].messages[o].failed=!0,e.groups[r].messages[o].sending=!1)}},REMOVE_GROUP:function(e,t){var s=t.groupId,a=e.groups.findIndex(function(e){return e.id===s});e.groups.splice(a,1)},SET_VALUE_ON_GROUP:function(e,t){var s=t.groupId,a=t.key,n=t.value,i=e.groups.findIndex(function(e){return e.id===s});e.groups[i][a]=n}},actions:{findGroupById:function(e,t){var s=e.dispatch;_.default.http.get("me/groups/"+t).then(function(e){return e.json()}).then(function(e){return s("setGroups",e)}).catch(function(e){return e})},setGroups:function(e,t){var s=e.commit;return s("ADD_GROUP",t),s("school/ADD_GROUP",t,{root:!0}),t},getGroups:function(e){var t=(e.commit,e.dispatch),s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _.default.http.get("me/groups",{params:s}).then(function(e){return e.json()}).then(function(e){return t("setGroups",e.data),e}).catch(function(e){return e})},getMessagesFromGroup:function(e,t){var s=e.commit,a=e.state,n=t.groupId,r=t.params,o=void 0===r?{}:r,c=a.groups.findIndex(function(e){return e.id===n}),l=a.groups[c],d={params:(0,u.default)({},o,{timestamp:C,page:l.messages_next_page})};return l.messages_loaded?new i.default(function(e,t){return t({message:"All messages loaded."})}):(s("SET_VALUE_ON_GROUP",{groupId:n,key:"messages_next_page",value:l.messages_next_page+1}),_.default.http.get("groups/"+n+"/messages",d).then(function(e){return e.json()}).then(function(e){return s("ADD_MESSAGE_TO_GROUP",{groupId:n,messages:e.data}),e._meta.pagination.current_page===e._meta.pagination.total_pages&&s("SET_VALUE_ON_GROUP",{groupId:n,key:"messages_loaded",value:!0}),e}).catch(function(e){return e}))},onNewMessageToGroup:function(e,t){var s=e.commit,a=t.groupId,n=t.message,i=void 0===a?n.receiver.id:a;s("ADD_MESSAGE_TO_GROUP",{groupId:i,messages:[n]})},sendMessageToGroup:function(e,t){var s=e.commit,a=e.rootState,n=t.groupId,i=t.content,r=t.params,o=void 0===r?{}:r,c=t.errors,l=void 0===c?[]:c,d={id:Date.now(),content:i,sending:!0,sender:a.user};return s("ADD_MESSAGE_TO_GROUP",{groupId:n,messages:[d]}),_.default.http.post("groups/"+n+"/messages",(0,u.default)({content:i},o)).then(function(e){return e.json()}).then(function(e){return s("STATUS_GROUP_MESSAGE",{groupId:n,message:d,payload:(0,u.default)({},e,{errors:l}),success:!0}),e}).catch(function(e){return s("STATUS_GROUP_MESSAGE",{groupId:n,message:d,success:!1}),e})},sendMessageReadReceiptForGroup:function(e,t){var s=e.commit,a=e.rootState,n=t.groupId,i=t.message;return i.sender_id===a.user.id?void s("READ_GROUP_MESSAGE",{groupId:n,message:i}):void _.default.http.put("groups/"+n+"/messages/"+i.id+"/read").then(function(){return s("READ_GROUP_MESSAGE",{groupId:n,message:i})}).catch(function(e){return e})},joinGroup:function(e,t){var s=e.commit,a=t.groupId;s("school/SET_USER_IS_MEMBER",{groupId:a,isMember:!0},{root:!0})},leaveGroup:function(e,t){var s=e.commit,a=t.groupId;s("REMOVE_GROUP",{groupId:a}),s("school/SET_VALUE_ON_GROUP",{groupId:a,key:"is_member",value:!1},{root:!0})},updateGroupPhoto:function(e,t){var s=e.commit,a=t.groupId,n=t.photo;s("SET_VALUE_ON_GROUP",{groupId:a,key:"photo",value:n}),s("school/SET_VALUE_ON_GROUP",{groupId:a,key:"photo",value:n},{root:!0})}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(369),o=a(r),c=s(371),u=a(c),l=s(368),d=a(l);t.default={namespaced:!0,state:(0,i.default)({},o.default.state,u.default.state,d.default.state),getters:(0,i.default)({},o.default.getters,u.default.getters,d.default.getters),mutations:(0,i.default)({},o.default.mutations,u.default.mutations,d.default.mutations),actions:(0,i.default)({},o.default.actions,u.default.actions,d.default.actions)}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(83),i=a(n),r=s(1),o=a(r),c=s(7),u=a(c),l=s(164),d=a(l),f=s(59),p=a(f),v=s(37),m=a(v),h=s(5),_=Date.now();t.default={state:{users:[],userMap:{}},getters:{users:function(e){return e.users},userMap:function(e){return e.userMap}},mutations:{ADD_USER:function(e,t){var s=((0,u.default)(t)?t:[t]).map(function(e){return(0,o.default)({messages:[],messages_next_page:1,has_unread:!1,unread_count:0},e)});(0,h.pushIf)(e.users,s,e.userMap)},SET_MESSAGE_PAGE_TO_USER:function(e,t){var s=t.userId,a=t.paginator;if(s in e.userMap){var n=e.userMap[s];e.users[n].messages_next_page=a.current_page+1}},ADD_MESSAGE:function(e,t){var s,a=t.userId,n=t.messages;if(a in e.userMap){var r=e.userMap[a],o=e.users[r];(s=o.messages).push.apply(s,(0,i.default)(n)),o.messages=(0,p.default)((0,d.default)(o.messages,"id"),"id"),o.unread_count=o.messages.filter(function(e){return e.unread}).length,o.has_unread=o.unread_count>0}},READ_MESSAGE:function(e,t){var s=t.userId,a=t.message;if(s in e.userMap){var n=e.userMap[s],i=e.users[n],r=a.messages.indexOf(a),o=i.messages[r];o.read_at=(new Date).toISOString(),o.unread&&(i.unread_count-=1),o.unread=!1,i.has_unread=i.unread_count>0}},STATUS_MESSAGE:function(e,t){var s=t.userId,a=t.message,n=t.payload,i=t.success,r=e.userMap[s],o=e.users[r].messages.indexOf(a);i?e.users[r].messages.splice(o,1,n):(e.users[r].messages[o].failed=!0,e.users[r].messages[o].sending=!1)}},actions:{getMessagedUsers:function(e){var t=e.commit,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return m.default.http.get("me/messages/users",{params:s}).then(function(e){return e.json()}).then(function(e){return t("ADD_USER",e.data),e}).catch(function(e){return e})},getMessagesFromUser:function(e,t){var s=e.commit,a=e.state,n=t.userId,i=t.params,r=a.userMap[n],c=a.users[r],u={params:(0,o.default)({timestamp:_,page:c.messages_next_page},i)};return m.default.http.get("me/messages/users/"+n,u).then(function(e){return e.json()}).then(function(e){return s("ADD_MESSAGE",{userId:n,messages:e.data}),s("SET_MESSAGE_PAGE_TO_USER",{userId:n,paginator:e._meta.pagination}),e}).catch(function(e){return e})},onNewMessageToUser:function(e,t){var s=e.commit,a=t.userId,n=t.message,i=void 0===a?n.sender.id:a;s("ADD_MESSAGE",{userId:i,messages:[n]})},sendMessageToUser:function(e,t){var s=e.commit,a=e.rootState,n=t.userId,i=t.content,r=t.params,c=void 0===r?{}:r,u=t.errors,l=void 0===u?[]:u,d={id:Date.now(),content:i,sending:!0,sender:a.user};return s("ADD_MESSAGE",{userId:n,messages:[d]}),m.default.http.post("me/messages/users/"+n,(0,o.default)({content:i},c)).then(function(e){return e.json()}).then(function(e){s("STATUS_MESSAGE",{userId:n,message:d,payload:(0,o.default)({},e,{errors:l}),success:!0})}).catch(function(e){return s("STATUS_MESSAGE",{userId:n,message:d,success:!1}),e})},sendMessageReadReceipt:function(e,t){var s=e.commit,a=e.rootState,n=t.userId,i=t.message;return i.sender_id===a.user.user.id?void s("READ_MESSAGE",{userId:n,message:i}):void m.default.http.put("me/messages/"+i.id+"/read").then(function(){return s("READ_MESSAGE",{userId:n,message:i})}).catch(function(e){return e})}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var s=t.routes;e.component("search-option-person",M.default),s.push.apply(s,[{name:"people",path:"/people",component:i.default},{name:"student",path:"/people/students",component:o.default},{name:"student.find",path:"/people/students/find",component:u.default},{name:"student.profile",path:"/people/students/:student",component:d.default},{name:"teacher",path:"/people/teachers",component:p.default},{name:"teacher.find",path:"/people/teachers/find",component:m.default},{name:"teacher.profile",path:"/people/teachers/:teacher",component:_.default},{name:"employee",path:"/people/employees",component:C.default},{name:"employee.find",path:"/people/employees/find",component:y.default},{name:"employee.profile",path:"/people/employees/:employee",component:w.default}])};var n=s(714),i=a(n),r=s(720),o=a(r),c=s(719),u=a(c),l=s(718),d=a(l),f=s(723),p=a(f),v=s(722),m=a(v),h=s(721),_=a(h),g=s(717),C=a(g),b=s(716),y=a(b),x=s(715),w=a(x),S=s(734),M=a(S)},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(374);Object.defineProperty(t,"tooltip",{enumerable:!0,get:function(){return a(n).default}});t.foo=0},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(21),i=a(n);t.default={bind:function(e,t){(0,i.default)(e).tooltip({placement:t.arg}),e.setAttribute("data-original-title",t.value||"")},update:function(e,t){e.getAttribute("data-original-title")!==t.value&&e.setAttribute("data-original-title",t.value||"")},unbind:function(e){e&&((0,i.default)(e).tooltip("hide"),(0,i.default)(e).tooltip("dispose"))}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(737);Object.defineProperty(t,"InputRadio",{enumerable:!0,get:function(){return a(n).default}});var i=s(741);Object.defineProperty(t,"InputText",{enumerable:!0,get:function(){return a(i).default}});var r=s(742);Object.defineProperty(t,"InputTextarea",{enumerable:!0,get:function(){return a(r).default}});var o=s(738);Object.defineProperty(t,"InputSearch",{enumerable:!0,get:function(){return a(o).default}});var c=s(740);Object.defineProperty(t,"InputSelect",{enumerable:!0,get:function(){return a(c).default}})},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(367),i=a(n),r=s(372),o=a(r);t.default={hub:i.default,people:o.default}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(37),i=a(n),r=s(286),o=a(r);i.default.use(o.default),t.default={mode:"history",routes:[],scrollBehavior:function(e,t,s){if(s)return s;var a={};return e.hash&&(a.selector=e.hash),e.matched.some(function(e){return e.meta.scrollToTop})&&(a.x=0,a.y=0),a}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function n(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};n.installed!==!0&&(n.installed=!0,t.debug!==!0?Object.defineProperty(e.prototype,"$debug",{get:function(){return function(){}}}):!function(){var t=(0,r.default)("app");r.default.enable("app"),Object.defineProperty(e.prototype,"$debug",{get:function(){return t}})}())}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n;var i=s(14),r=a(i)},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!n.installed){n.installed=!0;var s=new r.default(t);s.registerVueRequestInterceptor(),Object.defineProperty(e,"echo",{get:function(){return s}}),Object.defineProperty(e.prototype,"$echo",{get:function(){return s}})}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n;var i=s(539),r=a(i)},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={state:{active:"hub"}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(1),i=a(n),r=s(647),o=a(r),c=s(7),u=a(c),l=s(644),d=a(l),f=s(17),p=a(f),v=s(37),m=a(v),h=s(5),_=function(e,t){"user"in(0,p.default)(e.data)&&t("ADD_USER",(0,o.default)(e.data,function(e){return(0,i.default)({person:e},e.user)}))};t.default={namespaced:!0,state:{school:{},employees:[],employeeMap:{},groups:[],groupMap:{},students:[],studentMap:{},teachers:[],teacherMap:{},users:[],userMap:{},departments:[],disciplines:[],semesters:[],courses:[]},getters:{employees:function(e){return e.employees},groups:function(e){return e.groups},groupMap:function(e){return e.groupMap},students:function(e){return e.students},teachers:function(e){return e.teachers},users:function(e){return e.users},departments:function(e){return e.departments},disciplines:function(e){return e.disciplines},departmentsByType:function(e){var t=e.departments;if(t.length){var s=(0,d.default)(t,function(e){return e.academic});return{academic:s.true,nonAcademic:s.false}}return{}},departmentCount:function(e){return e.departments.length},semesters:function(e){return e.semesters},courses:function(e){return e.courses},school:function(e){return e.school}},mutations:{ADD_USER:function(e,t){(0,h.pushIf)(e.users,t,e.userMap,[])},ADD_STUDENT:function(e,t){(0,h.pushIf)(e.students,t,e.studentMap,[])},ADD_TEACHER:function(e,t){(0,h.pushIf)(e.teachers,t,e.teacherMap,[])},ADD_EMPLOYEE:function(e,t){(0,h.pushIf)(e.employees,t,e.employeeMap,[])},ADD_GROUP:function(e,t){(0,h.pushIf)(e.groups,t,e.groupMap,[])},ADD_COURSE:function(e,t){var s=(0,u.default)(t)?t:[t];(0,h.pushOrMerge)(e.courses,s)},SET_USER_IS_MEMBER:function(e,t){var s=t.groupId,a=t.isMember,n=e.groupMap[s];e.groups[n].is_member=a},SET_VALUE_ON_GROUP:function(e,t){var s=t.groupId,a=t.key,n=t.value,i=e.groupMap[s];e.groups[i][a]=n},SET_DEPARTMENTS:function(e,t){e.departments=t},SET_DISCIPLINES:function(e,t){e.disciplines=t},SET_SEMESTERS:function(e,t){e.semesters=t},ADD_DEPARTMENT:function(e,t){(0,h.pushIf)(e.departments,t,{},[])},UPDATE_DEPARTMENT:function(e,t){var s=t.departmentId,a=t.department,n=e.departments.findIndex(function(e){return e.id===s});e.departments[n]=a},ADD_DISCIPLINE:function(e,t){(0,h.pushIf)(e.disciplines,t,{},[])},UPDATE_DISCIPLINE:function(e,t){var s=t.disciplineId,a=t.discipline,n=e.disciplines.findIndex(function(e){return e.id===s});e.disciplines[n]=a},ADD_SEMESTER:function(e,t){(0,h.pushIf)(e.semesters,t,{},[])},UPDATE_SEMESTER:function(e,t){var s=t.semesterId,a=t.semester,n=e.semesters.findIndex(function(e){return e.id===s});e.semesters[n]=a},SET_SCHOOL:function(e,t){var s=t.school;e.school=s}},actions:{getStudents:function(e){var t=e.commit,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return m.default.http.get("people/students",{params:s}).then(function(e){return e.json()}).then(function(e){return t("ADD_STUDENT",e.data),_(e,t),e}).catch(function(e){return e})},getEmployees:function(e){var t=e.commit,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return m.default.http.get("people/employees",{params:s}).then(function(e){return e.json()}).then(function(e){return t("ADD_EMPLOYEE",e.data),_(e,t),e}).catch(function(e){return e})},getTeachers:function(e){var t=e.commit,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return m.default.http.get("people/teachers",{params:s}).then(function(e){return e.json()}).then(function(e){return t("ADD_TEACHER",e.data),_(e,t),e}).catch(function(e){return e})},getGroups:function(e){var t=e.commit,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return m.default.http.get("groups",{params:s}).then(function(e){return e.json()}).then(function(e){return t("ADD_GROUP",e.data),e}).catch(function(e){return e})},getUsers:function(e){var t=e.commit,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return m.default.http.get("people",{params:s}).then(function(e){return e.json()}).then(function(e){var s=(0,d.default)(e.data,"person_type");return t("ADD_USER",e.data),"student"in s&&t("ADD_STUDENT",s.student),"employee"in s&&t("ADD_EMPLOYEE",s.employee),"teacher"in s&&t("ADD_TEACHER",s.teacher),e}).catch(function(e){return e})},getDepartments:function(e){var t=e.commit,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return m.default.http.get("departments",{params:s}).then(function(e){return e.json()}).then(function(e){t("SET_DEPARTMENTS",e.data)}).catch(function(e){return e})},getDisciplines:function(e){var t=e.commit,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return m.default.http.get("disciplines",{params:s}).then(function(e){return e.json()}).then(function(e){t("SET_DISCIPLINES",e.data)}).catch(function(e){return e})},getCourses:function(e){var t=e.commit,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return m.default.http.get("courses",{params:s}).then(function(e){return e.json()}).then(function(e){return t("ADD_COURSE",e.data),e}).catch(function(e){return e})},getSemesters:function(e){var t=e.commit,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return m.default.http.get("semesters",{params:s}).then(function(e){return e.json()}).then(function(e){t("SET_SEMESTERS",e.data)}).catch(function(e){return e})},findStudent:function(e,t){var s=e.state,a=s.studentMap[t];return a>-1?s.students[a]:null},addDepartment:function(e,t){var s=e.commit;s("ADD_DEPARTMENT",(0,i.default)({},t))},updateDepartment:function(e,t){var s=e.commit;s("UPDATE_DEPARTMENT",{departmentId:t.id,department:t})},addDiscipline:function(e,t){var s=e.commit;s("ADD_DISCIPLINE",(0,i.default)({},t))},updateDiscipline:function(e,t){var s=e.commit;s("UPDATE_DISCIPLINE",{disciplineId:t.id,discipline:t})},addSemester:function(e,t){var s=e.commit;s("ADD_SEMESTER",(0,i.default)({},t))},updateSemester:function(e,t){var s=e.commit;s("UPDATE_SEMESTER",{semesterId:t.id,semester:t})},getSchool:function(e){var t=e.commit;return m.default.http.get("school").then(function(e){return e.json()}).then(function(e){t("SET_SCHOOL",{school:e})})}}}},function(e,t,s){"use strict";function a(e){return e&&e.__esModule?e:{
default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=s(37),i=a(n),r=s(2),o=a(r),c=s(819),u=(a(c),s(380)),l=a(u),d=s(381),f=a(d);s(443),i.default.use(o.default);var p=window.Laravel||{};t.default=new o.default.Store({state:{user:p.user||{}},mutations:{SET_USER:function(e,t){e.user=t}},getters:{user:function(e){return e.user}},actions:{getUser:function(e){var t=e.commit;return i.default.http.get("me").then(function(e){return e.json()}).then(function(e){return t("SET_USER",e),e}).catch(function(e){return e})}},modules:{app:l.default,school:f.default},plugins:[],strict:!1})},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,s){t=e.exports=s(434)(),t.push([e.i,".message-action-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}",""])},,,,,,,,,,,,function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,s){e.exports=s.p+"/img/apps.svg?b849e147aa2ba0abae5703008b62a688"},function(e,t,s){e.exports=s.p+"/img/academics.svg?4873d8ac12d1fa47715e3f7b33c2a921"},function(e,t,s){e.exports=s.p+"/img/finance.svg?d6b467c77b3f6396bf96116ea85dc255"},function(e,t,s){e.exports=s.p+"/img/hub.svg?affb074e6817f67babfc68691b40ae0b"},function(e,t,s){e.exports=s.p+"/img/menu-settings.svg?e11b9d4b64a6fd63a5f7ccc7c65507e3"},function(e,t,s){e.exports=s.p+"/img/people.svg?8bb4078302ea8a5926aeba92bca60a92"},function(e,t,s){e.exports=s.p+"/img/attach-file.svg?1be38296da1f610fe17988160d9e9188"},function(e,t,s){e.exports=s.p+"/img/back.svg?c97501fedf96d4ab801472abf77f3427"},function(e,t,s){e.exports=s.p+"/img/campus-directory-icon.svg?abc763292bcc1bcc7eb1ffbfe07929d0"},function(e,t,s){e.exports=s.p+"/img/group-icon.svg?499df1ef0fda555fc7cc0bbc51b9f0b3"},function(e,t,s){e.exports=s.p+"/img/logo.svg?8c4b3c349f4d410671a3167cf76cdb31"},function(e,t,s){e.exports=s.p+"/img/manage-courses.svg?a4d7d22006f12caefefa42996c898417"},function(e,t,s){e.exports=s.p+"/img/admin-settings.svg?5c29c27d659c5c720803b9426ed57f7b"},function(e,t,s){e.exports=s.p+"/img/back.svg?c97501fedf96d4ab801472abf77f3427"},function(e,t,s){e.exports=s.p+"/img/course-admin.svg?5216e320e3eb175a9891bb04ebd627d5"},function(e,t,s){e.exports=s.p+"/img/departments.svg?9f88c691a6976acee6b415b07f4679c0"},function(e,t,s){e.exports=s.p+"/img/discipline.svg?213b7294a2117b8bb915b3a6805815df"},function(e,t,s){e.exports=s.p+"/img/icon-settings.svg?119e036556491a780cd29c711a172a9c"},function(e,t,s){e.exports=s.p+"/img/invites.svg?627b10743198288a3ab24322ae72712f"},function(e,t,s){e.exports=s.p+"/img/semesters.svg?2a2f37fb9aff5d40168859690ee2ca0e"},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,s){function a(e){return s(n(e))}function n(e){var t=i[e];if(!(t+1))throw new Error("Cannot find module '"+e+"'.");return t}var i={"./af":165,"./af.js":165,"./ar":171,"./ar-dz":166,"./ar-dz.js":166,"./ar-ly":167,"./ar-ly.js":167,"./ar-ma":168,"./ar-ma.js":168,"./ar-sa":169,"./ar-sa.js":169,"./ar-tn":170,"./ar-tn.js":170,"./ar.js":171,"./az":172,"./az.js":172,"./be":173,"./be.js":173,"./bg":174,"./bg.js":174,"./bn":175,"./bn.js":175,"./bo":176,"./bo.js":176,"./br":177,"./br.js":177,"./bs":178,"./bs.js":178,"./ca":179,"./ca.js":179,"./cs":180,"./cs.js":180,"./cv":181,"./cv.js":181,"./cy":182,"./cy.js":182,"./da":183,"./da.js":183,"./de":185,"./de-at":184,"./de-at.js":184,"./de.js":185,"./dv":186,"./dv.js":186,"./el":187,"./el.js":187,"./en-au":188,"./en-au.js":188,"./en-ca":189,"./en-ca.js":189,"./en-gb":190,"./en-gb.js":190,"./en-ie":191,"./en-ie.js":191,"./en-nz":192,"./en-nz.js":192,"./eo":193,"./eo.js":193,"./es":195,"./es-do":194,"./es-do.js":194,"./es.js":195,"./et":196,"./et.js":196,"./eu":197,"./eu.js":197,"./fa":198,"./fa.js":198,"./fi":199,"./fi.js":199,"./fo":200,"./fo.js":200,"./fr":203,"./fr-ca":201,"./fr-ca.js":201,"./fr-ch":202,"./fr-ch.js":202,"./fr.js":203,"./fy":204,"./fy.js":204,"./gd":205,"./gd.js":205,"./gl":206,"./gl.js":206,"./he":207,"./he.js":207,"./hi":208,"./hi.js":208,"./hr":209,"./hr.js":209,"./hu":210,"./hu.js":210,"./hy-am":211,"./hy-am.js":211,"./id":212,"./id.js":212,"./is":213,"./is.js":213,"./it":214,"./it.js":214,"./ja":215,"./ja.js":215,"./jv":216,"./jv.js":216,"./ka":217,"./ka.js":217,"./kk":218,"./kk.js":218,"./km":219,"./km.js":219,"./ko":220,"./ko.js":220,"./ky":221,"./ky.js":221,"./lb":222,"./lb.js":222,"./lo":223,"./lo.js":223,"./lt":224,"./lt.js":224,"./lv":225,"./lv.js":225,"./me":226,"./me.js":226,"./mi":227,"./mi.js":227,"./mk":228,"./mk.js":228,"./ml":229,"./ml.js":229,"./mr":230,"./mr.js":230,"./ms":232,"./ms-my":231,"./ms-my.js":231,"./ms.js":232,"./my":233,"./my.js":233,"./nb":234,"./nb.js":234,"./ne":235,"./ne.js":235,"./nl":237,"./nl-be":236,"./nl-be.js":236,"./nl.js":237,"./nn":238,"./nn.js":238,"./pa-in":239,"./pa-in.js":239,"./pl":240,"./pl.js":240,"./pt":242,"./pt-br":241,"./pt-br.js":241,"./pt.js":242,"./ro":243,"./ro.js":243,"./ru":244,"./ru.js":244,"./se":245,"./se.js":245,"./si":246,"./si.js":246,"./sk":247,"./sk.js":247,"./sl":248,"./sl.js":248,"./sq":249,"./sq.js":249,"./sr":251,"./sr-cyrl":250,"./sr-cyrl.js":250,"./sr.js":251,"./ss":252,"./ss.js":252,"./sv":253,"./sv.js":253,"./sw":254,"./sw.js":254,"./ta":255,"./ta.js":255,"./te":256,"./te.js":256,"./tet":257,"./tet.js":257,"./th":258,"./th.js":258,"./tl-ph":259,"./tl-ph.js":259,"./tlh":260,"./tlh.js":260,"./tr":261,"./tr.js":261,"./tzl":262,"./tzl.js":262,"./tzm":264,"./tzm-latn":263,"./tzm-latn.js":263,"./tzm.js":264,"./uk":265,"./uk.js":265,"./uz":266,"./uz.js":266,"./vi":267,"./vi.js":267,"./x-pseudo":268,"./x-pseudo.js":268,"./yo":269,"./yo.js":269,"./zh-cn":270,"./zh-cn.js":270,"./zh-hk":271,"./zh-hk.js":271,"./zh-tw":272,"./zh-tw.js":272};a.keys=function(){return Object.keys(i)},a.resolve=n,e.exports=a,a.id=659},,,,,,,,,,,,,,,,,,,,,,,,function(e,t,s){var a,n;s(469),a=s(293);var i=s(767);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(512),a=s(360);var i=s(812);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(492),a=s(294);var i=s(792);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-77ac0d4a",e.exports=a},function(e,t,s){var a,n;a=s(361);var i=s(772);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(489),a=s(295);var i=s(789);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-7452bafd",e.exports=a},function(e,t,s){var a,n;a=s(296);var i=s(806);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(483),a=s(297);var i=s(783);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(460),a=s(298);var i=s(758);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-296ca71c",e.exports=a},function(e,t,s){var a,n;s(465),a=s(299);var i=s(764);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-3224b714",e.exports=a},function(e,t,s){var a,n;s(482),a=s(300);var i=s(781);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(511),a=s(301);var i=s(811);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(497),a=s(302);var i=s(796);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(454),a=s(304);var i=s(752);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(491),a=s(305);var i=s(791);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-77698df4",e.exports=a},function(e,t,s){var a,n;s(468),a=s(306);var i=s(766);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-35087b2c",e.exports=a},function(e,t,s){var a,n;s(455),a=s(307);var i=s(753);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-1e701288",e.exports=a},function(e,t,s){var a,n;s(461),a=s(308);var i=s(759);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-29edeee8",e.exports=a},function(e,t,s){var a,n;s(513),a=s(309);var i=s(813);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-df42763c",e.exports=a},function(e,t,s){var a,n;s(447),a=s(312);var i=s(745);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(450),a=s(314);var i=s(748);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;a=s(362);var i=s(782);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(505),a=s(316);var i=s(805);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-a6830b20",e.exports=a},function(e,t,s){var a,n;s(485),a=s(317);var i=s(785);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-6bbf96f6",e.exports=a},function(e,t,s){var a,n;s(502),a=s(318);var i=s(801);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-9815ec40",e.exports=a},function(e,t,s){var a,n;s(515),a=s(319);var i=s(815);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(452),a=s(320);var i=s(750);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-1a8bc51c",e.exports=a},function(e,t,s){var a,n;s(476),a=s(321);var i=s(775);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-5972fa1e",e.exports=a},function(e,t,s){var a,n;s(451),a=s(322);var i=s(749);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-1a61f79c",e.exports=a},function(e,t,s){var a,n;s(470),a=s(324);var i=s(768);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-38a60070",e.exports=a},function(e,t,s){var a,n;s(462),a=s(325);var i=s(761);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(503),a=s(326);var i=s(802);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(449),a=s(327);var i=s(747);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(507),a=s(328);var i=s(808);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-b826031a",e.exports=a},function(e,t,s){var a,n;s(496),a=s(329);var i=s(795);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-7a5dc240",e.exports=a},function(e,t,s){var a,n;s(473),s(472),a=s(330);var i=s(770);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-45e3a74e",e.exports=a},function(e,t,s){var a,n;s(478),a=s(331);var i=s(777);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-5a9a7aba",e.exports=a},function(e,t,s){var a,n;s(463),a=s(332);var i=s(762);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-310b3e87",e.exports=a},function(e,t,s){var a,n;s(467),s(466),a=s(333);var i=s(765);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-33020627",e.exports=a},function(e,t,s){var a,n;s(501),a=s(334);var i=s(800);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-96bcfc3e",e.exports=a},function(e,t,s){var a,n;s(514),a=s(335);var i=s(814);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-e9db74a4",e.exports=a},function(e,t,s){var a,n;s(494),s(493),a=s(336);var i=s(793);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-77f9fe20",e.exports=a},function(e,t,s){var a,n;s(484),a=s(337);var i=s(784);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(504),a=s(339);var i=s(803);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-9f301d3e",e.exports=a},function(e,t,s){var a,n;s(487),a=s(340);var i=s(787);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(445),a=s(341);var i=s(743);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-089946ca",e.exports=a},function(e,t,s){var a,n;a=s(342);var i=s(760);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(459),a=s(344);var i=s(757);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(818),a=s(345);var i=s(773);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(456),a=s(346);var i=s(754);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(446),a=s(347);var i=s(744);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-0c08b794",e.exports=a},function(e,t,s){var a,n;s(481),a=s(350);var i=s(780);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-632a2a4a",e.exports=a},function(e,t,s){var a,n;s(448),a=s(351);var i=s(746);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-16285c3c",e.exports=a},function(e,t,s){var a,n;s(474),a=s(352);var i=s(771);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(453),a=s(353);var i=s(751);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-1e0aa0e0",e.exports=a},function(e,t,s){var a,n;s(471),a=s(354);var i=s(769);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(477),a=s(355);var i=s(776);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,n._scopeId="data-v-59caa6c6",e.exports=a},function(e,t,s){var a,n;s(498),a=s(356);var i=s(797);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(457),a=s(357);var i=s(755);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(506),a=s(358);var i=s(807);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,s){var a,n;s(479),a=s(359);var i=s(778);n=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(n=a=a.default),"function"==typeof n&&(n=n.options),n.render=i.render,n.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"global-search fl"},[s("div",{staticClass:"search-box fl-auto form-control g-search"},[s("div",{staticClass:"search-shadow"},[e.isQueryEmpty?s("span",{staticClass:"placeholder"},[s("i",{staticClass:"fa fa-fw fa-search"}),e._v(" Search for anything...\n      ")]):e._e(),e._v(" "),e.hasSuggestionText?s("span",{staticClass:"suggest"},[e._v("\n        "+e._s(e.suggestionText)+"\n      ")]):e._e()]),e._v(" "),s("input",{directives:[{name:"model",rawName:"v-model",value:e.query,expression:"query"}],staticClass:"search-field",attrs:{type:"search"},domProps:{value:e._s(e.query)},on:{input:function(t){t.target.composing||(e.query=t.target.value)}}})])])},staticRenderFns:[]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"message-input-wrapper"},[a("textarea",{ref:"input",staticClass:"message-input",attrs:{name:"message",placeholder:"Start discussing...",autofocus:"",disabled:e.disabled,rows:"1",autocomplete:"off",autocorrect:"off"},domProps:{value:e.value},on:{input:e.onInput,keydown:function(t){e._k(t.keyCode,"enter",13)||e.onEnter(t)},focus:function(t){e.$emit("focused")}}}),e._v(" "),a("div",{staticClass:"message-editor-actions"},[a("a",{directives:[{name:"tooltip",rawName:"v-tooltip:left",value:"Add files",expression:"'Add files'",arg:"left"}],staticClass:"action",attrs:{role:"button"},on:{click:function(t){t.preventDefault(),e.$refs.uploader.$emit("upload")}}},[a("img",{attrs:{src:s(522),alt:"+"}})]),e._v(" "),a("file-uploader",e._b({ref:"uploader",on:{uploaded:e.onUploaded}},"file-uploader",{dest:e.dest}))],1)])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("directory",e._b({attrs:{title:"Campus Directory",subtitle:"You can message any member of the institute."},on:{"load-more":e.onInfinite,close:e.onClose,search:e.onSearch,item:e.onPersonSelected}},"directory",{items:e.users}))},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fl search-option"},[s("img",{staticClass:"photo rounded",attrs:{src:e.option.photo}}),e._v(" "),s("div",{staticClass:"fl-auto ml-1 name",domProps:{innerHTML:e._s(e.name)}})])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("window-box",{attrs:{title:"Dashboard",subtitle:"Brief overview"}},[s("div",{staticClass:"container py-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-8"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-4 mb-1"},[s("div",{staticClass:"card card-block ow-student",attrs:{role:"button"},on:{click:function(t){e.$router.push({name:"student"})}}},[s("div",{staticClass:"title"},[e._v("Students")]),e._v(" "),s("div",{staticClass:"count"},[e._v(e._s(e.stats.student))]),e._v(" "),s("div",{staticClass:"subtitle"},[s("span",{class:{"text-muted":0==e.requests.student.count,"text-danger":e.requests.student.count>0}},[e._v("\n                  "+e._s(e.requests.student.count_text)+"\n                ")])])])]),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-4 mb-1"},[s("div",{staticClass:"card card-block ow-teacher",attrs:{role:"button"},on:{click:function(t){e.$router.push({name:"teacher"})}}},[s("div",{staticClass:"title"},[e._v("Teachers")]),e._v(" "),s("div",{staticClass:"count"},[e._v(e._s(e.stats.teacher))]),e._v(" "),s("div",{staticClass:"subtitle"},[s("span",{class:{"text-muted":0==e.requests.teacher.count,"text-danger":e.requests.teacher.count>0}},[e._v("\n                  "+e._s(e.requests.teacher.count_text)+"\n                ")])])])]),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-4 mb-1"},[s("div",{staticClass:"card card-block ow-employee",attrs:{role:"button"},on:{click:function(t){e.$router.push({name:"employee"})}}},[s("div",{staticClass:"title"},[e._v("Employees")]),e._v(" "),s("div",{staticClass:"count"},[e._v(e._s(e.stats.employee))]),e._v(" "),s("div",{staticClass:"subtitle"},[s("span",{class:{"text-muted":0==e.requests.employee.count,"text-danger":e.requests.employee.count>0}},[e._v("\n                  "+e._s(e.requests.employee.count_text)+"\n                ")])])])])]),e._v(" "),s("div",{staticClass:"card"},[s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-6"},[s("div",{staticClass:"embed-responsive embed-responsive-16by9"},[s("iframe",{staticClass:"embed-responsive-item",attrs:{src:"https://www.youtube.com/embed/MA7pMfnP-r4?rel=0&autohide=1&color=white&modestbranding=1&showinfo=0&theme=light",frameborder:"0",allowfullscreen:""}})],1)]),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6"},[s("small",{staticClass:"text-primary"},[e._v("On-boarding")]),e._v(" "),s("br"),e._v(" "),s("h4",[e._v("Setup Zero in 5 Minutes")]),e._v(" "),s("p",[s("small",[e._v("Welcome to Scalex Zero. Watch this video to setup your institute on Zero.")])]),e._v(" "),s("p",[s("small",[e._v("Add Disciplines (e.g. B.Tech,M.Tech) "),s("br"),e._v("\n                        Add Departments (e.g. Mechanical Engineering) "),s("br"),e._v("\n                        Approve profiles of students, teachers and employees.")])])])])]),e._v(" "),s("div",{staticClass:"card-block py-0"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-6"},[s("div",{staticClass:"embed-responsive embed-responsive-16by9"},[s("iframe",{staticClass:"embed-responsive-item",attrs:{src:"https://www.youtube.com/embed/Q0FRHSRaLE8?rel=0&autohide=1&color=white&modestbranding=1&showinfo=0&theme=light",frameborder:"0",allowfullscreen:""}})],1)]),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6"},[s("small",{staticClass:"text-primary"},[e._v("What's coming next")]),e._v(" "),s("br"),e._v(" "),s("h4",[e._v("Introducing the Hub!")]),e._v(" "),s("p",[s("small",[e._v("Once you create digital profiles, students and teachers can access the Zero Hub.")])]),e._v(" "),s("p",[s("small",[e._v("Hub is a collaborative platform for students and teachers. It is integrated\n                          with administrative activities like academics, attendance, events etc.")])])])])])])]),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-4"},[s("div",{staticClass:"card"},[s("h4",{staticClass:"card-header py-1 px-2 bg-white"},[e._v("Zero: Release Schedule")]),e._v(" "),s("div",{staticClass:"card-block"},e._l(e.stages,function(t){return s("div",{staticClass:"fl mb-1"},[s("div",{staticClass:"px-1"},[t.completed?s("i",{staticClass:"fa fa-check text-success"}):s("i",{staticClass:"fa fa-clock-o text-muted"})]),e._v(" "),s("div",{staticClass:"fl-auto"},[e._v("\n                "+e._s(t.name)+" "),s("br"),e._v(" "),s("small",{staticClass:"text-muted"},[e._v(e._s(t.desc))])])])}))])])])])])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return e.user?s("activity-box",e._b({on:{close:e.close}},"activity-box",{title:e.title,subtitle:e.subtitle,show:!0,actions:[],disableFooter:!0}),[s("div",{staticClass:"container py-2"},[s("div",{staticClass:"text-xs-center"},[s("img",{staticClass:"user-preview-photo my-2",attrs:{src:e.user.photo}}),e._v(" "),s("h2",[e._v(e._s(e.user.name))]),e._v(" "),s("p",["student"===e.user.person._type?s("span",{staticClass:"text-muted"},[e._v("Roll Number:")]):s("span",{staticClass:"text-muted"},[e._v("Employee ID:")]),e._v(" "+e._s(e.user.person.uid)+"\n      ")]),e._v(" "),"student"===e.user.person._type?s("p",[e._v("\n        Student · "+e._s(e.department(e.user.person.department_id))+"\n      ")]):e._e(),e._v(" "),"teacher"===e.user.person._type?s("p",[e._v("\n        "+e._s(e.user.person.designation||"Teacher")+" · "+e._s(e.department(e.user.person.department_id))+"\n      ")]):e._e(),e._v(" "),"employee"===e.user.person._type?s("p",[e._v("\n        "+e._s(e.user.person.designation||"Employee")+" · "+e._s(e.department(e.user.person.department_id))+"\n      ")]):e._e(),e._v(" "),s("div",{staticClass:"my-2"},[s("router-link",{staticClass:"btn btn-primary",attrs:{to:{name:"hub.user",params:{user:e.user.id}}}},[e._v("Send Message\n        ")])],1)])])]):s("loading-placeholder")},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",[s("div",{staticClass:"card card-inverse image-attachment",attrs:{role:"button"},on:{click:function(t){e.show=!0}}},[s("div",{staticClass:"embed-responsive embed-responsive-16by9 card-img"},[s("img",{staticClass:"embed-responsive-item",attrs:{src:e.preview}})]),e._v(" "),e.images.length>1?s("div",{staticClass:"card-img-overlay fl fl-in"},[s("div",{staticClass:"text-xs-center"},[s("div",{staticClass:"label"},[e._v(e._s(e.labelText))]),e._v(" "),s("div",{staticClass:"text-muted"},[e._v("Click to Preview")])])]):e._e()]),e._v(" "),s("modal",{staticClass:"inverse",attrs:{show:e.show},on:{hide:function(t){e.show=!1}}},[s("div",{ref:"carousel",staticClass:"carousel slide",on:{click:function(t){e.show=!1}}},[s("ol",{staticClass:"carousel-indicators"},e._l(e.images,function(t,a){return s("li",{attrs:{"data-slide-to":a},on:{click:function(t){e.go(a)}}})})),e._v(" "),s("div",{staticClass:"carousel-inner",class:{full:!e.full},attrs:{role:"listbox"}},e._l(e.images,function(t){return s("div",{staticClass:"carousel-item"},[s("img",{attrs:{src:t.path},on:{click:function(t){t.stopPropagation(),e.full=!e.full}}})])})),e._v(" "),s("a",{staticClass:"control left",attrs:{role:"button"},on:{click:function(t){t.stopPropagation(),e.go("prev")}}},[s("i",{staticClass:"fa fa-fw fa-arrow-circle-left"}),e._v(" "),s("span",{
staticClass:"sr-only"},[e._v("Previous")])]),e._v(" "),s("a",{staticClass:"control right",attrs:{role:"button"},on:{click:function(t){t.stopPropagation(),e.go("next")}}},[s("i",{staticClass:"fa fa-fw fa-arrow-circle-right"}),e._v(" "),s("span",{staticClass:"sr-only"},[e._v("Next")])])])])],1)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"card file-attachment"},[s("div",{staticClass:"file-attachment-logo"},[s("i",{staticClass:"fa fa-fw",class:[e.getClassFor(e.extension)]})]),e._v(" "),s("div",{staticClass:"file-attachment-meta"},[s("div",{staticClass:"file-attachment-filename"},[e._v(e._s(e.filename))]),e._v(" "),s("div",{staticClass:"text-danger"},[e.uploading?e._e():s("span",[s("i",{staticClass:"fa fa-fw fa-warning"}),e._v(" "+e._s(e.errorMessage)+"\n          ")])])]),e._v(" "),s("div",{staticClass:"file-attachment-retry"},[s("a",{attrs:{role:"button",disabled:e.uploading},on:{click:e.retry}},[e.uploading?s("i",{staticClass:"fa fa-fw fa-circle-o-notch fa-spin"}):s("i",{staticClass:"fa fa-fw fa-upload"})])])])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"window"},[s("div",{staticClass:"window-header"},[s("div",{staticClass:"container"},[s("div",{staticClass:"window-context"},[s("h2",{staticClass:"window-title"},[e._v("\n          "+e._s(e.title)+"\n        ")]),e._v(" "),s("div",{staticClass:"window-subtitle text-muted"},[e._v(e._s(e.subtitle))])]),e._v(" "),e._t("header",[s("div",[s("a",{staticClass:"btn btn-secondary",attrs:{role:"button"},on:{click:function(t){t.preventDefault(),e.$router.go(-1)}}},[s("i",{staticClass:"fa fa-fw fa-arrow-left"}),e._v(" Back\n          ")])])])],2)]),e._v(" "),s("div",{staticClass:"window-body"},[e._t("default")],2)])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return e.group?s("activity-box",e._b({staticClass:"hub-group-preview",on:{close:function(t){e.$router.go(-1)}}},"activity-box",{title:e.title,subtitle:e.subtitle,show:!0,actions:[],disableFooter:!0}),[s("template",{slot:"actions"},[e.group.is_admin?s("router-link",{staticClass:"btn btn-primary",attrs:{to:{name:"hub.group-edit",params:{group:e.group.id}}}},[e._v("Edit")]):e._e(),e._v(" "),e.group.is_member&&!e.group.is_admin?s("action-menu",{attrs:{actions:[{icon:"sign-out",name:"Leave Group",collapseIfRoom:!1}]},on:{"option-click":e.actionClicks}}):e._e()],1),e._v(" "),s("div",{staticClass:"container py-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2 text-xs-center"},[s("div",{staticClass:"my-2"},[e.group.is_admin?s("photo-holder",{staticClass:"group-preview-photo round",attrs:{dest:"groups/"+e.group.id+"/photo"},on:{uploaded:e.profileUpdated}},[s("img",{staticClass:"group-preview-photo",attrs:{src:e.group.photo}})]):s("img",{staticClass:"group-preview-photo",attrs:{src:e.group.photo}})],1),e._v(" "),s("div",{staticClass:"my-2"},[e.group.private?s("span",{staticClass:"alert alert-danger group-preview-tag"},[e._v("Private Group")]):s("span",{staticClass:"alert alert-info group-preview-tag"},[e._v("Public Group")])]),e._v(" "),s("h2",[e._v(e._s(e.group.name))]),e._v(" "),s("p",[s("small",{staticClass:"group-preview-description"},[e._v(e._s(e.group.description))])]),e._v(" "),s("div",{staticClass:"my-2"},[e.group.is_member?e._e():s("a",{staticClass:"btn btn-primary",attrs:{href:"#"},on:{click:function(t){t.preventDefault(),e.joinGroup(t)}}},[e._v(" Join Group ")])])]),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("div",{staticClass:"input-group input-group-lg"},[s("span",{staticClass:"input-group-addon"},[s("i",{staticClass:"fa fa-search"})]),e._v(" "),s("input",{directives:[{name:"model",rawName:"v-model",value:e.q,expression:"q"}],staticClass:"form-control",attrs:{type:"search"},domProps:{value:e._s(e.q)},on:{keyup:e.search,input:function(t){t.target.composing||(e.q=t.target.value)}}})])]),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("div",{staticClass:"text-xs-center group-preview-member-count"},[s("small",[e._v(" "+e._s(e.group.member_count_text)+" ")])]),e._v(" "),s("div",{staticClass:"row"},[e._l(e.members,function(t,a){return s("div",{staticClass:"col-xs-12 col-lg-6"},[s("item-card",{attrs:{item:t},on:{open:function(s){e.openMemberProfile(t,a)}}})],1)}),e._v(" "),s("infinite-scroll",{ref:"infinite",staticClass:"col-xs-12",attrs:{"on-infinite":e.onInfinite,"no-results:":""}})],2)])])])],2):s("loading-placeholder")},staticRenderFns:[]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("settings-box",{attrs:{title:"Invites",subtitle:"Invite students, teachers and employees of the institiute"}},[a("template",{slot:"header-image"},[a("img",{attrs:{src:s(534)}})]),e._v(" "),a("template",{slot:"name"},[e._v("\n        Send Invites\n    ")]),e._v(" "),a("template",{slot:"description"},[e._v("\n        Invite students, teachers and employees of the institute\n    ")]),e._v(" "),a("template",{slot:"settings-body"},[a("div",{staticClass:"container py-2"},[a("div",{staticClass:"row my-2"},[a("div",{staticClass:"col-xs-12 col-lg-12"},[a("div",{staticClass:"fl fl-middle"},[a("hr",{staticClass:"fl-auto"}),e._v(" "),a("small",{staticClass:"px-1 text-uppercase"},[e._v("\n                            Invite Students\n                        ")]),e._v(" "),a("hr",{staticClass:"fl-auto"})]),e._v(" "),a("div",{staticClass:"invite-input input-group input-group-lg"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.students,expression:"students"}],staticClass:"form-control",attrs:{type:"text",placeholder:"enter alias address e.g. students@domain.com"},domProps:{value:e._s(e.students)},on:{input:function(t){t.target.composing||(e.students=t.target.value)}}})]),e._v(" "),a("div",{staticClass:"row"},[a("div",{staticClass:"col-xs-12 col-lg-8 text-muted"},[e._v("\n                 An invite will be sent to all students via this list\n\n              ")]),e._v(" "),a("div",{staticClass:"col-xs-12 col-lg-4 text-muted text-lg-right"},[e._v("\n              "+e._s(e.invited.students)+" invited\n              ")])]),e._v(" "),a("div",{staticClass:"invite-actions"},[a("div",{staticClass:"btn btn-default",attrs:{role:"button"},on:{click:function(t){e.cancel("students")}}},[e._v(" Cancel ")]),e._v(" "),a("div",{staticClass:"btn btn-primary",attrs:{role:"button"},on:{click:e.sendStudentsInvite}},[e._v(" Send Invite  ")])])])]),e._v(" "),a("div",{staticClass:"row my-2"},[a("div",{staticClass:"col-xs-12 col-lg-12"},[a("div",{staticClass:"fl fl-middle"},[a("hr",{staticClass:"fl-auto"}),e._v(" "),a("small",{staticClass:"px-1 text-uppercase"},[e._v("\n                            Invite Teachers\n                        ")]),e._v(" "),a("hr",{staticClass:"fl-auto"})]),e._v(" "),a("div",{staticClass:"invite-input input-group input-group-lg"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.teachers,expression:"teachers"}],staticClass:"form-control",attrs:{type:"text",placeholder:"enter alias address e.g. teachers@domain.com"},domProps:{value:e._s(e.teachers)},on:{input:function(t){t.target.composing||(e.teachers=t.target.value)}}})]),e._v(" "),a("div",{staticClass:"row"},[a("div",{staticClass:"col-xs-12 col-lg-8 text-muted"},[e._v("\n                 An invite will be sent to all teachers via this list\n\n              ")]),e._v(" "),a("div",{staticClass:"col-xs-12 col-lg-4 text-muted text-lg-right"},[e._v("\n              "+e._s(e.invited.teachers)+" invited\n              ")])]),e._v(" "),a("div",{staticClass:"invite-actions"},[a("div",{staticClass:"btn btn-default",attrs:{role:"button"},on:{click:function(t){e.cancel("teachers")}}},[e._v(" Cancel ")]),e._v(" "),a("div",{staticClass:"btn btn-primary",attrs:{role:"button"},on:{click:e.sendTeachersInvite}},[e._v(" Send Invite  ")])])])]),e._v(" "),a("div",{staticClass:"row my-2"},[a("div",{staticClass:"col-xs-12 col-lg-12"},[a("div",{staticClass:"fl fl-middle"},[a("hr",{staticClass:"fl-auto"}),e._v(" "),a("small",{staticClass:"px-1 text-uppercase"},[e._v("\n                            Invite Non-Teaching Employees\n                        ")]),e._v(" "),a("hr",{staticClass:"fl-auto"})]),e._v(" "),a("div",{staticClass:"invite-input input-group input-group-lg"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.employees,expression:"employees"}],staticClass:"form-control",attrs:{type:"text",placeholder:"enter alias address e.g. employees@domain.com"},domProps:{value:e._s(e.employees)},on:{input:function(t){t.target.composing||(e.employees=t.target.value)}}})]),e._v(" "),a("div",{staticClass:"row"},[a("div",{staticClass:"col-xs-12 col-lg-8 text-muted"},[e._v("\n                 An invite will be sent to all employees via this list\n\n              ")]),e._v(" "),a("div",{staticClass:"col-xs-12 col-lg-4 text-muted text-lg-right"},[e._v("\n              "+e._s(e.invited.employees)+" invited\n              ")])]),e._v(" "),a("div",{staticClass:"invite-actions"},[a("div",{staticClass:"btn btn-default",attrs:{role:"button"},on:{click:function(t){e.cancel("employees")}}},[e._v(" Cancel ")]),e._v(" "),a("div",{staticClass:"btn btn-primary",attrs:{role:"button"},on:{click:e.sendEmployeesInvite}},[e._v(" Send Invite  ")])])])])])])],2)},staticRenderFns:[]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("layout-box",e._b({},"layout-box",{disableFooter:e.disableFooter}),[a("template",{slot:"context"},[a("img",{staticClass:"message-box-photo",class:[e.typeClass],attrs:{src:s(99),src:e.photo},on:{click:function(t){e.$emit("openPhoto")}}}),e._v(" "),a("div",{staticClass:"message-box-title-container"},[a("div",{staticClass:"message-box-title",on:{click:function(t){e.$emit("openTitle")}}},[e._t("title",[e._v(e._s(e.title))])],2),e._v(" "),a("div",{staticClass:"message-box-subtitle",on:{click:function(t){e.$emit("openSubtitle")}}},[e._t("subtitle",[e._v(e._s(e.subtitle))])],2)])]),e._v(" "),a("template",{slot:"footer"},[e._t("footer")],2),e._v(" "),a("template",{slot:"actions"},[e._t("actions")],2),e._v(" "),e._t("default")],2)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"form-group",class:[e.feedbackState]},[e.is(e.title)?s("label",{staticClass:"form-control-label",attrs:{for:e.id}},[e._v(e._s(e.title)+"\n      "),e.required?s("span",{staticClass:"text-danger"},[e._v(" * ")]):e._e()]):e._e(),e._v(" "),s("select",{staticClass:"form-control custom-select",class:[e.formControlState],attrs:{type:e.type,id:e.id,"described-by":e.helpId,name:e.identifier},domProps:{value:e.value},on:{input:function(t){e.$emit("input",t.target.value)}}},[s("option",{attrs:{disabled:""},domProps:{selected:!e.value}},[e._v(e._s(e.title))]),e._v(" "),e._l(e.options,function(t){return s("option",{domProps:{value:t[e.optionKey],selected:t[e.optionKey]===e.value}},[e._v(e._s(t[e.optionDisplayKey]))])})],2),e._v(" "),e.is(e.feedback)?s("div",{staticClass:"form-control-feedback"},[e._v(e._s(e.feedback))]):e._e(),e._v(" "),e.is(e.subtitle)?s("small",{staticClass:"form-text text-muted",attrs:{id:e.helpId}},[e._v(e._s(e.subtitle))]):e._e()])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"file-uploader-wrapper"},[s("input",{ref:"files",attrs:{type:"file",name:"files",multiple:"",hidden:""},on:{change:e.onFileSelected}}),e._v(" "),s("modal",{attrs:{show:e.uploading,dismissable:!1}},[s("div",{staticClass:"card mb-0"},[s("h5",{staticClass:"card-header text-primary py-2"},[e._v("Uploading")]),e._v(" "),s("div",{staticClass:"card-block"},[s("progress",{staticClass:"progress mb-0",attrs:{value:e.progress,max:"100"}},[s("div",{staticClass:"progress"},[s("span",{staticClass:"progress-bar",style:{width:e.progress+"%"}}),e._v(" "),s("span",{staticClass:"text-xs-center"},[e._v("Uploading...")])])])])])]),e._v(" "),s("modal",{ref:"info",attrs:{dismissable:!1}},[s("div",{staticClass:"card mb-0"},[s("h5",{staticClass:"card-header bg-white text-primary py-2"},[e._v("About the files")]),e._v(" "),s("div",{staticClass:"card-block"},[e._l(e.titles,function(t,a){return[0===a?s("div",{staticClass:"form-group"},[s("label",{attrs:{for:"file-uploader-1"}},[e._v("Name of the file")]),e._v(" "),s("div",{staticClass:"input-group"},[s("span",{staticClass:"input-group-addon"},[s("i",{staticClass:"fa fa-fw",class:[e.getClassFor(a)]})]),e._v(" "),s("input",{directives:[{name:"model",rawName:"v-model",value:e.titles[a],expression:"titles[index]"}],staticClass:"form-control",attrs:{type:"text",id:"file-uploader-1"},domProps:{value:e._s(e.titles[a])},on:{input:function(t){if(!t.target.composing){var s=e.titles,n=a;Array.isArray(s)?s.splice(n,1,t.target.value):e.titles[a]=t.target.value}}}})])]):s("div",{staticClass:"form-group"},[s("div",{staticClass:"input-group"},[s("span",{staticClass:"input-group-addon"},[s("i",{staticClass:"fa fa-fw",class:[e.getClassFor(a)]})]),e._v(" "),s("input",{directives:[{name:"model",rawName:"v-model",value:e.titles[a],expression:"titles[index]"}],staticClass:"form-control",attrs:{type:"text",id:"file-uploader-1"},domProps:{value:e._s(e.titles[a])},on:{input:function(t){if(!t.target.composing){var s=e.titles,n=a;Array.isArray(s)?s.splice(n,1,t.target.value):e.titles[a]=t.target.value}}}})])])]}),e._v(" "),s("input-textarea",{directives:[{name:"model",rawName:"v-model",value:e.message,expression:"message"}],staticClass:"mt-2",attrs:{title:"Add a message (optional)"},domProps:{value:e.message},on:{input:function(t){e.message=t}}})],2),e._v(" "),s("div",{staticClass:"card-footer bg-white pt-2 pb-1"},[s("a",{staticClass:"btn btn-secondary btn-cancel",attrs:{role:"button",tabindex:""},on:{click:e.onCancel}},[e._v("Cancel")]),e._v(" "),s("a",{staticClass:"btn btn-primary",attrs:{role:"button",tabindex:""},on:{click:e.onUpload}},[e._v("Share")])])])])],1)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"loading-container"},[s("div",[s("div",{staticClass:"state-loading"},[s("div",{staticClass:"cord leftMove"},[s("div",{staticClass:"ball"})]),e._v(" "),s("div",{staticClass:"cord"},[s("div",{staticClass:"ball"})]),e._v(" "),s("div",{staticClass:"cord"},[s("div",{staticClass:"ball"})]),e._v(" "),s("div",{staticClass:"cord"},[s("div",{staticClass:"ball"})]),e._v(" "),s("div",{staticClass:"cord"},[s("div",{staticClass:"ball"})]),e._v(" "),s("div",{staticClass:"cord"},[s("div",{staticClass:"ball"})]),e._v(" "),s("div",{staticClass:"cord rightMove"},[s("div",{staticClass:"ball",attrs:{id:"first"}})]),e._v(" "),s("div",{staticClass:"shadows"},[s("div",{staticClass:"leftShadow"}),e._v(" "),s("div"),e._v(" "),s("div"),e._v(" "),s("div"),e._v(" "),s("div"),e._v(" "),s("div"),e._v(" "),s("div",{staticClass:"rightShadow"})])])])])}]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("settings-box",{attrs:{title:"Departments",subtitle:e.subtitle}},[a("template",{slot:"actions"},[a("div",{staticClass:"btn btn-primary",attrs:{role:"button"},on:{click:e.showAddDepartment}},[e._v(" Add new department ")])]),e._v(" "),a("template",{slot:"header-image"},[a("img",{attrs:{src:s(531)}})]),e._v(" "),a("template",{slot:"name"},[e._v("\n     Academic and Administrative Departments\n  ")]),e._v(" "),a("template",{slot:"description"},[e._v("\n     Academic Departments: e.g. Computer Science, Mechanical, Electronics etc. "),a("br"),e._v("\n     Administrative Departments: e.g. Finance, Academic, Maintenance, HR, security etc.\n  ")]),e._v(" "),a("template",{slot:"settings-body"},[a("modal",{attrs:{name:"Add new department",show:e.onAdd},on:{hide:e.onCancel}},[a("div",{staticClass:"card"},[a("h4",{staticClass:"card-header bg-white"},[e._v(e._s(e.title)+" ")]),e._v(" "),a("div",{staticClass:"card-block"},[a("input-text",{directives:[{name:"model",rawName:"v-model",value:e.department.name,expression:"department.name"}],attrs:{title:"Name of the department",required:"",feedback:e.errors.name},domProps:{value:e.department.name},on:{input:function(t){e.department.name=t}}}),e._v(" "),a("input-text",{directives:[{name:"model",rawName:"v-model",value:e.department.short_name,expression:"department.short_name"}],attrs:{title:"Department acronym",feedback:e.errors.short_name},domProps:{value:e.department.short_name},on:{input:function(t){e.department.short_name=t}}}),e._v(" "),a("input-search",e._b({directives:[{name:"model",rawName:"v-model",value:e.query,expression:"query"}],attrs:{title:"Head of Department"},domProps:{value:e.query},on:{suggest:e.onSuggest,select:e.onSelect,input:function(t){e.query=t}}},"input-search",{suggestions:e.suggestions})),e._v(" "),a("input-radio",{directives:[{name:"model",rawName:"v-model",value:e.department.academic,expression:"department.academic"}],attrs:{title:"Department Type",required:"",options:e.departmentTypes,feedback:e.errors.academic},domProps:{value:e.department.academic},on:{input:function(t){e.department.academic=t}}}),e._v(" "),a("div",{staticClass:"float-xs-right mt-1"},[a("a",{staticClass:"btn btn-secondary btn-cancel",attrs:{role:"button",tabindex:""},on:{click:e.onCancel}},[e._v("Cancel")]),e._v(" "),a("a",{staticClass:"btn btn-primary",attrs:{role:"button",tabindex:""},on:{click:e.onSubmit}},[e._v("Save")])])],1)])]),e._v(" "),a("div",{staticClass:"container py-2"},[a("div",{staticClass:"fl fl-middle"},[a("hr",{staticClass:"fl-auto"}),e._v(" "),a("small",{staticClass:"px-1 text-uppercase"},[e._v("\n                    Academic Departments\n                ")]),e._v(" "),a("hr",{staticClass:"fl-auto"})]),e._v(" "),a("div",{staticClass:"row my-2"},e._l(e.academic,function(t,s){return a("settings-card",{staticClass:"col-xs-12 col-lg-6",attrs:{title:t.name,text:e.getText(t),additional:!0,index:s,context:"academic"},on:{cardClicked:e.departmentClicked}},[a("template",{slot:"additional-text"},[e._v("\n                    "+e._s(t.stats.student||0)+" students,\n                    "+e._s(t.stats.teachers||0)+" teachers,\n                    "+e._s(t.stats.employees||0)+" staff\n                  ")])],2)})),e._v(" "),a("div",{staticClass:"fl fl-middle"},[a("hr",{staticClass:"fl-auto"}),e._v(" "),a("small",{staticClass:"px-1 text-uppercase"},[e._v("\n                    Non-Academic / Administrative Departments\n                ")]),e._v(" "),a("hr",{staticClass:"fl-auto"})]),e._v(" "),a("div",{staticClass:"row my-2"},e._l(e.nonAcademic,function(t,s){return a("settings-card",{staticClass:"col-xs-12 col-lg-6",attrs:{title:t.name,text:e.getText(t),additional:!0,index:s,context:"nonAcademic"},on:{cardClicked:e.departmentClicked}},[a("template",{slot:"additional-text"},[e._v("\n                    "+e._s(t.stats.student||0)+" students,\n                    "+e._s(t.stats.teachers||0)+" teachers,\n                    "+e._s(t.stats.employees||0)+" staff\n                  ")])],2)}))])],1)],2)},staticRenderFns:[]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("settings-box",{attrs:{title:"Semesters",subtitle:"Add/remove institute subtitles"}},[a("template",{slot:"actions"},[a("div",{staticClass:"btn btn-primary",attrs:{role:"button"},on:{click:e.showAddSemester}},[e._v(" "+e._s(e.title)+" ")])]),e._v(" "),a("template",{slot:"header-image"},[a("img",{attrs:{src:s(535)}})]),e._v(" "),a("template",{slot:"name"},[e._v("\n        Semesters\n    ")]),e._v(" "),a("template",{slot:"description"},[e._v("\n        e.g. Odd/Even, Summer, Winter, etc\n    ")]),e._v(" "),a("template",{slot:"settings-body"},[a("modal",{attrs:{name:"Add new semesters",show:e.onAdd,dismissable:!1}},[a("div",{staticClass:"card"},[a("h4",{staticClass:"card-header bg-white"},[e._v("Add New Semester")]),e._v(" "),a("div",{staticClass:"card-block"},[a("input-text",{directives:[{name:"model",rawName:"v-model",value:e.semester.name,expression:"semester.name"}],attrs:{title:"Name of the semester",required:"",feedback:e.errors.name},domProps:{value:e.semester.name},on:{input:function(t){e.semester.name=t}}}),e._v(" "),a("div",{staticClass:"float-xs-right"},[a("a",{staticClass:"btn btn-secondary btn-cancel",attrs:{role:"button",tabindex:""},on:{click:e.onCancel}},[e._v("Cancel")]),e._v(" "),a("a",{staticClass:"btn btn-primary",attrs:{role:"button",tabindex:""},on:{click:e.onSubmit}},[e._v("Save")])])],1)])]),e._v(" "),a("div",{staticClass:"container py-2"},[a("div",{staticClass:"row my-2"},e._l(e.semesters,function(t,s){return a("settings-card",{staticClass:"col-xs-12 col-lg-6",attrs:{title:t.name,index:s},on:{cardClicked:e.semesterClicked}})}))])],1)],2)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("infinite-scroll",{ref:"infinite",staticClass:"col-xs-12",attrs:{"on-infinite":e.onInfinite,spinner:"waveDots"}})},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"message-date-separator"},[s("hr"),e._v(" "),s("div",{staticClass:"message-date-content",class:{"new-messages":e.unread}},[e._v(e._s(e._f("day")(e.date))+" "),e.unread?s("span",[e._v("·\n    "+e._s(e.text))]):e._e()]),e._v(" "),s("hr")])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("window-box",{attrs:{title:"Find Students",subtitle:"View students and new student requests"}},[s("div",{staticClass:"container py-1 student-list"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-3"},[s("div",{staticClass:"card card-block"},[s("label",{staticClass:"custom-control custom-checkbox text-danger mb-0"},[s("input",{directives:[{name:"model",rawName:"v-model",value:e.reviewingRequests,expression:"reviewingRequests"}],staticClass:"custom-control-input",attrs:{name:"discipline",type:"checkbox"},domProps:{checked:Array.isArray(e.reviewingRequests)?e._i(e.reviewingRequests,null)>-1:e.reviewingRequests},on:{click:function(t){var s=e.reviewingRequests,a=t.target,n=!!a.checked;if(Array.isArray(s)){var i=null,r=e._i(s,i);n?r<0&&(e.reviewingRequests=s.concat(i)):r>-1&&(e.reviewingRequests=s.slice(0,r).concat(s.slice(r+1)))}else e.reviewingRequests=n}}}),e._v(" "),s("span",{staticClass:"custom-control-indicator"}),e._v(" "),s("span",{staticClass:"custom-control-description"},[e._v("New Requests")])])]),e._v(" "),s("div",{staticClass:"card card-block",class:{"hidden-sm-down":e.reviewingRequests}},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-12 mb-1"},[s("h6",{staticClass:"text-muted"},[e._v("Discipline")]),e._v(" "),s("fieldset",{attrs:{disabled:e.reviewingRequests}},[s("div",{staticClass:"custom-controls-stacked"},e._l(e.disciplines,function(t){return s("label",{staticClass:"custom-control custom-checkbox"},[s("input",{directives:[{name:"model",rawName:"v-model",value:e.discipline,expression:"discipline"}],staticClass:"custom-control-input",attrs:{name:"discipline",type:"checkbox"},domProps:{value:t.id,checked:Array.isArray(e.discipline)?e._i(e.discipline,t.id)>-1:e.discipline},on:{click:function(s){var a=e.discipline,n=s.target,i=!!n.checked;if(Array.isArray(a)){var r=t.id,o=e._i(a,r);i?o<0&&(e.discipline=a.concat(r)):o>-1&&(e.discipline=a.slice(0,o).concat(a.slice(o+1)))}else e.discipline=i}}}),e._v(" "),s("span",{staticClass:"custom-control-indicator"}),e._v(" "),s("span",{staticClass:"custom-control-description"},[e._v(e._s(t.name))])])}))])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-12"},[s("h6",{staticClass:"text-muted"},[e._v("Department")]),e._v(" "),s("fieldset",{attrs:{disabled:e.reviewingRequests}},[s("div",{staticClass:"custom-controls-stacked"},e._l(e.departments.filter(function(e){return e.academic}),function(t){return s("label",{staticClass:"custom-control custom-checkbox"},[s("input",{directives:[{name:"model",rawName:"v-model",value:e.department,expression:"department"}],staticClass:"custom-control-input",attrs:{name:"department",type:"checkbox"},domProps:{value:t.id,checked:Array.isArray(e.department)?e._i(e.department,t.id)>-1:e.department},on:{click:function(s){var a=e.department,n=s.target,i=!!n.checked;if(Array.isArray(a)){var r=t.id,o=e._i(a,r);i?o<0&&(e.department=a.concat(r)):o>-1&&(e.department=a.slice(0,o).concat(a.slice(o+1)))}else e.department=i}}}),e._v(" "),s("span",{staticClass:"custom-control-indicator"}),e._v(" "),s("span",{staticClass:"custom-control-description"},[e._v(e._s(t.name))])])}))])])])])]),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-9"},[s("div",{staticClass:"form-group"},[s("div",{staticClass:"input-group"},[s("span",{staticClass:"input-group-addon search-box"},[s("i",{staticClass:"fa fa-fw fa-search"})]),e._v(" "),s("input",{directives:[{name:"model",rawName:"v-model",value:e.query,expression:"query"}],staticClass:"form-control form-control-lg search-box",attrs:{type:"text",placeholder:"Start typing..."},domProps:{value:e._s(e.query)},on:{input:function(t){t.target.composing||(e.query=t.target.value)}}})])]),e._v(" "),s("div",{staticClass:"card"},[s("div",{staticClass:"card-header bg-white"},[s("div",{staticClass:"title"},[e._v(e._s(e.searchText))]),e._v(" "),s("div",{staticClass:"text-muted"},[e._v("\n              "+e._s(e.countText)+"\n            ")])]),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[e._l(e.students,function(t){return s("div",{key:t.id,staticClass:"col-xs-12 col-lg-6 student-card"},[s("person-card",{attrs:{item:t},on:{open:function(s){e.$router.push({name:"student.profile",params:{student:t.uid}})}}})],1)}),e._v(" "),s("div",{staticClass:"col-xs-12"},[s("infinite-loader",{on:{load:e.onLoad}})],1)],2)])])])])])])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",[s("div",{staticClass:"card settings-card",attrs:{role:"button"},on:{click:function(t){e.$emit("cardClicked",e.index,e.context)}}},[s("div",{staticClass:"card-block"},[s("div",{staticClass:"settings-card-title"},[e._t("title",[s("span",{staticClass:"card-title"},[e._v(" "+e._s(e.title)+" ")])])],2),e._v(" "),e.text?s("div",{staticClass:"settings-card-text"},[e._t("text",[s("small",{staticClass:"card-text text-muted"},[e._v(e._s(e.text)+" ")])])],2):e._e()]),e._v(" "),e.additional?s("div",{staticClass:"settings-card-additional-text"},[e._t("additional-text")],2):e._e()])])},staticRenderFns:[]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("settings-box",{attrs:{title:"Disciplines",subtitle:"Add/remove institute disciplines"}},[a("template",{slot:"actions"},[a("div",{staticClass:"btn btn-primary",attrs:{role:"button"},on:{click:e.showAddDiscipline}},[e._v(" "+e._s(e.title)+" ")])]),e._v(" "),a("template",{slot:"header-image"},[a("img",{attrs:{src:s(532)}})]),e._v(" "),a("template",{slot:"name"},[e._v("\n        Disciplines\n    ")]),e._v(" "),a("template",{slot:"description"},[e._v("\n        e.g. B.Tech, M.Tech, MBA, B.E, M.E, etc\n    ")]),e._v(" "),a("template",{slot:"settings-body"},[a("modal",{attrs:{name:"Add new disciplines",show:e.onAdd,dismissable:!1}},[a("div",{staticClass:"card"},[a("h4",{staticClass:"card-header bg-white"},[e._v("Add New Discipline")]),e._v(" "),a("div",{staticClass:"card-block"},[a("input-text",{directives:[{name:"model",rawName:"v-model",value:e.discipline.name,expression:"discipline.name"}],attrs:{title:"Name of the discipline",required:"",feedback:e.errors.name},domProps:{value:e.discipline.name},on:{input:function(t){e.discipline.name=t}}}),e._v(" "),a("input-text",{directives:[{name:"model",rawName:"v-model",value:e.discipline.short_name,expression:"discipline.short_name"}],attrs:{title:"Discipline Acronym",feedback:e.errors.acronym},domProps:{value:e.discipline.short_name},on:{input:function(t){e.discipline.short_name=t}}}),e._v(" "),a("div",{staticClass:"mt-1 float-xs-right"},[a("a",{staticClass:"btn btn-secondary btn-cancel",attrs:{role:"button",tabindex:""},on:{click:e.onCancel}},[e._v("Cancel")]),e._v(" "),a("a",{staticClass:"btn btn-primary",attrs:{role:"button",tabindex:""},on:{click:e.onSubmit}},[e._v("Save")])])],1)])]),e._v(" "),a("div",{staticClass:"container py-2"},[a("div",{staticClass:"row my-2"},e._l(e.disciplines,function(t,s){return a("settings-card",{staticClass:"col-xs-12 col-lg-6",attrs:{title:t.name,index:s,text:t.short_name},on:{cardClicked:e.disciplineClicked}})}))])],1)],2)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("window-box",{attrs:{title:"Students",subtitle:"Search students"}},[s("div",{slot:"header"},[s("a",{staticClass:"btn btn-secondary",attrs:{role:"button"},on:{click:function(t){t.preventDefault(),e.$router.go(-1)}}},[s("i",{staticClass:"fa fa-fw fa-arrow-left"}),e._v(" Back\n    ")])]),e._v(" "),s("div",{staticClass:"student-search-container"},[s("div",{staticClass:"container"},[s("h3",{staticClass:"text-xs-center"},[e._v("Students")]),e._v(" "),s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-md-6 offset-md-3 m-t-1"},[s("input-search",e._b({directives:[{name:"model",rawName:"v-model",value:e.query,expression:"query"}],attrs:{component:"search-option-person"},domProps:{value:e.query},on:{suggest:e.onSearchInput,search:e.onSearch,select:e.onSelect,input:function(t){e.query=t}}},"input-search",{suggestions:e.suggestions}))],1)]),e._v(" "),s("p",{staticClass:"text-xs-center"},[e._v("\n              Find students by their roll number or name.\n          ")])])]),e._v(" "),s("div",{staticClass:"container people-d-links"},[s("div",{staticClass:"card text-xs-center"},[s("div",{staticClass:"card-block"},[s("h5",[e._v("Departments")]),e._v(" "),e._l(e.departments.filter(function(e){return e.academic}),function(t){return s("div",{staticClass:"item"},[s("router-link",{staticClass:"btn btn-secondary",attrs:{to:{name:"student.find",query:{department:[t.id]}}}},[e._v("\n                      "+e._s(t.name)+"\n                  ")])],1)})],2),e._v(" "),s("div",{staticClass:"card-block"},[s("h5",[e._v("Disciplines")]),e._v(" "),e._l(e.disciplines,function(t){return s("div",{staticClass:"item"},[s("router-link",{staticClass:"btn btn-secondary",attrs:{to:{name:"student.find",query:{discipline:[t.id]}}}},[e._v("\n                      "+e._s(t.name)+"\n                  ")])],1)})],2)])])])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("settings-box",{attrs:{title:"Institute Details",subtitle:"About the institute, Contact info, logo",withHeader:!1}},[s("template",{slot:"settings-body"},[s("div",{staticClass:"container py-1"},[s("div",{staticClass:"text-xs-center"},[s("photo-holder",{staticClass:"group-preview-photo",attrs:{name:"file",dest:"school/logo"},on:{uploaded:e.logoUpdated}},[s("img",{staticClass:"group-preview-photo",attrs:{src:e.institute.logo}})])],1),e._v(" "),s("div",{staticClass:"institute-details-about"},[s("div",{staticClass:"text-xs-center col-xs-12"},[e._v(" ABOUT THE INSTITUTE ")]),e._v(" "),s("div",{staticClass:"row institute-details-form"},[s("div",{staticClass:"col-xs-12 col-lg-12"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.institute.name,expression:"institute.name"}],attrs:{title:"Name of the institute",required:"",placeholder:"enter here",feedback:e.errors.name},domProps:{value:e.institute.name},on:{input:function(t){e.institute.name=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6 "},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.institute.username,
expression:"institute.username"}],attrs:{title:"Institute Username",required:"",placeholder:"enter here",feedback:e.errors.username},domProps:{value:e.institute.username},on:{input:function(t){e.institute.username=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.institute.email,expression:"institute.email"}],attrs:{title:"Institute Email",required:"",placeholder:"enter here",feedback:e.errors.email},domProps:{value:e.institute.email},on:{input:function(t){e.institute.email=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6 "},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.institute.university,expression:"institute.university"}],attrs:{title:"University",required:"",placeholder:"enter here",feedback:e.errors.university},domProps:{value:e.institute.university},on:{input:function(t){e.institute.university=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.institute.institute_type,expression:"institute.institute_type"}],attrs:{title:"Institute Type",required:"",placeholder:"enter here",feedback:e.errors.institute_type},domProps:{value:e.institute.institute_type},on:{input:function(t){e.institute.institute_type=t}}})],1),e._v(" "),s("div",{staticClass:"institute-details-actions col-xs-12 col-lg-6"},[s("div",{staticClass:"btn btn-default",attrs:{role:"button"}},[e._v(" Cancel ")]),e._v(" "),s("div",{staticClass:"btn btn-primary",attrs:{role:"button"},on:{click:e.saveInstitute}},[e._v(" Save ")])])])]),e._v(" "),s("div",{staticClass:"institute-details-contact"},[s("div",{staticClass:"text-xs-center"},[e._v(" INSTITUTE CONTACT INFORMATION ")]),e._v(" "),s("div",{staticClass:"row institute-details-form"},[s("div",{staticClass:"col-xs-12 col-lg-6"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.contact.address_line1,expression:"contact.address_line1"}],attrs:{title:"Address Line 1",required:"",placeholder:"enter here",feedback:e.errors.address_line1},domProps:{value:e.contact.address_line1},on:{input:function(t){e.contact.address_line1=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.contact.address_line2,expression:"contact.address_line2"}],attrs:{title:"Address Line 2",required:"",placeholder:"enter here",feedback:e.errors.address_line2},domProps:{value:e.contact.address_line2},on:{input:function(t){e.contact.address_line2=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.contact.landmark,expression:"contact.landmark"}],attrs:{title:"Landmark",placeholder:"enter here",feedback:e.errors.landmark},domProps:{value:e.contact.landmark},on:{input:function(t){e.contact.landmark=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.contact.city,expression:"contact.city"}],attrs:{title:"City",required:"",placeholder:"enter here",feedback:e.errors.city},domProps:{value:e.contact.city},on:{input:function(t){e.contact.city=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.contact.pin_code,expression:"contact.pin_code"}],attrs:{title:"PIN Code",required:"",placeholder:"enter here",feedback:e.errors.pin_code},domProps:{value:e.contact.pin_code},on:{input:function(t){e.contact.pin_code=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.contact.website,expression:"contact.website"}],attrs:{title:"Website",placeholder:"enter here",feedback:e.errors.website},domProps:{value:e.contact.website},on:{input:function(t){e.contact.website=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.contact.fax,expression:"contact.fax"}],attrs:{title:"Fax Number",required:"",placeholder:"enter here",feedback:e.errors.fax},domProps:{value:e.contact.fax},on:{input:function(t){e.contact.fax=t}}})],1),e._v(" "),s("div",{staticClass:"institute-details-actions col-xs-12 col-lg-8"},[s("div",{staticClass:"btn btn-default",attrs:{role:"button"}},[e._v(" Cancel ")]),e._v(" "),s("div",{staticClass:"btn btn-primary",attrs:{role:"button"},on:{click:e.saveContact}},[e._v(" Save ")])])])])])])],2)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"app"},[s("nav-bar"),e._v(" "),s("router-view")],1)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return e.attachments.length?s("div",{staticClass:"attachment-wrapper"},[e.images.length?s("image-attachment",e._b({},"image-attachment",{images:e.images})):e._e(),e._v(" "),e._l(e.files,function(t,a){return[e.isFile(t)?s("file-attachment",e._b({},"file-attachment",{attachment:t})):e._e(),e._v(" "),e.isError(t)?s("failed-attachment",e._b({},"failed-attachment",{attachment:t,messageId:e.message.id})):e._e()]})],2):e._e()},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"form-group",class:[e.feedbackState]},[e.is(e.title)?s("label",{staticClass:"form-control-label",attrs:{for:e.id}},[e._v(e._s(e.title)+"\n      "),e.required?s("span",{staticClass:"text-danger"},[e._v(" * ")]):e._e()]):e._e(),e._v(" "),s("div",{staticClass:"input-group",attrs:{id:e.id,"described-by":e.helpId,role:"form"}},[s("div",{class:{"c-inputs-stacked":e.stacked}},e._l(e.options,function(t,a){return s("label",{key:a,staticClass:"c-input input-radio"},[s("input",{attrs:{name:e.identifier,type:e.type},domProps:{value:a},on:{click:function(t){t.preventDefault(),t.stopPropagation(),e.onInput(t,a)}}}),e._v(" "),s("div",{staticClass:"c-indicator",class:{checked:e.localValue.indexOf(a)>-1}},[e._v(e._s(t))])])}))]),e._v(" "),e.is(e.feedback)?s("div",{staticClass:"form-control-feedback"},[e._v(e._s(e.feedback))]):e._e(),e._v(" "),e.is(e.subtitle)?s("small",{staticClass:"form-text text-muted",attrs:{id:e.helpId}},[e._v(e._s(e.subtitle))]):e._e()])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("window-box",{attrs:{title:"Employees",subtitle:"Search employees"}},[s("div",{slot:"header"},[s("a",{staticClass:"btn btn-secondary",attrs:{role:"button"},on:{click:function(t){t.preventDefault(),e.$router.go(-1)}}},[s("i",{staticClass:"fa fa-fw fa-arrow-left"}),e._v(" Back\n    ")])]),e._v(" "),s("div",{staticClass:"employee-search-container"},[s("div",{staticClass:"container"},[s("h3",{staticClass:"text-xs-center"},[e._v("Employees")]),e._v(" "),s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-md-6 offset-md-3 m-t-1"},[s("input-search",e._b({directives:[{name:"model",rawName:"v-model",value:e.query,expression:"query"}],attrs:{component:"search-option-person"},domProps:{value:e.query},on:{suggest:e.onSearchInput,search:e.onSearch,select:e.onSelect,input:function(t){e.query=t}}},"input-search",{suggestions:e.suggestions}))],1)]),e._v(" "),s("p",{staticClass:"text-xs-center"},[e._v("\n              Find employees by their employee ID or name.\n          ")])])]),e._v(" "),s("div",{staticClass:"container people-d-links"},[s("div",{staticClass:"card text-xs-center"},[s("div",{staticClass:"card-block"},[s("h5",[e._v("Departments")]),e._v(" "),e._l(e.departments,function(t){return s("div",{staticClass:"item"},[s("router-link",{staticClass:"btn btn-secondary",attrs:{to:{name:"employee.find",query:{department:[t.id]}}}},[e._v("\n                      "+e._s(t.name)+"\n                  ")])],1)})],2)])])])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content-box"},[s("div",{staticClass:"content-box-content",class:[e.contentClass]},[e._t("default")],2),e._v(" "),s("div",{staticClass:"content-box-sidebar",class:[e.stateClass,e.sidebarClass]},[e._t("sidebar")],2)])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",[s("activity-box",{directives:[{name:"show",rawName:"v-show",value:e.hasCourse,expression:"hasCourse"}],attrs:{title:"Edit Course",subtitle:"This would update course details."},on:{close:function(t){e.$router.push({name:"acad"})}}},[s("template",{slot:"actions"},[s("a",{ref:"action",staticClass:"btn btn-primary",attrs:{role:"button",tabindex:""},on:{click:function(t){t.preventDefault(),t.stopPropagation(),e.updateCourse(t)}}},[s("i",{directives:[{name:"tooltip",rawName:"v-tooltip:bottom",value:"Update Course",expression:"'Update Course'",arg:"bottom"}],staticClass:"fa fa-fw fa-save hidden-lg-up"}),e._v(" "),s("span",{staticClass:"hidden-md-down"},[e._v("Update Course")])])]),e._v(" "),s("div",{staticClass:"container py-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.course.name,expression:"course.name"}],attrs:{title:"Course Name",required:"",feedback:e.errors.name},domProps:{value:e.course.name},on:{input:function(t){e.course.name=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.course.code,expression:"course.code"}],attrs:{title:"Course code",required:"",feedback:e.errors.code},domProps:{value:e.course.code},on:{input:function(t){e.course.code=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6"},[s("input-select",{directives:[{name:"model",rawName:"v-model.number",value:e.course.department_id,expression:"course.department_id",modifiers:{number:!0}}],attrs:{title:"Department",required:"",feedback:e.errors.department_id,options:e.departments},domProps:{value:e.course.department_id},on:{input:function(t){e.course.department_id=e._n(t)},blur:function(t){e.$forceUpdate()}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-4"},[s("input-select",{directives:[{name:"model",rawName:"v-model.number",value:e.course.discipline_id,expression:"course.discipline_id",modifiers:{number:!0}}],attrs:{title:"Discipline",feedback:e.errors.discipline_id,options:e.disciplines},domProps:{value:e.course.discipline_id},on:{input:function(t){e.course.discipline_id=e._n(t)},blur:function(t){e.$forceUpdate()}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-4"},[s("input-select",{directives:[{name:"model",rawName:"v-model.number",value:e.course.year_id,expression:"course.year_id",modifiers:{number:!0}}],attrs:{title:"Year",feedback:e.errors.year_id,options:e.years},domProps:{value:e.course.year_id},on:{input:function(t){e.course.year_id=e._n(t)},blur:function(t){e.$forceUpdate()}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-4"},[s("input-select",{directives:[{name:"model",rawName:"v-model.number",value:e.course.semester_id,expression:"course.semester_id",modifiers:{number:!0}}],attrs:{title:"Semester",feedback:e.errors.semester_id,options:e.semesters},domProps:{value:e.course.semester_id},on:{input:function(t){e.course.semester_id=e._n(t)},blur:function(t){e.$forceUpdate()}}})],1)])])])]),e._v(" "),s("div",{staticClass:"fl fl-middle"},[s("hr",{staticClass:"fl-auto"}),e._v(" "),s("small",{staticClass:"px-1 text-uppercase"},[e._v("\n        Course Instructors\n      ")]),e._v(" "),s("hr",{staticClass:"fl-auto"})]),e._v(" "),s("div",{staticClass:"container py-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12"},[s("input-search",e._b({directives:[{name:"model",rawName:"v-model",value:e.qi,expression:"qi"}],ref:"instructor",attrs:{title:"Course Instructor",subtitle:"Course Instructor will be notified. He/she can collaborate with students."},domProps:{value:e.qi},on:{suggest:e.findInstructor,select:e.addInstructor,input:function(t){e.qi=t}}},"input-search",{suggestions:e.teachers}))],1),e._v(" "),e._l(e.instructors,function(t){return s("div",{key:t.id,staticClass:"col-xs-12 col-lg-6"},[s("person-card",{attrs:{item:t}},[s("a",{directives:[{name:"tooltip",rawName:"v-tooltip",value:"Remove",expression:"'Remove'"}],staticClass:"text-muted",attrs:{href:"#"},on:{click:function(s){s.stopPropagation(),s.preventDefault(),e.removeInstructor(t)}},slot:"actions"},[s("i",{staticClass:"fa fa-fw fa-trash-o"})])])],1)})],2)])])]),e._v(" "),s("div",{staticClass:"fl fl-middle"},[s("hr",{staticClass:"fl-auto"}),e._v(" "),s("small",{staticClass:"px-1 text-uppercase"},[e._v("\n        Pre-requisite Courses\n      ")]),e._v(" "),s("hr",{staticClass:"fl-auto"})]),e._v(" "),s("div",{staticClass:"container py-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12"},[s("input-search",e._b({directives:[{name:"model",rawName:"v-model",value:e.qc,expression:"qc"}],ref:"course",attrs:{title:"Course Name"},domProps:{value:e.qc},on:{suggest:e.findPreRequisiteCourse,select:e.addPreRequisiteCourse,input:function(t){e.qc=t}}},"input-search",{suggestions:e.courses}))],1),e._v(" "),e._l(e.prerequisites,function(t){return s("div",{key:t.id,staticClass:"col-xs-12 col-lg-6"},[s("div",{staticClass:"card card-block fl"},[s("div",{staticClass:"fl-auto"},[s("h6",[e._v(e._s(t.name))]),e._v(" "),s("small",{staticClass:"text-muted"},[e._v(e._s(t.code))])]),e._v(" "),s("a",{directives:[{name:"tooltip",rawName:"v-tooltip",value:"Remove",expression:"'Remove'"}],staticClass:"text-muted",attrs:{href:"#"},on:{click:function(t){t.stopPropagation(),t.preventDefault(),e.removePreRequisiteCourse(e.courses)}}},[s("i",{staticClass:"fa fa-fw fa-trash-o"})])])])})],2)])])]),e._v(" "),s("div",{staticClass:"py-3"})],2),e._v(" "),e.hasCourse?e._e():s("loading-placeholder")],1)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"message-action-wrapper"},[e._t("messageActions",[e._l(e.actions,function(t,a){return[s("a",{staticClass:"message-box-action",attrs:{href:"#","data-toggle":"tooltip","data-placement":"left"},on:{click:function(s){s.preventDefault(),e.click(s,t,a)}}},[s("img",{directives:[{name:"tooltip",rawName:"v-tooltip:left",value:t.name,expression:"action.name",arg:"left"}],attrs:{src:t.asset}})])]})])],2)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"message-list-container"},[s("infinite-loading",{ref:"infinite",attrs:{"on-infinite":e.loadMore,distance:0,spinner:"waveDots"}}),e._v(" "),e._l(e.messages,function(t,a){return e.messages.length?s("div",{key:"id",staticClass:"message-list-item",attrs:{id:"message-"+t.id}},[e.isDateChangingAt(t,a)?s("date-separator",{attrs:{date:t.received_at,unread:t.id===e.unread.id,count:e.unread.count}}):[t.id===e.unread.id?s("new-separator",{attrs:{count:e.unread.count}}):e._e()],e._v(" "),s(e.decorator(t,a),{tag:"div",attrs:{message:t},on:{focus:function(s){e.$emit("seen",t)}}})],2):e._e()})],2)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"card file-attachment",attrs:{role:"button"}},[s("div",{staticClass:"file-attachment-logo"},[s("i",{staticClass:"fa fa-fw",class:[e.getClassFor(e.attachment.extension)]})]),e._v(" "),s("div",{staticClass:"file-attachment-meta",on:{click:e.downloadFile}},[s("div",{staticClass:"file-attachment-filename"},[e.attachment.title?s("span",[e._v(e._s(e.attachment.title))]):s("span",[e._v(e._s(e.attachment.filename))])]),e._v(" "),s("div",{staticClass:"file-attachment-size"},[s("small",{staticClass:"text-muted"},[e._v(e._s(e._f("forHumans")(e.attachment.size)))])])])])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"form-group",class:[e.feedbackState]},[e.title?s("label",{staticClass:"form-control-label",attrs:{for:e.id}},[e._v(e._s(e.title))]):e._e(),e._v(" "),s("div",{ref:"body",staticClass:"search-container",class:{open:e.isOpen},attrs:{tabindex:e.isOpen?-1:0},on:{focus:function(t){t.stopPropagation(),e.open(t)}}},[s("div",{staticClass:"search-query",on:{click:function(t){t.stopPropagation(),e.open(t)}}},[s("input",{ref:"input",attrs:{id:e.id,name:e.identifier,placeholder:e.searchHelpText,autocomplete:"off",type:"search"},domProps:{value:e.value},on:{input:e.onInput,focus:function(t){t.stopPropagation(),e.open(t)},keydown:[function(t){e._k(t.keyCode,"esc",27)||(t.stopPropagation(),t.preventDefault(),e.onEsc(t))},function(t){e._k(t.keyCode,"enter",13)||(t.stopPropagation(),t.preventDefault(),e.onEnter(t))},function(t){e._k(t.keyCode,"up",38)||(t.preventDefault(),e.onUp(t))},function(t){e._k(t.keyCode,"down",40)||(t.preventDefault(),e.onDown(t))}],blur:e.onBlur}}),e._v(" "),s("i",{directives:[{name:"show",rawName:"v-show",value:e.suggesting,expression:"suggesting"}],staticClass:"fa fa-fw fa-circle-o-notch fa-spin"})]),e._v(" "),s("ul",{directives:[{name:"show",rawName:"v-show",value:e.isOpen,expression:"isOpen"}],ref:"options",staticClass:"search-suggestions"},[e.noResults?s("li",{staticClass:"search-suggestion not-found"},[e._t("not-found",[s("span",[e._v("No results for: "+e._s(e.value))])])],2):e._e(),e._v(" "),e._l(e.options,function(t,a){return s("li",{staticClass:"search-suggestion",class:{active:a===e.index},on:{click:function(s){s.stopPropagation(),e.onClick(t)},mouseover:function(t){e.index=null}}},[s(e.component,{tag:"div",attrs:{option:t,query:e.value}})])})],2)]),e._v(" "),e.is(e.feedback)?s("div",{staticClass:"form-control-feedback"},[e._v(e._s(e.feedback))]):e._e(),e._v(" "),e.is(e.subtitle)?s("small",{staticClass:"form-text text-muted",attrs:{id:e.id+"-help"}},[e._v(e._s(e.subtitle))]):e._e()])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("window-box",{attrs:{title:"Student Profile",subtitle:"See profile here..."}},[s("div",{staticClass:"container my-1"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-4 text-xs-center"},[s("div",{ref:"sidebar",staticClass:"card"},[s("img",{staticClass:"card-img-top student-photo",attrs:{src:e.student.photo}}),e._v(" "),s("div",{staticClass:"card-block"},[s("h3",{staticClass:"value"},[e._v(e._s(e.student.name))]),e._v(" "),e.student.uid?s("span",[s("span",{staticClass:"text-muted"},[e._v("Roll Number:")]),e._v(" "+e._s(e.student.uid)),s("br")]):e._e(),e._v(" "),e.student.email?s("span",[s("span",{staticClass:"text-muted"},[e._v("Email:")]),e._v(" "+e._s(e.student.email))]):e._e()]),e._v(" "),s("hr",{staticClass:"m-0"}),e._v(" "),e.student.user_id?s("div",{staticClass:"card-block"},[s("router-link",{staticClass:"card-link",attrs:{to:{name:"hub.user",params:{user:e.student.user_id}}}},[e._v("\n                  Send Message\n                ")])],1):e._e()])]),e._v(" "),e.loading?s("div",{staticClass:"col-xs-12 col-lg-8"},[s("loading-placeholder")],1):e._e(),e._v(" "),e.success?s("div",{staticClass:"col-xs-12 col-lg-8"},[s("div",{staticClass:"card"},[s("h5",{staticClass:"card-header bg-white"},[e._v("\n                Person Information\n              ")]),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Name")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.name))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Gender")]),e._v(" "),s("div",{staticClass:"value text-capitalize"},[e._v(e._s(e.student.gender))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Date of Birth")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e._f("dateForHumans")(e.student.date_of_birth)))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Category")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.category))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("AADHAR ID")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.govt_id))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Passport")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.passport))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Religion")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.religion))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Mother Tongue")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.language))])])])])])]),e._v(" "),s("div",{staticClass:"card"},[s("h5",{staticClass:"card-header bg-white"},[e._v("\n                Related to School\n              ")]),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Student UID (Roll Number)")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.uid))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Date of Admission")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e._f("dateForHumans")(e.student.date_of_admission)))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Department")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.department.name))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Discipline")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.discipline.name))])])])])])]),e._v(" "),s("div",{staticClass:"card"},[s("h5",{staticClass:"card-header bg-white"},[e._v("\n                Contact Information\n              ")]),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Address")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.address?e.student.address.address_line1+", "+e.student.address.address_line2:"")+"\n                            ")])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Landmark")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.address.landmark))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("City")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.address.city?e.student.address.city.name+", "+e.student.address.city.state.name:"")+"\n                            ")])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("PIN Code")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.address.pin_code))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Email")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.address.email))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Phone")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.address.phone))])])])])]),e._v(" "),s("hr",{staticClass:"box-sep"}),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Father's Name")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.father.name))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Father's Phone")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.father.phone))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Father's Profession")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.father.profession))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Father's Profession")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.father.profession))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Father's Currency")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e._f("currency")(e.student.father.currency)))])])])])]),e._v(" "),s("hr",{staticClass:"box-sep"}),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Mother's Name")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.mother.name))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Mother's Phone")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.mother.phone))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Mother's Profession")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.mother.profession))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Mother's Profession")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.mother.profession))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Mother's Currency")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e._f("currency")(e.student.mother.currency)))])])])])])]),e._v(" "),s("div",{staticClass:"card"},[s("h5",{staticClass:"card-header bg-white"},[e._v("\n                Medical Information\n              ")]),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Blood Group")]),e._v(" "),s("div",{staticClass:"value text-uppercase"},[e._v(e._s(e.student.blood_group))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Disability")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.is_disabled?e.student.disability:"None"))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Major Disease/Illness")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.disease))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Allergy")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.allergy))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Body Marks/Identification Marks")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.body_marks))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Food Habit")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.food_habit))])])]),e._v(" "),s("div",{staticClass:"col-xs-12"},[s("div",{staticClass:"student-field"},[s("div",{staticClass:"label"},[e._v("Additional Remarks")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.student.medical_remarks))])])])])])])]):e._e(),e._v(" "),e.loading||e.success?e._e():s("div",{staticClass:"col-xs-12 col-lg-8"},[s("div",{staticClass:"card card-block text-xs-center card-outline-danger text-danger"},[e._v("\n              "+e._s(e.errors)+"\n            ")])])])])])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"form-group",class:[e.feedbackState]},[e.is(e.title)?s("label",{staticClass:"form-control-label",attrs:{for:e.id}},[e._v(e._s(e.title)+"\n      "),e.required?s("span",{staticClass:"text-danger"},[e._v(" * ")]):e._e()]):e._e(),e._v(" "),s("textarea",{staticClass:"form-control",class:[e.type,e.formControlState],attrs:{type:e.type,id:e.id,rows:"5","described-by":e.helpId,name:e.identifier},domProps:{value:e.value},on:{input:function(t){e.$emit("input",t.target.value)}}}),e._v(" "),e.is(e.feedback)?s("div",{staticClass:"form-control-feedback"},[e._v(e._s(e.feedback))]):e._e(),e._v(" "),e.is(e.subtitle)?s("small",{staticClass:"form-text text-muted",attrs:{id:e.helpId}},[e._v(e._s(e.subtitle))]):e._e()])},staticRenderFns:[]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("layout-box",e._b({},"layout-box",{disableFooter:e.disableFooter}),[a("template",{slot:"context"},[e._t("icon",[a("a",{staticClass:"activity-box-dismiss",attrs:{role:"button"},on:{click:function(t){t.preventDefault(),t.stopPropagation(),e.$emit("close")}}},[a("img",{attrs:{src:s(523)}})])]),e._v(" "),a("div",{staticClass:"activity-box-title-container"},[a("div",{staticClass:"activity-box-title",on:{click:function(t){e.$emit("openTitle")}}},[e._t("title",[e._v(e._s(e.title))])],2),e._v(" "),a("div",{staticClass:"activity-box-subtitle",on:{click:function(t){e.$emit("openSubtitle")}}},[e._t("subtitle",[e._v(e._s(e.subtitle))])],2)])],2),e._v(" "),a("template",{slot:"actions"},[e._t("actions")],2),e._v(" "),a("template",{slot:"footer"},[e._t("footer")],2),e._v(" "),e._t("default")],2)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{directives:[{name:"show",rawName:"v-show",value:e.isLoading,expression:"isLoading"}],staticClass:"pull-to-refresh-container"},[e._t("spinner",[s("i",{class:e.spinnerType})]),e._v(" "),s("div",{directives:[{name:"show",rawName:"v-show",value:!e.isLoading&&e.isComplete&&e.isFirstLoad,expression:"!isLoading && isComplete && isFirstLoad"}],staticClass:"pull-to-refresh-status-prompt"},[e._t("no-results",[e._v("No results :(")])],2),e._v(" "),s("div",{directives:[{name:"show",rawName:"v-show",value:!e.isLoading&&e.isComplete&&!e.isFirstLoad,expression:"!isLoading && isComplete && !isFirstLoad"}],staticClass:"pull-to-refresh-status-prompt"},[e._t("no-more",[e._v("No more data :)")])],2)],2)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("activity-box",{attrs:{title:"Add new group",subtitle:"Make group to coverse better."},on:{close:function(t){e.$router.push({name:"hub.groups"})}}},[s("template",{slot:"actions"},[s("a",{ref:"action",
staticClass:"btn btn-primary",attrs:{role:"button",tabindex:""},on:{click:function(t){t.preventDefault(),t.stopPropagation(),e.createGroup(t)}}},[s("i",{directives:[{name:"tooltip",rawName:"v-tooltip:bottom",value:"Create Group",expression:"'Create Group'",arg:"bottom"}],staticClass:"fa fa-fw fa-save hidden-lg-up"}),e._v(" "),s("span",{staticClass:"hidden-md-down"},[e._v("Create Group")])])]),e._v(" "),s("div",{staticClass:"container py-1"},[s("div",{staticClass:"my-2 text-xs-center"}),e._v(" "),s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.group.name,expression:"group.name"}],attrs:{title:"Name of the group",required:"",feedback:e.errors.name},domProps:{value:e.group.name},on:{input:function(t){e.group.name=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("input-radio",{directives:[{name:"model",rawName:"v-model",value:e.group.type,expression:"group.type"}],attrs:{title:"Group Type",required:"",options:e.groupTypes,feedback:e.errors.type},domProps:{value:e.group.type},on:{input:function(t){e.group.type=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("input-textarea",{directives:[{name:"model",rawName:"v-model",value:e.group.description,expression:"group.description"}],attrs:{title:"Description",feedback:e.errors.description},domProps:{value:e.group.description},on:{input:function(t){e.group.description=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("input-search",e._b({directives:[{name:"model",rawName:"v-model",value:e.query,expression:"query"}],attrs:{title:"Members"},domProps:{value:e.query},on:{suggest:e.onSuggest,select:e.onSelect,input:function(t){e.query=t}}},"input-search",{suggestions:e.suggestions})),e._v(" "),s("div",{staticClass:"row"},e._l(e.members,function(t,a){return s("div",{key:a,staticClass:"col-xs-12 col-lg-6"},[s("person-card",{attrs:{item:t}},[s("a",{directives:[{name:"tooltip",rawName:"v-tooltip",value:e.Remove,expression:"Remove"}],staticClass:"text-muted",attrs:{href:"#"},on:{click:function(s){s.stopPropagation(),s.preventDefault(),e.removeMember(t)}},slot:"actions"},[s("i",{staticClass:"fa fa-fw fa-trash-o"})])])],1)}))],1)])])],2)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("modal",{attrs:{show:e.show},on:{hide:function(t){e.show=!1}}},[e.course?s("div",{staticClass:"card"},[s("h4",{staticClass:"card-header"},[e._v("\n      Course Enrollment\n\n      "),s("button",{directives:[{name:"show",rawName:"v-show",value:e.selected.length,expression:"selected.length"}],ref:"enroll",staticClass:"btn btn-primary float-xs-right",attrs:{type:"button","dissmiss-on-backdrop":!1},on:{click:function(t){t.preventDefault(),e.enroll(t)}}},[e._v("Enroll Now")])]),e._v(" "),s("div",{staticClass:"card-block"},[e.message?s("div",{staticClass:"alert",class:[e.message.success?"alert-success":"alert-danger"]},[e._v("\n        "+e._s(e.message.message)+"\n      ")]):e._e(),e._v(" "),s("input-search",{directives:[{name:"model",rawName:"v-model",value:e.query,expression:"query"}],ref:"students",attrs:{title:"Student",subtitle:"Search a student by name or roll number.",suggestions:e.students},domProps:{value:e.query},on:{suggest:e.onSuggest,select:e.onSelect,input:function(t){e.query=t}}}),e._v(" "),s("div",{staticClass:"row mt-1"},e._l(e.selected,function(t){return s("div",{key:t.id,staticClass:"col-xs-12 col-lg-6"},[s("person-card",{staticStyle:{cursor:"auto"},attrs:{item:t}},[s("small",{staticClass:"fl-auto"},[e._v(e._s(e.department(t))+" · "+e._s(e.discipline(t)))]),e._v(" "),s("a",{attrs:{role:"button"},on:{click:function(s){e.onRemove(t)}}},[s("i",{staticClass:"fa fa-fw fa-trash-o"})])])],1)}))],1)]):e._e()])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",[e.course?s("activity-box",e._b({staticClass:"course-preview",on:{close:function(t){e.$router.push({name:"acad.course",params:{course:e.course.id}})}}},"activity-box",{title:e.title,subtitle:e.subtitle,disableFooter:!0}),[s("div",{staticClass:"container py-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 text-xs-center"},[s("img",{staticClass:"course-preview-photo",attrs:{src:e.course.photo||e.course.session.group.photo}})]),e._v(" "),s("div",{staticClass:"col-xs-12"},[s("h2",{staticClass:"text-xs-center my-2"},[e._v(e._s(e.course.name))]),e._v(" "),s("div",{staticClass:"text-xs-center"},[e.isInstructor?s("a",{staticClass:"btn btn-primary",attrs:{role:"button",tabindex:""},on:{click:e.onAction,enrolled:function(t){e.resetInfinite()}}},[e._v("Enroll Students")]):e._e()]),e._v(" "),s("p")]),e._v(" "),s("div",{staticClass:"col-xs-12"},[s("div",{staticClass:"input-group input-group-lg"},[s("span",{staticClass:"input-group-addon"},[s("i",{staticClass:"fa fa-search"})]),e._v(" "),s("input",{directives:[{name:"model",rawName:"v-model",value:e.q,expression:"q"}],staticClass:"form-control",attrs:{type:"search"},domProps:{value:e._s(e.q)},on:{keyup:e.search,input:function(t){t.target.composing||(e.q=t.target.value)}}})])]),e._v(" "),s("div",{staticClass:"col-xs-12"},[s("div",{staticClass:"text-xs-center group-preview-member-count"},[s("small",[e._v(" "+e._s(e.course.session.student_count_text)+" ")])])])]),e._v(" "),s("div",{staticClass:"row"},[e._l(e.students,function(t){return s("div",{key:t.id,staticClass:"col-xs-12 col-lg-6"},[s("item-card",{attrs:{item:t},on:{open:function(s){e.openProfile(t)}}})],1)}),e._v(" "),s("infinite-scroll",{ref:"infinite",staticClass:"col-xs-12",attrs:{"on-infinite":e.onInfinite}})],2)])])]),e._v(" "),s("course-enrollment",{ref:"enroll"})],1):s("loading-placeholder")],1)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return e.isEmpty?e._e():s("div",{staticClass:"action-menu"},[e.isSpaceAvailable?s("div",{staticClass:"action-menu-actions"},[e._l(e.collapsedActions,function(t,a){return[e._t("action-menu-"+a,[s("a",{staticClass:"action-menu-action",class:[t.action.class],attrs:{href:"#"},on:{click:function(s){s.preventDefault(),e.click(s,t.action,a)}}},[s("i",{staticClass:"fa fa-fw",class:["fa-"+t.action.icon]}),e._v(" "),t.action.showFull?s("span",[e._v(e._s(t.action.name))]):e._e()])])]})],2):e._e(),e._v(" "),e.otherActions.length?s("div",{ref:"dropdown",staticClass:"dropdown"},[s("button",{staticClass:"action-menu-toggler",attrs:{"data-toggle":"dropdown",type:"button",id:e.id,"aria-haspopup":"true","aria-expanded":"false"}},[s("i",{staticClass:"fa fa-fw fa-ellipsis-v"})]),e._v(" "),s("div",{staticClass:"dropdown-menu dropdown-menu-right",attrs:{"aria-labelledby":e.id}},[e._l(e.otherActions,function(t,a){return[e._t("action-menu-"+a,[s("a",{staticClass:"dropdown-item",attrs:{href:"#"},on:{click:function(s){s.preventDefault(),e.click(s,t.action,a)}}},[s("i",{staticClass:"fa fa-fw",class:["fa-"+t.action.icon]}),e._v(" "+e._s(t.action.name)+"\n        ")])])]})],2)]):e._e()])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"group-list"},[s("router-link",{staticClass:"btn text-muted",attrs:{to:{name:"hub.groups"}}},[s("i",{staticClass:"fa fa-plus-square-o fa-fw"}),e._v(" Join a Group\n  ")]),e._v(" "),s("div",{staticClass:"group-list-container"},e._l(e.sortedGroups,function(t,a){return s("div",{key:a,staticClass:"group-list-item",class:{active:e.activeId===t.id},on:{click:function(s){e.onGroupSelected(t,a,s)}}},[s("img",{staticClass:"group-list-photo",attrs:{src:t.photo}}),e._v(" "),s("div",{staticClass:"group-list-name",class:{unread:t.has_unread}},[e._v("\n        "+e._s(t.name)+"\n      ")]),e._v(" "),t.unread_count>0?s("div",{staticClass:"group-list-unread-count"},[s("span",{staticClass:"tag tag-default"},[e._v("\n          "+e._s(t.unread_count)+"\n        ")])]):e._e()])}))],1)},staticRenderFns:[]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"card person-card",on:{click:function(t){t.preventDefault(),e.$emit("open")}}},[a("div",{staticClass:"card-block person-card-block"},[a("img",{staticClass:"person-card-img",class:[e.item._type],attrs:{src:s(99),src:e.item.photo}}),e._v(" "),a("div",{staticClass:"person-card-info-container"},[a("div",{staticClass:"person-card-name"},[e._v(e._s(e.item.name))]),e._v(" "),a("div",{staticClass:"person-card-meta-container fl"},[e._t("default",[a("div",{staticClass:"person-card-bio text-capitalize"},[e._v(" "+e._s(e.item.type)+" · "+e._s(e.item.department)+"  ")])])],2)]),e._v(" "),a("div",{staticClass:"person-card-actions"},[e._t("actions")],2)])])},staticRenderFns:[]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("activity-box",e._b({on:{close:function(t){e.$emit("close")}}},"activity-box",{title:e.title,subtitle:e.subtitle,disableFooter:!0}),[a("template",{slot:"icon"},[a("img",{attrs:{src:s(524)}})]),e._v(" "),a("div",{staticClass:"container"},[a("div",{staticClass:"directory-header row"},[a("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2 my-2"},[a("div",{staticClass:"input-group input-group-lg"},[a("span",{staticClass:"input-group-addon"},[a("i",{staticClass:"fa fa-search"})]),e._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:e.q,expression:"q"}],staticClass:"form-control",attrs:{type:"search"},domProps:{value:e._s(e.q)},on:{keyup:function(t){e.$emit("search",e.q)},input:function(t){t.target.composing||(e.q=t.target.value)}}})])])]),e._v(" "),a("div",{staticClass:"row directory-results-container"},[a("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[a("div",{staticClass:"row"},[a("div",{staticClass:"col-xs-12 directory-results-description"},[e._v(e._s(e.resultMessage))])]),e._v(" "),a("div",{staticClass:"row"},[e._l(e.filtered,function(t,s){return a("div",{staticClass:"col-xs-12 col-md-6"},[a(e.component,{tag:"div",attrs:{item:t},on:{open:function(a){e.$emit("item",t,s)}}})])}),e._v(" "),a("infinite-scroll",{ref:"infinite",staticClass:"col-xs-12",attrs:{"on-infinite":e.onInfinite,spinner:"waveDots"}})],2)])])])],2)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"profile-photo-uploader",on:{click:function(t){e.$refs.file.click()}}},[e._t("default"),e._v(" "),s("input",{ref:"file",attrs:{type:"file",hidden:""},on:{change:e.onFileSelected}}),e._v(" "),e.cropping?s("div",{staticClass:"backdrop"},[s("activity-box",e._b({},"activity-box",{title:e.title,subtitle:e.subtitle}),[s("img",{attrs:{src:e.image}}),e._v(" "),s("div",{staticClass:"text-xs-center"},[s("button",{staticClass:"btn btn-primary",attrs:{type:"button"},on:{click:e.cropAndUpload}},[e._v("Crop")])])])],1):e._e(),e._v(" "),e.uploading?s("div",{staticClass:"uploading"},[s("progress",{staticClass:"progress mb-0",attrs:{value:e.progress,max:"100"}},[s("div",{staticClass:"progress"},[s("span",{staticClass:"progress-bar",style:{width:e.progress+"%"}})])])]):e._e(),e._v(" "),e.empty?s("div",{staticClass:"overlay"},[e._m(0)]):e._e()],2)},staticRenderFns:[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"upload-trigger"},[s("div",[s("i",{staticClass:"fa fa-arrow-circle-up fa-3x mt-2 mb-1"})]),e._v(" "),s("span",[e._v("Click to Upload")])])}]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("settings-box",{attrs:{title:"Course Manager",subtitle:"Assign Course Manager/Administrator"}},[e.addedManagers.length?a("template",{slot:"actions"},[a("div",{staticClass:"btn btn-default",attrs:{role:"button"},on:{click:e.onCancel}},[e._v(" Cancel ")]),e._v(" "),a("div",{staticClass:"btn btn-primary",attrs:{role:"button"},on:{click:e.onSave}},[e._v(" Save ")])]):e._e(),e._v(" "),a("template",{slot:"header-image"},[a("img",{attrs:{src:s(530)}})]),e._v(" "),a("template",{slot:"name"},[e._v("\n        Course Manager\n    ")]),e._v(" "),a("template",{slot:"description"},[e._v("\n        He/she is responsible to add courses and assign teachers/coordinator to respective courses.\n\n        "),e.message?a("div",{staticClass:"alert alert-danger"},[e._v(e._s(e.message))]):e._e()]),e._v(" "),a("template",{slot:"settings-body"},[a("div",{staticClass:"col-xs-12 col-lg-12 search-wrapper"},[a("div",{staticClass:"input-group input-group-lg"},[a("input-search",e._b({directives:[{name:"model",rawName:"v-model",value:e.query,expression:"query"}],staticClass:"form-control teacher-search",attrs:{title:""},domProps:{value:e.query},on:{suggest:e.onSuggest,select:e.onSelect,input:function(t){e.query=t}}},"input-search",{suggestions:e.suggestions}))],1),e._v(" "),e.addedManagers.length?a("div",{staticClass:"manager-list my-1"},[a("div",{staticClass:"mb-1"},[a("small",{staticClass:"text-muted"},[e._v("Add new Course Manager")])]),e._v(" "),a("div",{staticClass:"row"},e._l(e.addedManagers,function(t,s){return a("div",{staticClass:"col-xs-12 col-lg-6"},[a("item-card",{attrs:{item:t},on:{open:function(a){e.openMemberProfile(t,s)}}},[t.bio?e._e():a("div",{staticClass:"person-card-bio"},[e._v(" Profile not updated ")])])],1)}))]):e._e(),e._v(" "),a("div",{staticClass:"manager-list my-1"},[a("div",{staticClass:"mb-1"},[e.addedManagers.length?a("small",{staticClass:"text-muted"},[e._v("Existing Course Manager")]):e._e()]),e._v(" "),a("div",{staticClass:"row"},e._l(e.managers,function(t,s){return a("div",{staticClass:"col-xs-12 col-lg-6"},[a("item-card",{attrs:{item:t},on:{open:function(a){e.openMemberProfile(t,s)}}},[t.bio?e._e():a("div",{staticClass:"person-card-bio"},[e._v(" Profile not updated ")])])],1)}))])])])],2)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return e.showing?s("div",{staticClass:"custom-modal"},[s("div",{staticClass:"backdrop"}),e._v(" "),s("div",{ref:"wrapper",staticClass:"wrapper",class:[e.wrapper],on:{click:function(t){t.stopPropagation(),e.onWrapper(t)}}},[e._t("default")],2),e._v(" "),e.dismissable?s("a",{staticClass:"dissmiss",attrs:{role:"button"},on:{click:function(t){t.preventDefault(),e.$emit("hide")}}},[e._v("×")]):e._e()]):e._e()},staticRenderFns:[]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container hub-container"},[a("div",{staticClass:"row hub-body"},[a("div",{ref:"sidebarLeft",staticClass:"col-xs-12 col-lg-2 hub-sidebar-left fl fl-ver py-1",on:{click:e.closeSidebar}},[e.user.permissions&&e.user.permissions.courses?a("router-link",{staticClass:"btn btn-text text-xs-left",attrs:{to:{name:"acad"}}},[a("img",{attrs:{src:s(527)}}),e._v(" Manage Courses\n\n      ")]):e._e(),e._v(" "),a("course-list"),e._v(" "),a("div",{staticClass:"btn-group my-1 d-block tab-buttons"},[a("a",{staticClass:"btn btn-outline-secondary",class:{active:!e.browseUsers},attrs:{role:"button"},on:{click:function(t){t.stopPropagation(),t.preventDefault(),e.browseUsers=!1}}},[e._v("\n          Groups "),e.countGroupMessages>0?a("span",{staticClass:"tag tag-default"},[e._v(e._s(e.countGroupMessages))]):e._e()]),e._v(" "),a("a",{staticClass:"btn btn-outline-secondary",class:{active:e.browseUsers},attrs:{role:"button"},on:{click:function(t){t.stopPropagation(),t.preventDefault(),e.browseUsers=!0}}},[e._v("\n          Private "),e.countUserMessages>0?a("span",{staticClass:"tag tag-default"},[e._v(e._s(e.countUserMessages))]):e._e()])]),e._v(" "),a("group-list",{directives:[{name:"show",rawName:"v-show",value:!e.browseUsers,expression:"!browseUsers"}]}),e._v(" "),a("user-list",{directives:[{name:"show",rawName:"v-show",value:e.browseUsers,expression:"browseUsers"}]})],1),e._v(" "),a("div",{staticClass:"col-xs-12 col-lg-10 hub-content"},[a("router-view")],1)])])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("activity-box",{attrs:{title:"Manage Courses",subtitle:"Add/remove/manage coures"}},[s("template",{slot:"icon"}),e._v(" "),s("template",{slot:"actions"},[s("router-link",{staticClass:"btn btn-primary",attrs:{to:{name:"acad.create"}}},[s("i",{directives:[{name:"tooltip",rawName:"v-tooltip",value:"Add Course",expression:"'Add Course'"}],staticClass:"fa fa-fw fa-plus"}),e._v(" "),s("span",{staticClass:"hidden-md-down"},[e._v("Add Course")])])],1),e._v(" "),s("div",{staticClass:"container"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 py-2"},[s("div",{staticClass:"input-group input-group-lg"},[s("span",{staticClass:"input-group-addon"},[s("i",{staticClass:"fa fa-search"})]),e._v(" "),s("input",{directives:[{name:"model",rawName:"v-model",value:e.q,expression:"q"}],staticClass:"form-control",attrs:{type:"search",placeholder:"Search courses"},domProps:{value:e._s(e.q)},on:{keyup:function(t){e.$emit("search",e.q)},input:function(t){t.target.composing||(e.q=t.target.value)}}})])])]),e._v(" "),s("div",{staticClass:"row"},e._l(e.courses,function(t){return s("div",{staticClass:"col-xs-12 col-lg-6"},[s("div",{staticClass:"card card-block",attrs:{role:"button"},on:{click:function(s){e.openCourse(t)}}},[s("h6",[e._v(e._s(t.name)+" "),s("small",[e._v("("+e._s(t.code)+")")])]),e._v(" "),e._l(t.instructors.data,function(t){return s("small",{staticClass:"text-muted d-block"},[e._v(e._s(t.name))])}),e._v(" "),t.instructors.data.length?e._e():s("small",{staticClass:"text-muted d-block"},[e._v(" Instructor not assigned ")])],2)])}))])])]),e._v(" "),s("modal",{attrs:{show:e.showCourse},on:{hide:function(t){e.course=null}}},[e.course?s("div",{staticClass:"card card-block"},[s("div",{staticClass:"card-title text-primary course-title"},[e._v(e._s(e.course.name))]),e._v(" "),s("div",{staticClass:"small"},[e._v("\n        "+e._s(e.department)+" · "+e._s(e.discipline)+" · "+e._s(e.course.year_text)+" · "+e._s(e.semester)+"\n      ")]),e._v(" "),s("div",{staticClass:"text-muted pt-2"},[e._v("\n        Course Instructor\n      ")]),e._v(" "),s("div",{staticClass:"row"},e._l(e.course.instructors.data,function(e){return s("div",{staticClass:"col-xs-12 col-lg-6"},[s("person-card",{attrs:{item:e}})],1)})),e._v(" "),e.course.prerequisites.data.length?s("div",[s("div",{staticClass:"text-muted pt-2"},[e._v("\n          Course Prerequisites\n        ")]),e._v(" "),s("div",{staticClass:"row"},e._l(e.course.prerequisites.data,function(t){return s("div",{staticClass:"col-xs-12 col-lg-6"},[s("div",{staticClass:"card card-block"},[s("h6",[e._v(e._s(t.course.name))]),e._v(" "),s("small",{staticClass:"text-muted d-block"},[e._v(e._s(t.course.code))])])])}))]):e._e(),e._v(" "),s("div",{staticClass:"pt-2"},[s("router-link",{staticClass:"btn btn-secondary",attrs:{to:{name:"acad.edit",params:{course:e.course.id}}}},[e._v("Update Details")])],1)]):e._e()])],2)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("window-box",{attrs:{title:"Teachers",subtitle:"Search teachers"}},[s("div",{slot:"header"},[s("a",{staticClass:"btn btn-secondary",attrs:{role:"button"},on:{click:function(t){t.preventDefault(),e.$router.go(-1)}}},[s("i",{staticClass:"fa fa-fw fa-arrow-left"}),e._v(" Back\n    ")])]),e._v(" "),s("div",{staticClass:"teacher-search-container"},[s("div",{staticClass:"container"},[s("h3",{staticClass:"text-xs-center"},[e._v("Teachers")]),e._v(" "),s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-md-6 offset-md-3 m-t-1"},[s("input-search",e._b({directives:[{name:"model",rawName:"v-model",value:e.query,expression:"query"}],attrs:{component:"search-option-person"},domProps:{value:e.query},on:{suggest:e.onSearchInput,search:e.onSearch,select:e.onSelect,input:function(t){e.query=t}}},"input-search",{suggestions:e.suggestions}))],1)]),e._v(" "),s("p",{staticClass:"text-xs-center"},[e._v("\n              Find teachers by their teacher ID or name.\n          ")])])]),e._v(" "),s("div",{staticClass:"container people-d-links"},[s("div",{staticClass:"card text-xs-center"},[s("div",{staticClass:"card-block"},[s("h5",[e._v("Departments")]),e._v(" "),e._l(e.departments.filter(function(e){return e.academic}),function(t){return s("div",{staticClass:"item"},[s("router-link",{staticClass:"btn btn-secondary",attrs:{to:{name:"teacher.find",query:{department:[t.id]}}}},[e._v("\n                      "+e._s(t.name)+"\n                  ")])],1)})],2)])])])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",[e.context?s("message-box",{attrs:{title:e.context.name,subtitle:e.context.bio,photo:e.context.photo},on:{openTitle:e.openUserPreview,openSubtitle:e.openUserPreview,openPhoto:e.openUserPreview}},[s("message-list",{ref:"list",attrs:{messages:e.context.messages,loading:e.loading,"all-loaded":e.allLoaded},on:{"load-more":e.loadMore,seen:e.markMessagesSeen}}),e._v(" "),s("message-editor",{directives:[{name:"model",rawName:"v-model",value:e.message,expression:"message"}],ref:"input",attrs:{dest:"messages/attachment"},domProps:{value:e.message},on:{send:e.send,focused:e.markMessagesSeen,input:function(t){e.message=t}},slot:"footer"})],1):s("loading-placeholder")],1)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("window-box",{attrs:{title:"Find Employees",subtitle:"View employees and new employee requests"}},[s("div",{staticClass:"container py-1 employee-list"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-3"},[s("div",{staticClass:"card card-block"},[s("label",{staticClass:"custom-control custom-checkbox text-danger mb-0"},[s("input",{directives:[{name:"model",rawName:"v-model",value:e.reviewingRequests,expression:"reviewingRequests"}],staticClass:"custom-control-input",attrs:{type:"checkbox"},domProps:{checked:Array.isArray(e.reviewingRequests)?e._i(e.reviewingRequests,null)>-1:e.reviewingRequests},on:{click:function(t){var s=e.reviewingRequests,a=t.target,n=!!a.checked;if(Array.isArray(s)){var i=null,r=e._i(s,i);n?r<0&&(e.reviewingRequests=s.concat(i)):r>-1&&(e.reviewingRequests=s.slice(0,r).concat(s.slice(r+1)))}else e.reviewingRequests=n}}}),e._v(" "),s("span",{staticClass:"custom-control-indicator"}),e._v(" "),s("span",{staticClass:"custom-control-description"},[e._v("New Requests")])])]),e._v(" "),s("div",{staticClass:"card card-block",class:{"hidden-sm-down":e.reviewingRequests}},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-12"},[s("h6",{staticClass:"text-muted"},[e._v("Department")]),e._v(" "),s("fieldset",{attrs:{disabled:e.reviewingRequests}},[s("div",{staticClass:"custom-controls-stacked"},e._l(e.departments,function(t){return s("label",{staticClass:"custom-control custom-checkbox"},[s("input",{directives:[{name:"model",rawName:"v-model",value:e.department,expression:"department"}],staticClass:"custom-control-input",attrs:{name:"department",type:"checkbox"},domProps:{value:t.id,checked:Array.isArray(e.department)?e._i(e.department,t.id)>-1:e.department},on:{click:function(s){var a=e.department,n=s.target,i=!!n.checked;if(Array.isArray(a)){var r=t.id,o=e._i(a,r);i?o<0&&(e.department=a.concat(r)):o>-1&&(e.department=a.slice(0,o).concat(a.slice(o+1)))}else e.department=i}}}),e._v(" "),s("span",{staticClass:"custom-control-indicator"}),e._v(" "),s("span",{staticClass:"custom-control-description"},[e._v(e._s(t.name))])])}))])])])])]),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-9"},[s("div",{staticClass:"form-group"},[s("div",{staticClass:"input-group"},[s("span",{staticClass:"input-group-addon search-box"},[s("i",{staticClass:"fa fa-fw fa-search"})]),e._v(" "),s("input",{directives:[{name:"model",rawName:"v-model",value:e.query,expression:"query"}],staticClass:"form-control form-control-lg search-box",attrs:{type:"text",placeholder:"Start typing..."},domProps:{value:e._s(e.query)},on:{input:function(t){t.target.composing||(e.query=t.target.value)}}})])]),e._v(" "),s("div",{staticClass:"card"},[s("div",{staticClass:"card-header bg-white"},[s("div",{staticClass:"title"},[e._v(e._s(e.searchText))]),e._v(" "),s("div",{staticClass:"text-muted"},[e._v("\n              "+e._s(e.countText)+"\n            ")])]),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[e._l(e.employees,function(t){return s("div",{key:t.id,staticClass:"col-xs-12 col-lg-6 employee-card"},[s("person-card",{attrs:{item:t},on:{open:function(s){e.$router.push({name:"employee.profile",params:{employee:t.uid}})}}})],1)}),e._v(" "),s("div",{staticClass:"col-xs-12"},[s("infinite-loader",{on:{load:e.onLoad}})],1)],2)])])])])])])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return e.values?s("activity-box",e._b({attrs:{subtitle:"Update group details."},on:{close:function(t){e.$router.push({name:"hub.group-preview",params:{group:e.group.id}})}}},"activity-box",{title:e.title,disableFooter:!0}),[s("template",{slot:"actions"},[s("a",{ref:"action",staticClass:"btn btn-primary",attrs:{role:"button",tabindex:""},on:{click:function(t){t.preventDefault(),t.stopPropagation(),e.updateGroup(t)}}},[s("i",{directives:[{name:"tooltip",rawName:"v-tooltip:bottom",value:"Update Group",expression:"'Update Group'",arg:"bottom"}],staticClass:"fa fa-fw fa-cloud-upload hidden-lg-up"}),e._v(" "),s("span",{staticClass:"hidden-md-down"},[e._v("Update Group")])])]),e._v(" "),s("div",{staticClass:"container py-1"},[s("div",{staticClass:"my-2 text-xs-center"}),e._v(" "),s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.values.name,expression:"values.name"}],attrs:{title:"Name of the group",required:"",feedback:e.errors.name},domProps:{value:e.values.name},on:{input:function(t){e.values.name=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("input-radio",{directives:[{name:"model",rawName:"v-model",value:e.values.type,expression:"values.type"}],attrs:{title:"Group Type",required:"",options:e.groupTypes,feedback:e.errors.type},domProps:{value:e.values.type},on:{input:function(t){e.values.type=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("input-textarea",{directives:[{name:"model",rawName:"v-model",value:e.values.description,expression:"values.description"}],attrs:{title:"Description",feedback:e.errors.description},domProps:{value:e.values.description},on:{input:function(t){e.values.description=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("input-search",e._b({directives:[{name:"model",rawName:"v-model",value:e.query,expression:"query"}],attrs:{title:"Add Members"},domProps:{value:e.query},on:{suggest:e.onSuggest,select:e.onSelect,input:function(t){e.query=t}}},"input-search",{suggestions:e.suggestions})),e._v(" "),s("div",{staticClass:"row"},[e._l(e.members,function(t,a){return s("div",{key:a,staticClass:"col-xs-12 col-lg-6"},[s("person-card",{attrs:{item:t}},[e.isAdmin(t)?e._e():s("a",{directives:[{name:"tooltip",rawName:"v-tooltip",value:"Remove",expression:"'Remove'"}],staticClass:"text-muted",attrs:{href:"#"},on:{click:function(s){s.stopPropagation(),s.preventDefault(),e.removeMember(t)}},slot:"actions"},[s("i",{staticClass:"fa fa-fw fa-trash-o"})])])],1)}),e._v(" "),s("infinite-scroll",{ref:"infinite",staticClass:"col-xs-12",attrs:{"on-infinite":e.onInfinite}})],2)],1)])])],2):s("loading-placeholder")},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"search-option",domProps:{innerHTML:e._s(e.name)}})},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"message-container fl"},[e._t("sender-photo",[s("img",{staticClass:"message-sender-photo",class:[e.message.sender._type],attrs:{src:"assets/people.jpg",src:e.message.sender.photo},on:{click:function(t){t.stopPropagation(),t.preventDefault(),e.onSenderProfile(e.message.sender)}}})]),e._v(" "),e._t("message",[s("div",{staticClass:"message-box fl-auto"},[s("div",{staticClass:"message-meta",class:{"text-danger":e.message.failed===!0}},[e._t("message-meta",[s("a",{staticClass:"message-sender-name",attrs:{role:"button"},on:{click:function(t){t.stopPropagation(),t.preventDefault(),e.onSenderProfile(e.message.sender)}}},[e._v(e._s(e.message.sender.name))]),e._v("\n          ·\n          "),s("time",{staticClass:"message-received-at"},[e._v(e._s(e._f("time")(e.message.received_at)))]),e._v(" "),e.message.sending?s("i",{staticClass:"fa fa-fw fa-circle-o-notch fa-spin bg-faded text-muted"}):e._e(),e._v(" "),e.message.failed?s("i",{staticClass:"fa fa-fw fa- fa-spin text-danger"}):e._e()])],2),e._v(" "),s("div",{staticClass:"message-content"},[s("span",{domProps:{innerHTML:e._s(e.content)}}),e._v(" "),e.message.attachments?s("message-attachment",{attrs:{message:e.message}}):e._e(),e._v(" "),e._t("default")],2)])])],2)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"layout-box"},[s("div",{staticClass:"layout-box-header"},[e._t("header",[e._t("context"),e._v(" "),s("div",{staticClass:"layout-box-actions-container"},[e._t("actions")],2)])],2),e._v(" "),s("div",{staticClass:"layout-box-body"},[e._t("default")],2),e._v(" "),e.isFooterDisabled?e._e():s("div",{staticClass:"layout-box-footer"},[e._t("footer")],2)])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("window-box",{attrs:{title:"Teacher Profile",subtitle:"See profile here..."}},[s("div",{staticClass:"container my-1"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-4 text-xs-center"},[s("div",{ref:"sidebar",staticClass:"card"},[s("img",{staticClass:"card-img-top teacher-photo",attrs:{src:e.teacher.photo}}),e._v(" "),s("div",{staticClass:"card-block"},[s("h3",{staticClass:"value"},[e._v(e._s(e.teacher.name))]),e._v(" "),e.teacher.uid?s("span",[s("span",{staticClass:"text-muted"},[e._v("Employee ID:")]),e._v(" "+e._s(e.teacher.uid)),s("br")]):e._e(),e._v(" "),e.teacher.email?s("span",[s("span",{staticClass:"text-muted"},[e._v("Email:")]),e._v(" "+e._s(e.teacher.email))]):e._e()]),e._v(" "),s("hr",{staticClass:"m-0"}),e._v(" "),e.teacher.user_id?s("div",{staticClass:"card-block"},[s("router-link",{staticClass:"card-link",attrs:{to:{name:"hub.user",params:{user:e.teacher.user_id}}}},[e._v("\n                  Send Message\n                ")])],1):e._e()])]),e._v(" "),e.loading?s("div",{staticClass:"col-xs-12 col-lg-8"},[s("loading-placeholder")],1):e._e(),e._v(" "),e.success?s("div",{staticClass:"col-xs-12 col-lg-8"},[s("div",{staticClass:"card"},[s("h5",{staticClass:"card-header bg-white"},[e._v("\n                Person Information\n              ")]),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Name")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.name))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Gender")]),e._v(" "),s("div",{staticClass:"value text-capitalize"},[e._v(e._s(e.teacher.gender))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Date of Birth")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e._f("dateForHumans")(e.teacher.date_of_birth)))])])]),e._v(" "),s("div",{
staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Category")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.category))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("AADHAR ID")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.govt_id))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Passport")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.passport))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Religion")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.religion))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Mother Tongue")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.language))])])])])])]),e._v(" "),s("div",{staticClass:"card"},[s("h5",{staticClass:"card-header bg-white"},[e._v("\n                Related to School\n              ")]),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("teacher UID (Roll Number)")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.uid))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Date of Admission")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e._f("dateForHumans")(e.teacher.date_of_admission)))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Department")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.department.name))])])])])])]),e._v(" "),s("div",{staticClass:"card"},[s("h5",{staticClass:"card-header bg-white"},[e._v("\n                Contact Information\n              ")]),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Address")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.address?e.teacher.address.address_line1+", "+e.teacher.address.address_line2:"")+"\n                            ")])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Landmark")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.address.landmark))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("City")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.address.city?e.teacher.address.city.name+", "+e.teacher.address.city.state.name:"")+"\n                            ")])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("PIN Code")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.address.pin_code))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Email")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.address.email))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Phone")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.address.phone))])])])])])]),e._v(" "),s("div",{staticClass:"card"},[s("h5",{staticClass:"card-header bg-white"},[e._v("\n                Medical Information\n              ")]),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Blood Group")]),e._v(" "),s("div",{staticClass:"value text-uppercase"},[e._v(e._s(e.teacher.blood_group))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Disability")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.is_disabled?e.teacher.disability:"None"))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Major Disease/Illness")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.disease))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Allergy")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.allergy))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Body Marks/Identification Marks")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.body_marks))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Food Habit")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.food_habit))])])]),e._v(" "),s("div",{staticClass:"col-xs-12"},[s("div",{staticClass:"teacher-field"},[s("div",{staticClass:"label"},[e._v("Additional Remarks")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.teacher.medical_remarks))])])])])])])]):e._e(),e._v(" "),e.loading||e.success?e._e():s("div",{staticClass:"col-xs-12 col-lg-8"},[s("div",{staticClass:"card card-block text-xs-center card-outline-danger text-danger"},[e._v("\n              "+e._s(e.errors)+"\n            ")])])])])])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"user-list"},[s("router-link",{staticClass:"btn text-muted",staticStyle:{"padding-left":"0.25rem"},attrs:{to:{name:"hub.users"}}},[s("i",{staticClass:"fa fa-plus-square-o fa-fw"}),e._v(" New Conversation\n  ")]),e._v(" "),s("div",{staticClass:"user-list-container"},e._l(e.sortedUsers,function(t,a){return s("div",{staticClass:"user-list-item",class:{active:e.activeId===t.id},on:{click:function(s){e.onUserSelected(t,a,s)}}},[s("img",{staticClass:"user-list-photo",attrs:{src:t.photo}}),e._v(" "),s("div",{staticClass:"user-list-name",class:{unread:t.has_unread}},[e._v("\n        "+e._s(t.name)+"\n      ")])])}))],1)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"new-message-separator"},[s("hr"),e._v(" "),s("div",{staticClass:"new-message-content"},[e._v(e._s(e.text))]),e._v(" "),s("hr")])},staticRenderFns:[]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"dropdown",attrs:{id:e.id}},[a("a",{staticClass:"btn navbar-toggler",attrs:{href:"#",id:e.toggler,"data-toggle":"dropdown","aria-haspopup":"true",role:"button","aria-expanded":"false","data-target":"#"+e.id}},[a("img",{attrs:{src:s(516),alt:"Menu"}})]),e._v(" "),a("div",{staticClass:"dropdown-menu dropdown-menu-right",attrs:{"aria-labelledby":"#"+e.toggler}},[a("h6",{staticClass:"dropdown-header text-uppercase m-y-1 text-xs-center"},[e._v("Select any one")]),e._v(" "),a("hr",{staticClass:"mb-0"}),e._v(" "),a("div",{staticClass:"app-menu-container"},[e._l(e.apps,function(t){return a("router-link",{staticClass:"app-launcher text-xs",attrs:{to:t.link,role:"menuitem",disabled:t.locked===!0}},[a("img",{staticClass:"app-icon",attrs:{src:t.icon}}),e._v(" "),t.locked===!0?a("div",{directives:[{name:"tooltip",rawName:"v-tooltip:bottom",value:"Coming soon!",expression:"'Coming soon!'",arg:"bottom"}],staticClass:"app-label"},[e._v("\n                    "+e._s(t.name)+" "),a("i",{staticClass:"fa fa-fw fa-lock"})]):a("div",{staticClass:"app-label"},[e._v(e._s(t.name))])])}),e._v(" "),0===e.apps.length?a("div",{staticClass:"p-y-2 text-xs-center"},[a("span",[e._v("No apps")])]):e._e()],2)])])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"group-messages-wrapper"},[e.context?s("message-box",{attrs:{title:e.context.name,subtitle:"Click here to open group information",photo:e.context.photo,type:"group"},on:{openSubtitle:e.openTitle,openPhoto:e.openTitle,openTitle:e.openTitle}},[s("message-list",{ref:"messages",attrs:{messages:e.context.messages},on:{"load-more":e.getOlderMessages,seen:e.markMessagesSeen}}),e._v(" "),s("message-editor",{directives:[{name:"model",rawName:"v-model",value:e.message,expression:"message"}],ref:"input",attrs:{dest:"groups/"+e.context.id+"/attachment"},domProps:{value:e.message},on:{send:e.send,focused:e.markMessagesSeen,input:function(t){e.message=t}},slot:"footer"})],1):s("loading-placeholder")],1)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return e.courses.length?s("div",{staticClass:"course-list my-1"},[s("div",{staticClass:"course-list-container"},e._l(e.courses,function(t,a){return s("div",{key:t.id,staticClass:"course-list-item",class:{active:e.activeId===t.id},on:{click:function(s){e.onGroupSelected(t,a,s)}}},[s("img",{staticClass:"course-list-photo",attrs:{src:t.session.group.photo}}),e._v(" "),s("div",{staticClass:"course-list-name",class:{unread:t.session.group.has_unread}},[s("span",{directives:[{name:"tooltip",rawName:"v-tooltip:right",value:t.name,expression:"course.name",arg:"right"}]},[e._v(e._s(t.code))])]),e._v(" "),t.session.group.unread_count>0?s("div",{staticClass:"course-list-unread-count"},[s("span",{staticClass:"tag tag-default"},[e._v("\n          "+e._s(t.session.group.unread_count)+"\n        ")])]):e._e()])}))]):e._e()},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"group-messages-wrapper"},[e.context?s("message-box",{attrs:{title:e.course.name,subtitle:"Click here to open group information",photo:e.course.session.group.photo,type:"group"},on:{openSubtitle:e.openTitle,openPhoto:e.openTitle,openTitle:e.openTitle}},[s("message-list",{ref:"messages",attrs:{messages:e.context.messages},on:{"load-more":e.getOlderMessages,seen:e.markMessagesSeen}}),e._v(" "),s("message-editor",{directives:[{name:"model",rawName:"v-model",value:e.message,expression:"message"}],ref:"input",attrs:{dest:"groups/"+e.context.id+"/attachment"},domProps:{value:e.message},on:{send:e.send,focused:e.markMessagesSeen,input:function(t){e.message=t}},slot:"footer"})],1):s("loading-placeholder")],1)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"form-group",class:[e.feedbackState]},[e.is(e.title)?s("label",{staticClass:"form-control-label",attrs:{for:e.id}},[e._v(e._s(e.title)+"\n       "),e.required?s("span",{staticClass:"text-danger"},[e._v(" * ")]):e._e()]):e._e(),e._v(" "),s("input",{staticClass:"form-control",class:[e.formControlState],attrs:{type:e.type,id:e.id,"described-by":e.helpId,name:e.identifier,placeholder:e.placeholder},domProps:{value:e.value},on:{input:function(t){e.$emit("input",t.target.value)}}}),e._v(" "),e.is(e.feedback)?s("div",{staticClass:"form-control-feedback"},[e._v(e._s(e.feedback))]):e._e(),e._v(" "),e.is(e.subtitle)?s("small",{staticClass:"form-text text-muted",attrs:{id:e.helpId}},[e._v(e._s(e.subtitle))]):e._e()])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("window-box",{attrs:{title:"Employee Profile",subtitle:"See profile here..."}},[s("div",{staticClass:"container my-1"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-4 text-xs-center"},[s("div",{ref:"sidebar",staticClass:"card"},[s("img",{staticClass:"card-img-top employee-photo",attrs:{src:e.employee.photo}}),e._v(" "),s("div",{staticClass:"card-block"},[s("h3",{staticClass:"value"},[e._v(e._s(e.employee.name))]),e._v(" "),e.employee.uid?s("span",[s("span",{staticClass:"text-muted"},[e._v("Employee ID:")]),e._v(" "+e._s(e.employee.uid)),s("br")]):e._e(),e._v(" "),e.employee.email?s("span",[s("span",{staticClass:"text-muted"},[e._v("Email:")]),e._v(" "+e._s(e.employee.email))]):e._e()]),e._v(" "),s("hr",{staticClass:"m-0"}),e._v(" "),e.employee.user_id?s("div",{staticClass:"card-block"},[s("router-link",{staticClass:"card-link",attrs:{to:{name:"hub.user",params:{user:e.employee.user_id}}}},[e._v("\n                  Send Message\n                ")])],1):e._e()])]),e._v(" "),e.loading?s("div",{staticClass:"col-xs-12 col-lg-8"},[s("loading-placeholder")],1):e._e(),e._v(" "),e.success?s("div",{staticClass:"col-xs-12 col-lg-8"},[s("div",{staticClass:"card"},[s("h5",{staticClass:"card-header bg-white"},[e._v("\n                Person Information\n              ")]),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Name")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.name))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Gender")]),e._v(" "),s("div",{staticClass:"value text-capitalize"},[e._v(e._s(e.employee.gender))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Date of Birth")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e._f("dateForHumans")(e.employee.date_of_birth)))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Category")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.category))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("AADHAR ID")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.govt_id))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Passport")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.passport))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Religion")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.religion))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Mother Tongue")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.language))])])])])])]),e._v(" "),s("div",{staticClass:"card"},[s("h5",{staticClass:"card-header bg-white"},[e._v("\n                Related to School\n              ")]),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("employee UID (Roll Number)")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.uid))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Date of Admission")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e._f("dateForHumans")(e.employee.date_of_admission)))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Department")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.department.name))])])])])])]),e._v(" "),s("div",{staticClass:"card"},[s("h5",{staticClass:"card-header bg-white"},[e._v("\n                Contact Information\n              ")]),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Address")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.address?e.employee.address.address_line1+", "+e.employee.address.address_line2:"")+"\n                            ")])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Landmark")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.address.landmark))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("City")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.address.city?e.employee.address.city.name+", "+e.employee.address.city.state.name:"")+"\n                            ")])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("PIN Code")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.address.pin_code))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Email")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.address.email))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Phone")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.address.phone))])])])])])]),e._v(" "),s("div",{staticClass:"card"},[s("h5",{staticClass:"card-header bg-white"},[e._v("\n                Medical Information\n              ")]),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Blood Group")]),e._v(" "),s("div",{staticClass:"value text-uppercase"},[e._v(e._s(e.employee.blood_group))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Disability")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.is_disabled?e.employee.disability:"None"))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Major Disease/Illness")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.disease))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Allergy")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.allergy))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Body Marks/Identification Marks")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.body_marks))])])]),e._v(" "),s("div",{staticClass:"col-xs-6 col-md-4"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Food Habit")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.food_habit))])])]),e._v(" "),s("div",{staticClass:"col-xs-12"},[s("div",{staticClass:"employee-field"},[s("div",{staticClass:"label"},[e._v("Additional Remarks")]),e._v(" "),s("div",{staticClass:"value"},[e._v(e._s(e.employee.medical_remarks))])])])])])])]):e._e(),e._v(" "),e.loading||e.success?e._e():s("div",{staticClass:"col-xs-12 col-lg-8"},[s("div",{staticClass:"card card-block text-xs-center card-outline-danger text-danger"},[e._v("\n              "+e._s(e.errors)+"\n            ")])])])])])},staticRenderFns:[]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("nav",{staticClass:"navbar navbar-fixed-top navbar-dark bg-accent"},[a("div",{staticClass:"container navbar-container fl"},[a("a",{staticClass:"navbar-brand nav-sidebar hidden-lg-up",attrs:{role:"button",tabindex:""},on:{click:function(t){e.$root.$emit("sidebar")}}},[a("i",{staticClass:"fa fa-fw fa-bars"})]),e._v(" "),a("router-link",{staticClass:"navbar-brand nav-zero",attrs:{to:"/"}},[a("img",{attrs:{src:s(526),alt:"Zero"}})]),e._v(" "),a("div",{staticClass:"fl fl-auto navbar-text"},[e._v(" "+e._s(e.schoolName)+" ")]),e._v(" "),a("div",{staticClass:"navbar-user"},[a("div",{staticClass:"dropdown"},[a("a",{staticClass:"user-menu-toggler text-white",attrs:{role:"button",href:"#","data-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false"}},[a("div",{staticClass:"fl"},[a("div",{staticClass:"hidden-md-down fl-auto navbar-user-info"},[a("div",{staticClass:"name"},[e._v(e._s(e.name))]),e._v(" "),a("div",{staticClass:"school text-capitalize"},[e._v(" "+e._s(e.userType)+" ")])]),e._v(" "),a("img",{staticClass:"navbar-user-photo",attrs:{width:"28",height:"28",src:s(99)}})])]),e._v(" "),a("div",{staticClass:"dropdown-menu dropdown-menu-right user-menu-dropdown",attrs:{"aria-labelledby":"navbar-toggler"}},[a("div",{staticClass:"dropdown-item hidden-lg-up fl-auto navbar-user-info"},[a("div",{staticClass:"name"},[e._v(e._s(e.name))]),e._v(" "),a("div",{staticClass:"school"},[e._v(e._s(e.schoolName))])]),e._v(" "),a("div",{staticClass:"dropdown-divider"}),e._v(" "),a("div",{staticClass:"dropdown-item",attrs:{href:"#"}},[a("form",{attrs:{method:"POST",action:"/logout"}},[a("input",{attrs:{type:"hidden",name:"_token"},domProps:{value:e.token}}),e._v(" "),a("input",{staticClass:"user-logout-button",attrs:{type:"submit",value:"Logout"}})])])])])]),e._v(" "),a("apps-menu")],1)])},staticRenderFns:[]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("activity-box",e._b({staticClass:"settings-box"},"activity-box",{title:e.title,subtitle:e.subtitle,show:!0,disableFooter:!0}),[a("template",{slot:"icon"},[e._t("icon",[a("a",{staticClass:"activity-box-dismiss",attrs:{role:"button"},on:{click:function(t){t.preventDefault(),t.stopPropagation(),e.$router.go(-1)}}},[a("img",{attrs:{src:s(529)}})])])],2),e._v(" "),a("template",{slot:"actions"},[e._t("actions")],2),e._v(" "),a("div",{staticClass:"settings-pane"},[a("div",{staticClass:"text-xs-center"},[e.withHeader?a("div",{staticClass:"settings-header-image"},[e._t("header-image")],2):e._e(),e._v(" "),a("div",{staticClass:"settings-header-name"},[e._t("name")],2),e._v(" "),a("div",{staticClass:"settings-header-description"},[e._t("description")],2)]),e._v(" "),a("div",{staticClass:"container py-2"},[a("div",{staticClass:"row"},[a("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[a("div",{staticClass:"row my-2"},[e._t("settings-body")],2)])])])])],2)},staticRenderFns:[]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("activity-box",e._b({on:{close:function(t){e.$emit("close")}}},"activity-box",{title:e.title,subtitle:e.subtitle,disableFooter:!0}),[a("template",{slot:"icon"},[a("img",{attrs:{src:s(525)}})]),e._v(" "),a("template",{slot:"actions"},[a("router-link",{staticClass:"btn btn-secondary",attrs:{to:{name:"hub.group-create"}}},[a("i",{directives:[{name:"tooltip",rawName:"v-tooltip",value:"Create New Group",expression:"'Create New Group'"}],staticClass:"fa fa-fw fa-plus hidden-lg-up"}),e._v(" "),a("span",{staticClass:"hidden-md-down"},[e._v("Create New Group")])])],1),e._v(" "),a("div",{staticClass:"container"},[a("div",{staticClass:"directory-header row"},[a("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2 my-2"},[a("div",{staticClass:"input-group input-group-lg"},[a("span",{staticClass:"input-group-addon"},[a("i",{staticClass:"fa fa-search"})]),e._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:e.q,expression:"q"}],staticClass:"form-control",attrs:{type:"search"},domProps:{value:e._s(e.q)},on:{keyup:function(t){e.$emit("search",e.q)},input:function(t){t.target.composing||(e.q=t.target.value)}}})])])]),e._v(" "),a("div",{staticClass:"row directory-results-container"},[a("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[a("div",{staticClass:"row"},[a("div",{staticClass:"col-xs-12 directory-results-description"},[e._v(e._s(e.resultMessage))])]),e._v(" "),a("div",{staticClass:"row"},[e._l(e.filtered,function(t,s){return a("div",{staticClass:"col-xs-12 col-md-6"},[a("person-card",{attrs:{item:t},on:{open:function(a){e.onGroupSelected(t,s)}}},[a("div",{staticClass:"person-card-bio"},[t.is_member?a("span",[a("span",{staticClass:"text-primary"},[e._v("JOINED")]),e._v(" ·\n                            ")]):e._e(),e._v("\n                            "+e._s(t.member_count_text)+"\n                          ")])])],1)}),e._v(" "),a("infinite-scroll",{ref:"infinite",staticClass:"col-xs-12",attrs:{"on-infinite":e.onInfinite,spinner:"waveDots"}})],2)])])])],2)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("activity-box",{attrs:{title:"Create Course",subtitle:"This would create a new course."},on:{close:function(t){e.$router.push({name:"acad"})}}},[s("template",{slot:"actions"},[s("a",{ref:"action",staticClass:"btn btn-primary",attrs:{role:"button",tabindex:""},on:{click:function(t){t.preventDefault(),t.stopPropagation(),e.createCourse(t)}}},[s("i",{directives:[{name:"tooltip",rawName:"v-tooltip:bottom",value:"Create Course",expression:"'Create Course'",arg:"bottom"}],staticClass:"fa fa-fw fa-save hidden-lg-up"}),e._v(" "),s("span",{staticClass:"hidden-md-down"},[e._v("Create Course")])])]),e._v(" "),s("div",{staticClass:"container py-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.course.name,expression:"course.name"}],attrs:{title:"Course Name",required:"",placeholder:"enter course name",feedback:e.errors.name},domProps:{value:e.course.name},on:{input:function(t){e.course.name=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6"},[s("input-text",{directives:[{name:"model",rawName:"v-model",value:e.course.code,expression:"course.code"}],attrs:{title:"Course code",required:"",placeholder:"enter course code",feedback:e.errors.code},domProps:{value:e.course.code},on:{input:function(t){e.course.code=t}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-6"},[s("input-select",{directives:[{name:"model",rawName:"v-model.number",value:e.course.department_id,expression:"course.department_id",modifiers:{number:!0}}],attrs:{title:"Department",required:"",feedback:e.errors.department_id,options:e.departments},domProps:{value:e.course.department_id},on:{input:function(t){e.course.department_id=e._n(t)},blur:function(t){e.$forceUpdate()}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-4"},[s("input-select",{directives:[{name:"model",rawName:"v-model.number",value:e.course.discipline_id,expression:"course.discipline_id",modifiers:{number:!0}}],attrs:{title:"Discipline",feedback:e.errors.discipline_id,options:e.disciplines},domProps:{value:e.course.discipline_id},on:{input:function(t){e.course.discipline_id=e._n(t)},blur:function(t){e.$forceUpdate()}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-4"},[s("input-select",{directives:[{name:"model",rawName:"v-model.number",value:e.course.year_id,expression:"course.year_id",modifiers:{number:!0}}],attrs:{title:"Year",feedback:e.errors.year_id,options:e.years},domProps:{value:e.course.year_id},on:{input:function(t){e.course.year_id=e._n(t)},blur:function(t){e.$forceUpdate()}}})],1),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-4"},[s("input-select",{directives:[{name:"model",rawName:"v-model.number",value:e.course.semester_id,expression:"course.semester_id",modifiers:{number:!0}}],attrs:{title:"Semester",feedback:e.errors.semester_id,options:e.semesters},domProps:{value:e.course.semester_id},on:{input:function(t){e.course.semester_id=e._n(t)},blur:function(t){e.$forceUpdate()}}})],1)])])])]),e._v(" "),s("div",{staticClass:"fl fl-middle"},[s("hr",{staticClass:"fl-auto"}),e._v(" "),s("small",{staticClass:"px-1 text-uppercase"},[e._v("\n      Course Instructors\n    ")]),e._v(" "),s("hr",{staticClass:"fl-auto"})]),e._v(" "),s("div",{staticClass:"container py-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12"},[s("input-search",e._b({directives:[{name:"model",rawName:"v-model",value:e.qi,expression:"qi"}],ref:"instructor",attrs:{title:"Course Instructor",subtitle:"Course Instructor will be notified. He/she can collaborate with students."},domProps:{value:e.qi},on:{suggest:e.findInstructor,select:e.addInstructor,input:function(t){e.qi=t}}},"input-search",{suggestions:e.teachers}))],1)]),e._v(" "),s("div",{staticClass:"row"},e._l(e.instructors,function(t){return s("div",{key:t.id,staticClass:"col-xs-12 col-lg-6"},[s("person-card",{attrs:{item:t}},[s("a",{directives:[{name:"tooltip",rawName:"v-tooltip",value:"Remove",expression:"'Remove'"}],staticClass:"text-muted",attrs:{href:"#"},on:{click:function(s){s.stopPropagation(),s.preventDefault(),e.removeInstructor(t)}},slot:"actions"},[s("i",{staticClass:"fa fa-fw fa-trash-o"})])])],1)}))])])]),e._v(" "),s("div",{staticClass:"fl fl-middle"},[s("hr",{staticClass:"fl-auto"}),e._v(" "),s("small",{staticClass:"px-1 text-uppercase"},[e._v("\n      Pre-requisite Courses\n    ")]),e._v(" "),s("hr",{staticClass:"fl-auto"})]),e._v(" "),s("div",{staticClass:"container py-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12 col-lg-8 offset-lg-2"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-12"},[s("input-search",e._b({directives:[{name:"model",rawName:"v-model",value:e.qc,expression:"qc"}],ref:"course",attrs:{title:"Course Name"},domProps:{value:e.qc},on:{suggest:e.findPreRequisiteCourse,select:e.addPreRequisiteCourse,input:function(t){e.qc=t}}},"input-search",{suggestions:e.courses}))],1),e._v(" "),e._l(e.prerequisites,function(t){return s("div",{key:t.id,staticClass:"col-xs-12 col-lg-6"},[s("div",{staticClass:"card card-block fl"},[s("div",{staticClass:"fl-auto"},[s("h6",[e._v(e._s(t.name))]),e._v(" "),s("small",{staticClass:"text-muted"},[e._v(e._s(t.code))])]),e._v(" "),s("a",{directives:[{name:"tooltip",rawName:"v-tooltip",value:"Remove",expression:"'Remove'"}],staticClass:"text-muted",attrs:{href:"#"},on:{click:function(s){s.stopPropagation(),s.preventDefault(),e.removePreRequisiteCourse(t)}}},[s("i",{staticClass:"fa fa-fw fa-trash-o"})])])])})],2)])])]),e._v(" "),s("div",{staticClass:"py-3"})],2)},staticRenderFns:[]}},function(e,t,s){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("settings-box",e._b({staticClass:"settings",on:{close:function(t){e.$router.go(-1)}}},"settings-box",{title:e.title,subtitle:e.subtitle}),[a("template",{slot:"icon"},[a("a",{staticClass:"activity-box-dismiss",attrs:{role:"button"}},[a("img",{attrs:{src:s(533)}})])]),e._v(" "),a("template",{slot:"header-image"},[a("img",{attrs:{src:s(528)}})]),e._v(" "),a("template",{slot:"name"},[e._v("\n        Institute Admin Settings\n    ")]),e._v(" "),a("template",{slot:"settings-body"},e._l(e.settingCards,function(t,s){return a("div",{staticClass:"col-xs-12 col-lg-6 settings-items"},[a("setting-card",e._b({staticClass:"settings-card",attrs:{title:t.title,text:t.text},on:{cardClicked:e.settingClicked}},"setting-card",{index:s}))],1)}))],2)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("window-box",{attrs:{title:"Find teachers",subtitle:"View teachers and new teacher requests"}},[s("div",{staticClass:"container py-1 teacher-list"},[s("div",{staticClass:"row"},[s("div",{
staticClass:"col-xs-12 col-lg-3"},[s("div",{staticClass:"card card-block"},[s("label",{staticClass:"custom-control custom-checkbox text-danger mb-0"},[s("input",{directives:[{name:"model",rawName:"v-model",value:e.reviewingRequests,expression:"reviewingRequests"}],staticClass:"custom-control-input",attrs:{type:"checkbox"},domProps:{checked:Array.isArray(e.reviewingRequests)?e._i(e.reviewingRequests,null)>-1:e.reviewingRequests},on:{click:function(t){var s=e.reviewingRequests,a=t.target,n=!!a.checked;if(Array.isArray(s)){var i=null,r=e._i(s,i);n?r<0&&(e.reviewingRequests=s.concat(i)):r>-1&&(e.reviewingRequests=s.slice(0,r).concat(s.slice(r+1)))}else e.reviewingRequests=n}}}),e._v(" "),s("span",{staticClass:"custom-control-indicator"}),e._v(" "),s("span",{staticClass:"custom-control-description"},[e._v("New Requests")])])]),e._v(" "),s("div",{staticClass:"card card-block",class:{"hidden-sm-down":e.reviewingRequests}},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-xs-6 col-md-12"},[s("h6",{staticClass:"text-muted"},[e._v("Department")]),e._v(" "),s("fieldset",{attrs:{disabled:e.reviewingRequests}},[s("div",{staticClass:"custom-controls-stacked"},e._l(e.departments.filter(function(e){return e.academic}),function(t){return s("label",{staticClass:"custom-control custom-checkbox"},[s("input",{directives:[{name:"model",rawName:"v-model",value:e.department,expression:"department"}],staticClass:"custom-control-input",attrs:{name:"department",type:"checkbox"},domProps:{value:t.id,checked:Array.isArray(e.department)?e._i(e.department,t.id)>-1:e.department},on:{click:function(s){var a=e.department,n=s.target,i=!!n.checked;if(Array.isArray(a)){var r=t.id,o=e._i(a,r);i?o<0&&(e.department=a.concat(r)):o>-1&&(e.department=a.slice(0,o).concat(a.slice(o+1)))}else e.department=i}}}),e._v(" "),s("span",{staticClass:"custom-control-indicator"}),e._v(" "),s("span",{staticClass:"custom-control-description"},[e._v(e._s(t.name))])])}))])])])])]),e._v(" "),s("div",{staticClass:"col-xs-12 col-lg-9"},[s("div",{staticClass:"form-group"},[s("div",{staticClass:"input-group"},[s("span",{staticClass:"input-group-addon search-box"},[s("i",{staticClass:"fa fa-fw fa-search"})]),e._v(" "),s("input",{directives:[{name:"model",rawName:"v-model",value:e.query,expression:"query"}],staticClass:"form-control form-control-lg search-box",attrs:{type:"text",placeholder:"Start typing..."},domProps:{value:e._s(e.query)},on:{input:function(t){t.target.composing||(e.query=t.target.value)}}})])]),e._v(" "),s("div",{staticClass:"card"},[s("div",{staticClass:"card-header bg-white"},[s("div",{staticClass:"title"},[e._v(e._s(e.searchText))]),e._v(" "),s("div",{staticClass:"text-muted"},[e._v("\n              "+e._s(e.countText)+"\n            ")])]),e._v(" "),s("div",{staticClass:"card-block"},[s("div",{staticClass:"row"},[e._l(e.teachers,function(t){return s("div",{key:t.id,staticClass:"col-xs-12 col-lg-6 teacher-card"},[s("person-card",{attrs:{item:t},on:{open:function(s){e.$router.push({name:"teacher.profile",params:{teacher:t.uid}})}}})],1)}),e._v(" "),s("div",{staticClass:"col-xs-12"},[s("infinite-loader",{on:{load:e.onLoad}})],1)],2)])])])])])])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("message",{staticClass:"continued",attrs:{message:e.message},on:{"open-sender":function(t){e.$emit("open-sender",e.message)}}},[s("div",{staticClass:"message-sender-photo-placeholder",slot:"sender-photo"}),e._v(" "),s("template",{slot:"message-meta"})],2)},staticRenderFns:[]}},,,function(e,t,s){var a=s(433);"string"==typeof a&&(a=[[e.i,a,""]]);s(817)(a,{});a.locals&&(e.exports=a.locals)},,,,function(e,t){},function(e,t){},function(e,t,s){s(288),e.exports=s(289)}],[824]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,